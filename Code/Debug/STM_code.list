
STM_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e70  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08003f30  08003f30  00004f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004074  08004074  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004074  08004074  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004074  08004074  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004074  08004074  00005074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004078  08004078  00005078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800407c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000384  2000000c  08004088  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000390  08004088  00006390  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b868  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001abf  00000000  00000000  0001189c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000940  00000000  00000000  00013360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000723  00000000  00000000  00013ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013b83  00000000  00000000  000143c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb48  00000000  00000000  00027f46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007d789  00000000  00000000  00033a8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b1217  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002274  00000000  00000000  000b125c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000b34d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003f18 	.word	0x08003f18

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003f18 	.word	0x08003f18

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_cfrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0008      	movs	r0, r1
 80003f8:	4661      	mov	r1, ip
 80003fa:	e7ff      	b.n	80003fc <__aeabi_cfcmpeq>

080003fc <__aeabi_cfcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f000 f9cb 	bl	8000798 <__lesf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cfcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_fcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 f94b 	bl	80006a8 <__eqsf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_fcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 f9bd 	bl	8000798 <__lesf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_fcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_fcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 f9b3 	bl	8000798 <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_fcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__aeabi_fcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 f959 	bl	80006f8 <__gesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_fcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__aeabi_fcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 f94f 	bl	80006f8 <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_fcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_fdiv>:
 8000468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800046a:	464f      	mov	r7, r9
 800046c:	4646      	mov	r6, r8
 800046e:	46d6      	mov	lr, sl
 8000470:	0244      	lsls	r4, r0, #9
 8000472:	b5c0      	push	{r6, r7, lr}
 8000474:	0047      	lsls	r7, r0, #1
 8000476:	1c0e      	adds	r6, r1, #0
 8000478:	0a64      	lsrs	r4, r4, #9
 800047a:	0e3f      	lsrs	r7, r7, #24
 800047c:	0fc5      	lsrs	r5, r0, #31
 800047e:	2f00      	cmp	r7, #0
 8000480:	d03c      	beq.n	80004fc <__aeabi_fdiv+0x94>
 8000482:	2fff      	cmp	r7, #255	@ 0xff
 8000484:	d042      	beq.n	800050c <__aeabi_fdiv+0xa4>
 8000486:	2300      	movs	r3, #0
 8000488:	2280      	movs	r2, #128	@ 0x80
 800048a:	4699      	mov	r9, r3
 800048c:	469a      	mov	sl, r3
 800048e:	00e4      	lsls	r4, r4, #3
 8000490:	04d2      	lsls	r2, r2, #19
 8000492:	4314      	orrs	r4, r2
 8000494:	3f7f      	subs	r7, #127	@ 0x7f
 8000496:	0273      	lsls	r3, r6, #9
 8000498:	0a5b      	lsrs	r3, r3, #9
 800049a:	4698      	mov	r8, r3
 800049c:	0073      	lsls	r3, r6, #1
 800049e:	0e1b      	lsrs	r3, r3, #24
 80004a0:	0ff6      	lsrs	r6, r6, #31
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d01b      	beq.n	80004de <__aeabi_fdiv+0x76>
 80004a6:	2bff      	cmp	r3, #255	@ 0xff
 80004a8:	d013      	beq.n	80004d2 <__aeabi_fdiv+0x6a>
 80004aa:	4642      	mov	r2, r8
 80004ac:	2180      	movs	r1, #128	@ 0x80
 80004ae:	00d2      	lsls	r2, r2, #3
 80004b0:	04c9      	lsls	r1, r1, #19
 80004b2:	4311      	orrs	r1, r2
 80004b4:	4688      	mov	r8, r1
 80004b6:	2000      	movs	r0, #0
 80004b8:	3b7f      	subs	r3, #127	@ 0x7f
 80004ba:	0029      	movs	r1, r5
 80004bc:	1aff      	subs	r7, r7, r3
 80004be:	464b      	mov	r3, r9
 80004c0:	4071      	eors	r1, r6
 80004c2:	b2c9      	uxtb	r1, r1
 80004c4:	2b0f      	cmp	r3, #15
 80004c6:	d900      	bls.n	80004ca <__aeabi_fdiv+0x62>
 80004c8:	e0b5      	b.n	8000636 <__aeabi_fdiv+0x1ce>
 80004ca:	4a74      	ldr	r2, [pc, #464]	@ (800069c <__aeabi_fdiv+0x234>)
 80004cc:	009b      	lsls	r3, r3, #2
 80004ce:	58d3      	ldr	r3, [r2, r3]
 80004d0:	469f      	mov	pc, r3
 80004d2:	4643      	mov	r3, r8
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d13f      	bne.n	8000558 <__aeabi_fdiv+0xf0>
 80004d8:	3fff      	subs	r7, #255	@ 0xff
 80004da:	3302      	adds	r3, #2
 80004dc:	e003      	b.n	80004e6 <__aeabi_fdiv+0x7e>
 80004de:	4643      	mov	r3, r8
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d12d      	bne.n	8000540 <__aeabi_fdiv+0xd8>
 80004e4:	2301      	movs	r3, #1
 80004e6:	0029      	movs	r1, r5
 80004e8:	464a      	mov	r2, r9
 80004ea:	4071      	eors	r1, r6
 80004ec:	b2c9      	uxtb	r1, r1
 80004ee:	431a      	orrs	r2, r3
 80004f0:	2a0e      	cmp	r2, #14
 80004f2:	d838      	bhi.n	8000566 <__aeabi_fdiv+0xfe>
 80004f4:	486a      	ldr	r0, [pc, #424]	@ (80006a0 <__aeabi_fdiv+0x238>)
 80004f6:	0092      	lsls	r2, r2, #2
 80004f8:	5882      	ldr	r2, [r0, r2]
 80004fa:	4697      	mov	pc, r2
 80004fc:	2c00      	cmp	r4, #0
 80004fe:	d113      	bne.n	8000528 <__aeabi_fdiv+0xc0>
 8000500:	2304      	movs	r3, #4
 8000502:	4699      	mov	r9, r3
 8000504:	3b03      	subs	r3, #3
 8000506:	2700      	movs	r7, #0
 8000508:	469a      	mov	sl, r3
 800050a:	e7c4      	b.n	8000496 <__aeabi_fdiv+0x2e>
 800050c:	2c00      	cmp	r4, #0
 800050e:	d105      	bne.n	800051c <__aeabi_fdiv+0xb4>
 8000510:	2308      	movs	r3, #8
 8000512:	4699      	mov	r9, r3
 8000514:	3b06      	subs	r3, #6
 8000516:	27ff      	movs	r7, #255	@ 0xff
 8000518:	469a      	mov	sl, r3
 800051a:	e7bc      	b.n	8000496 <__aeabi_fdiv+0x2e>
 800051c:	230c      	movs	r3, #12
 800051e:	4699      	mov	r9, r3
 8000520:	3b09      	subs	r3, #9
 8000522:	27ff      	movs	r7, #255	@ 0xff
 8000524:	469a      	mov	sl, r3
 8000526:	e7b6      	b.n	8000496 <__aeabi_fdiv+0x2e>
 8000528:	0020      	movs	r0, r4
 800052a:	f000 fee9 	bl	8001300 <__clzsi2>
 800052e:	2776      	movs	r7, #118	@ 0x76
 8000530:	1f43      	subs	r3, r0, #5
 8000532:	409c      	lsls	r4, r3
 8000534:	2300      	movs	r3, #0
 8000536:	427f      	negs	r7, r7
 8000538:	4699      	mov	r9, r3
 800053a:	469a      	mov	sl, r3
 800053c:	1a3f      	subs	r7, r7, r0
 800053e:	e7aa      	b.n	8000496 <__aeabi_fdiv+0x2e>
 8000540:	4640      	mov	r0, r8
 8000542:	f000 fedd 	bl	8001300 <__clzsi2>
 8000546:	4642      	mov	r2, r8
 8000548:	1f43      	subs	r3, r0, #5
 800054a:	409a      	lsls	r2, r3
 800054c:	2376      	movs	r3, #118	@ 0x76
 800054e:	425b      	negs	r3, r3
 8000550:	1a1b      	subs	r3, r3, r0
 8000552:	4690      	mov	r8, r2
 8000554:	2000      	movs	r0, #0
 8000556:	e7b0      	b.n	80004ba <__aeabi_fdiv+0x52>
 8000558:	2303      	movs	r3, #3
 800055a:	464a      	mov	r2, r9
 800055c:	431a      	orrs	r2, r3
 800055e:	4691      	mov	r9, r2
 8000560:	2003      	movs	r0, #3
 8000562:	33fc      	adds	r3, #252	@ 0xfc
 8000564:	e7a9      	b.n	80004ba <__aeabi_fdiv+0x52>
 8000566:	000d      	movs	r5, r1
 8000568:	20ff      	movs	r0, #255	@ 0xff
 800056a:	2200      	movs	r2, #0
 800056c:	05c0      	lsls	r0, r0, #23
 800056e:	07ed      	lsls	r5, r5, #31
 8000570:	4310      	orrs	r0, r2
 8000572:	4328      	orrs	r0, r5
 8000574:	bce0      	pop	{r5, r6, r7}
 8000576:	46ba      	mov	sl, r7
 8000578:	46b1      	mov	r9, r6
 800057a:	46a8      	mov	r8, r5
 800057c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800057e:	000d      	movs	r5, r1
 8000580:	2000      	movs	r0, #0
 8000582:	2200      	movs	r2, #0
 8000584:	e7f2      	b.n	800056c <__aeabi_fdiv+0x104>
 8000586:	4653      	mov	r3, sl
 8000588:	2b02      	cmp	r3, #2
 800058a:	d0ed      	beq.n	8000568 <__aeabi_fdiv+0x100>
 800058c:	2b03      	cmp	r3, #3
 800058e:	d033      	beq.n	80005f8 <__aeabi_fdiv+0x190>
 8000590:	46a0      	mov	r8, r4
 8000592:	2b01      	cmp	r3, #1
 8000594:	d105      	bne.n	80005a2 <__aeabi_fdiv+0x13a>
 8000596:	2000      	movs	r0, #0
 8000598:	2200      	movs	r2, #0
 800059a:	e7e7      	b.n	800056c <__aeabi_fdiv+0x104>
 800059c:	0035      	movs	r5, r6
 800059e:	2803      	cmp	r0, #3
 80005a0:	d07a      	beq.n	8000698 <__aeabi_fdiv+0x230>
 80005a2:	003b      	movs	r3, r7
 80005a4:	337f      	adds	r3, #127	@ 0x7f
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	dd2d      	ble.n	8000606 <__aeabi_fdiv+0x19e>
 80005aa:	4642      	mov	r2, r8
 80005ac:	0752      	lsls	r2, r2, #29
 80005ae:	d007      	beq.n	80005c0 <__aeabi_fdiv+0x158>
 80005b0:	220f      	movs	r2, #15
 80005b2:	4641      	mov	r1, r8
 80005b4:	400a      	ands	r2, r1
 80005b6:	2a04      	cmp	r2, #4
 80005b8:	d002      	beq.n	80005c0 <__aeabi_fdiv+0x158>
 80005ba:	2204      	movs	r2, #4
 80005bc:	4694      	mov	ip, r2
 80005be:	44e0      	add	r8, ip
 80005c0:	4642      	mov	r2, r8
 80005c2:	0112      	lsls	r2, r2, #4
 80005c4:	d505      	bpl.n	80005d2 <__aeabi_fdiv+0x16a>
 80005c6:	4642      	mov	r2, r8
 80005c8:	4b36      	ldr	r3, [pc, #216]	@ (80006a4 <__aeabi_fdiv+0x23c>)
 80005ca:	401a      	ands	r2, r3
 80005cc:	003b      	movs	r3, r7
 80005ce:	4690      	mov	r8, r2
 80005d0:	3380      	adds	r3, #128	@ 0x80
 80005d2:	2bfe      	cmp	r3, #254	@ 0xfe
 80005d4:	dcc8      	bgt.n	8000568 <__aeabi_fdiv+0x100>
 80005d6:	4642      	mov	r2, r8
 80005d8:	0192      	lsls	r2, r2, #6
 80005da:	0a52      	lsrs	r2, r2, #9
 80005dc:	b2d8      	uxtb	r0, r3
 80005de:	e7c5      	b.n	800056c <__aeabi_fdiv+0x104>
 80005e0:	2280      	movs	r2, #128	@ 0x80
 80005e2:	2500      	movs	r5, #0
 80005e4:	20ff      	movs	r0, #255	@ 0xff
 80005e6:	03d2      	lsls	r2, r2, #15
 80005e8:	e7c0      	b.n	800056c <__aeabi_fdiv+0x104>
 80005ea:	2280      	movs	r2, #128	@ 0x80
 80005ec:	03d2      	lsls	r2, r2, #15
 80005ee:	4214      	tst	r4, r2
 80005f0:	d002      	beq.n	80005f8 <__aeabi_fdiv+0x190>
 80005f2:	4643      	mov	r3, r8
 80005f4:	4213      	tst	r3, r2
 80005f6:	d049      	beq.n	800068c <__aeabi_fdiv+0x224>
 80005f8:	2280      	movs	r2, #128	@ 0x80
 80005fa:	03d2      	lsls	r2, r2, #15
 80005fc:	4322      	orrs	r2, r4
 80005fe:	0252      	lsls	r2, r2, #9
 8000600:	20ff      	movs	r0, #255	@ 0xff
 8000602:	0a52      	lsrs	r2, r2, #9
 8000604:	e7b2      	b.n	800056c <__aeabi_fdiv+0x104>
 8000606:	2201      	movs	r2, #1
 8000608:	1ad3      	subs	r3, r2, r3
 800060a:	2b1b      	cmp	r3, #27
 800060c:	dcc3      	bgt.n	8000596 <__aeabi_fdiv+0x12e>
 800060e:	4642      	mov	r2, r8
 8000610:	40da      	lsrs	r2, r3
 8000612:	4643      	mov	r3, r8
 8000614:	379e      	adds	r7, #158	@ 0x9e
 8000616:	40bb      	lsls	r3, r7
 8000618:	1e59      	subs	r1, r3, #1
 800061a:	418b      	sbcs	r3, r1
 800061c:	431a      	orrs	r2, r3
 800061e:	0753      	lsls	r3, r2, #29
 8000620:	d004      	beq.n	800062c <__aeabi_fdiv+0x1c4>
 8000622:	230f      	movs	r3, #15
 8000624:	4013      	ands	r3, r2
 8000626:	2b04      	cmp	r3, #4
 8000628:	d000      	beq.n	800062c <__aeabi_fdiv+0x1c4>
 800062a:	3204      	adds	r2, #4
 800062c:	0153      	lsls	r3, r2, #5
 800062e:	d529      	bpl.n	8000684 <__aeabi_fdiv+0x21c>
 8000630:	2001      	movs	r0, #1
 8000632:	2200      	movs	r2, #0
 8000634:	e79a      	b.n	800056c <__aeabi_fdiv+0x104>
 8000636:	4642      	mov	r2, r8
 8000638:	0163      	lsls	r3, r4, #5
 800063a:	0155      	lsls	r5, r2, #5
 800063c:	42ab      	cmp	r3, r5
 800063e:	d215      	bcs.n	800066c <__aeabi_fdiv+0x204>
 8000640:	201b      	movs	r0, #27
 8000642:	2200      	movs	r2, #0
 8000644:	3f01      	subs	r7, #1
 8000646:	2601      	movs	r6, #1
 8000648:	001c      	movs	r4, r3
 800064a:	0052      	lsls	r2, r2, #1
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	2c00      	cmp	r4, #0
 8000650:	db01      	blt.n	8000656 <__aeabi_fdiv+0x1ee>
 8000652:	429d      	cmp	r5, r3
 8000654:	d801      	bhi.n	800065a <__aeabi_fdiv+0x1f2>
 8000656:	1b5b      	subs	r3, r3, r5
 8000658:	4332      	orrs	r2, r6
 800065a:	3801      	subs	r0, #1
 800065c:	2800      	cmp	r0, #0
 800065e:	d1f3      	bne.n	8000648 <__aeabi_fdiv+0x1e0>
 8000660:	1e58      	subs	r0, r3, #1
 8000662:	4183      	sbcs	r3, r0
 8000664:	4313      	orrs	r3, r2
 8000666:	4698      	mov	r8, r3
 8000668:	000d      	movs	r5, r1
 800066a:	e79a      	b.n	80005a2 <__aeabi_fdiv+0x13a>
 800066c:	201a      	movs	r0, #26
 800066e:	2201      	movs	r2, #1
 8000670:	1b5b      	subs	r3, r3, r5
 8000672:	e7e8      	b.n	8000646 <__aeabi_fdiv+0x1de>
 8000674:	3b02      	subs	r3, #2
 8000676:	425a      	negs	r2, r3
 8000678:	4153      	adcs	r3, r2
 800067a:	425b      	negs	r3, r3
 800067c:	0035      	movs	r5, r6
 800067e:	2200      	movs	r2, #0
 8000680:	b2d8      	uxtb	r0, r3
 8000682:	e773      	b.n	800056c <__aeabi_fdiv+0x104>
 8000684:	0192      	lsls	r2, r2, #6
 8000686:	2000      	movs	r0, #0
 8000688:	0a52      	lsrs	r2, r2, #9
 800068a:	e76f      	b.n	800056c <__aeabi_fdiv+0x104>
 800068c:	431a      	orrs	r2, r3
 800068e:	0252      	lsls	r2, r2, #9
 8000690:	0035      	movs	r5, r6
 8000692:	20ff      	movs	r0, #255	@ 0xff
 8000694:	0a52      	lsrs	r2, r2, #9
 8000696:	e769      	b.n	800056c <__aeabi_fdiv+0x104>
 8000698:	4644      	mov	r4, r8
 800069a:	e7ad      	b.n	80005f8 <__aeabi_fdiv+0x190>
 800069c:	08003f30 	.word	0x08003f30
 80006a0:	08003f70 	.word	0x08003f70
 80006a4:	f7ffffff 	.word	0xf7ffffff

080006a8 <__eqsf2>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	0042      	lsls	r2, r0, #1
 80006ac:	024e      	lsls	r6, r1, #9
 80006ae:	004c      	lsls	r4, r1, #1
 80006b0:	0245      	lsls	r5, r0, #9
 80006b2:	0a6d      	lsrs	r5, r5, #9
 80006b4:	0e12      	lsrs	r2, r2, #24
 80006b6:	0fc3      	lsrs	r3, r0, #31
 80006b8:	0a76      	lsrs	r6, r6, #9
 80006ba:	0e24      	lsrs	r4, r4, #24
 80006bc:	0fc9      	lsrs	r1, r1, #31
 80006be:	2aff      	cmp	r2, #255	@ 0xff
 80006c0:	d010      	beq.n	80006e4 <__eqsf2+0x3c>
 80006c2:	2cff      	cmp	r4, #255	@ 0xff
 80006c4:	d00c      	beq.n	80006e0 <__eqsf2+0x38>
 80006c6:	2001      	movs	r0, #1
 80006c8:	42a2      	cmp	r2, r4
 80006ca:	d10a      	bne.n	80006e2 <__eqsf2+0x3a>
 80006cc:	42b5      	cmp	r5, r6
 80006ce:	d108      	bne.n	80006e2 <__eqsf2+0x3a>
 80006d0:	428b      	cmp	r3, r1
 80006d2:	d00f      	beq.n	80006f4 <__eqsf2+0x4c>
 80006d4:	2a00      	cmp	r2, #0
 80006d6:	d104      	bne.n	80006e2 <__eqsf2+0x3a>
 80006d8:	0028      	movs	r0, r5
 80006da:	1e43      	subs	r3, r0, #1
 80006dc:	4198      	sbcs	r0, r3
 80006de:	e000      	b.n	80006e2 <__eqsf2+0x3a>
 80006e0:	2001      	movs	r0, #1
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	2001      	movs	r0, #1
 80006e6:	2cff      	cmp	r4, #255	@ 0xff
 80006e8:	d1fb      	bne.n	80006e2 <__eqsf2+0x3a>
 80006ea:	4335      	orrs	r5, r6
 80006ec:	d1f9      	bne.n	80006e2 <__eqsf2+0x3a>
 80006ee:	404b      	eors	r3, r1
 80006f0:	0018      	movs	r0, r3
 80006f2:	e7f6      	b.n	80006e2 <__eqsf2+0x3a>
 80006f4:	2000      	movs	r0, #0
 80006f6:	e7f4      	b.n	80006e2 <__eqsf2+0x3a>

080006f8 <__gesf2>:
 80006f8:	b530      	push	{r4, r5, lr}
 80006fa:	0042      	lsls	r2, r0, #1
 80006fc:	0244      	lsls	r4, r0, #9
 80006fe:	024d      	lsls	r5, r1, #9
 8000700:	0fc3      	lsrs	r3, r0, #31
 8000702:	0048      	lsls	r0, r1, #1
 8000704:	0a64      	lsrs	r4, r4, #9
 8000706:	0e12      	lsrs	r2, r2, #24
 8000708:	0a6d      	lsrs	r5, r5, #9
 800070a:	0e00      	lsrs	r0, r0, #24
 800070c:	0fc9      	lsrs	r1, r1, #31
 800070e:	2aff      	cmp	r2, #255	@ 0xff
 8000710:	d019      	beq.n	8000746 <__gesf2+0x4e>
 8000712:	28ff      	cmp	r0, #255	@ 0xff
 8000714:	d00b      	beq.n	800072e <__gesf2+0x36>
 8000716:	2a00      	cmp	r2, #0
 8000718:	d11e      	bne.n	8000758 <__gesf2+0x60>
 800071a:	2800      	cmp	r0, #0
 800071c:	d10b      	bne.n	8000736 <__gesf2+0x3e>
 800071e:	2d00      	cmp	r5, #0
 8000720:	d027      	beq.n	8000772 <__gesf2+0x7a>
 8000722:	2c00      	cmp	r4, #0
 8000724:	d134      	bne.n	8000790 <__gesf2+0x98>
 8000726:	2900      	cmp	r1, #0
 8000728:	d02f      	beq.n	800078a <__gesf2+0x92>
 800072a:	0008      	movs	r0, r1
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	2d00      	cmp	r5, #0
 8000730:	d128      	bne.n	8000784 <__gesf2+0x8c>
 8000732:	2a00      	cmp	r2, #0
 8000734:	d101      	bne.n	800073a <__gesf2+0x42>
 8000736:	2c00      	cmp	r4, #0
 8000738:	d0f5      	beq.n	8000726 <__gesf2+0x2e>
 800073a:	428b      	cmp	r3, r1
 800073c:	d107      	bne.n	800074e <__gesf2+0x56>
 800073e:	2b00      	cmp	r3, #0
 8000740:	d023      	beq.n	800078a <__gesf2+0x92>
 8000742:	0018      	movs	r0, r3
 8000744:	e7f2      	b.n	800072c <__gesf2+0x34>
 8000746:	2c00      	cmp	r4, #0
 8000748:	d11c      	bne.n	8000784 <__gesf2+0x8c>
 800074a:	28ff      	cmp	r0, #255	@ 0xff
 800074c:	d014      	beq.n	8000778 <__gesf2+0x80>
 800074e:	1e58      	subs	r0, r3, #1
 8000750:	2302      	movs	r3, #2
 8000752:	4018      	ands	r0, r3
 8000754:	3801      	subs	r0, #1
 8000756:	e7e9      	b.n	800072c <__gesf2+0x34>
 8000758:	2800      	cmp	r0, #0
 800075a:	d0f8      	beq.n	800074e <__gesf2+0x56>
 800075c:	428b      	cmp	r3, r1
 800075e:	d1f6      	bne.n	800074e <__gesf2+0x56>
 8000760:	4282      	cmp	r2, r0
 8000762:	dcf4      	bgt.n	800074e <__gesf2+0x56>
 8000764:	dbeb      	blt.n	800073e <__gesf2+0x46>
 8000766:	42ac      	cmp	r4, r5
 8000768:	d8f1      	bhi.n	800074e <__gesf2+0x56>
 800076a:	2000      	movs	r0, #0
 800076c:	42ac      	cmp	r4, r5
 800076e:	d2dd      	bcs.n	800072c <__gesf2+0x34>
 8000770:	e7e5      	b.n	800073e <__gesf2+0x46>
 8000772:	2c00      	cmp	r4, #0
 8000774:	d0da      	beq.n	800072c <__gesf2+0x34>
 8000776:	e7ea      	b.n	800074e <__gesf2+0x56>
 8000778:	2d00      	cmp	r5, #0
 800077a:	d103      	bne.n	8000784 <__gesf2+0x8c>
 800077c:	428b      	cmp	r3, r1
 800077e:	d1e6      	bne.n	800074e <__gesf2+0x56>
 8000780:	2000      	movs	r0, #0
 8000782:	e7d3      	b.n	800072c <__gesf2+0x34>
 8000784:	2002      	movs	r0, #2
 8000786:	4240      	negs	r0, r0
 8000788:	e7d0      	b.n	800072c <__gesf2+0x34>
 800078a:	2001      	movs	r0, #1
 800078c:	4240      	negs	r0, r0
 800078e:	e7cd      	b.n	800072c <__gesf2+0x34>
 8000790:	428b      	cmp	r3, r1
 8000792:	d0e8      	beq.n	8000766 <__gesf2+0x6e>
 8000794:	e7db      	b.n	800074e <__gesf2+0x56>
 8000796:	46c0      	nop			@ (mov r8, r8)

08000798 <__lesf2>:
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	0042      	lsls	r2, r0, #1
 800079c:	0244      	lsls	r4, r0, #9
 800079e:	024d      	lsls	r5, r1, #9
 80007a0:	0fc3      	lsrs	r3, r0, #31
 80007a2:	0048      	lsls	r0, r1, #1
 80007a4:	0a64      	lsrs	r4, r4, #9
 80007a6:	0e12      	lsrs	r2, r2, #24
 80007a8:	0a6d      	lsrs	r5, r5, #9
 80007aa:	0e00      	lsrs	r0, r0, #24
 80007ac:	0fc9      	lsrs	r1, r1, #31
 80007ae:	2aff      	cmp	r2, #255	@ 0xff
 80007b0:	d01a      	beq.n	80007e8 <__lesf2+0x50>
 80007b2:	28ff      	cmp	r0, #255	@ 0xff
 80007b4:	d00e      	beq.n	80007d4 <__lesf2+0x3c>
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	d11e      	bne.n	80007f8 <__lesf2+0x60>
 80007ba:	2800      	cmp	r0, #0
 80007bc:	d10e      	bne.n	80007dc <__lesf2+0x44>
 80007be:	2d00      	cmp	r5, #0
 80007c0:	d02a      	beq.n	8000818 <__lesf2+0x80>
 80007c2:	2c00      	cmp	r4, #0
 80007c4:	d00c      	beq.n	80007e0 <__lesf2+0x48>
 80007c6:	428b      	cmp	r3, r1
 80007c8:	d01d      	beq.n	8000806 <__lesf2+0x6e>
 80007ca:	1e58      	subs	r0, r3, #1
 80007cc:	2302      	movs	r3, #2
 80007ce:	4018      	ands	r0, r3
 80007d0:	3801      	subs	r0, #1
 80007d2:	e010      	b.n	80007f6 <__lesf2+0x5e>
 80007d4:	2d00      	cmp	r5, #0
 80007d6:	d10d      	bne.n	80007f4 <__lesf2+0x5c>
 80007d8:	2a00      	cmp	r2, #0
 80007da:	d120      	bne.n	800081e <__lesf2+0x86>
 80007dc:	2c00      	cmp	r4, #0
 80007de:	d11e      	bne.n	800081e <__lesf2+0x86>
 80007e0:	2900      	cmp	r1, #0
 80007e2:	d023      	beq.n	800082c <__lesf2+0x94>
 80007e4:	0008      	movs	r0, r1
 80007e6:	e006      	b.n	80007f6 <__lesf2+0x5e>
 80007e8:	2c00      	cmp	r4, #0
 80007ea:	d103      	bne.n	80007f4 <__lesf2+0x5c>
 80007ec:	28ff      	cmp	r0, #255	@ 0xff
 80007ee:	d1ec      	bne.n	80007ca <__lesf2+0x32>
 80007f0:	2d00      	cmp	r5, #0
 80007f2:	d017      	beq.n	8000824 <__lesf2+0x8c>
 80007f4:	2002      	movs	r0, #2
 80007f6:	bd30      	pop	{r4, r5, pc}
 80007f8:	2800      	cmp	r0, #0
 80007fa:	d0e6      	beq.n	80007ca <__lesf2+0x32>
 80007fc:	428b      	cmp	r3, r1
 80007fe:	d1e4      	bne.n	80007ca <__lesf2+0x32>
 8000800:	4282      	cmp	r2, r0
 8000802:	dce2      	bgt.n	80007ca <__lesf2+0x32>
 8000804:	db04      	blt.n	8000810 <__lesf2+0x78>
 8000806:	42ac      	cmp	r4, r5
 8000808:	d8df      	bhi.n	80007ca <__lesf2+0x32>
 800080a:	2000      	movs	r0, #0
 800080c:	42ac      	cmp	r4, r5
 800080e:	d2f2      	bcs.n	80007f6 <__lesf2+0x5e>
 8000810:	2b00      	cmp	r3, #0
 8000812:	d00b      	beq.n	800082c <__lesf2+0x94>
 8000814:	0018      	movs	r0, r3
 8000816:	e7ee      	b.n	80007f6 <__lesf2+0x5e>
 8000818:	2c00      	cmp	r4, #0
 800081a:	d0ec      	beq.n	80007f6 <__lesf2+0x5e>
 800081c:	e7d5      	b.n	80007ca <__lesf2+0x32>
 800081e:	428b      	cmp	r3, r1
 8000820:	d1d3      	bne.n	80007ca <__lesf2+0x32>
 8000822:	e7f5      	b.n	8000810 <__lesf2+0x78>
 8000824:	2000      	movs	r0, #0
 8000826:	428b      	cmp	r3, r1
 8000828:	d0e5      	beq.n	80007f6 <__lesf2+0x5e>
 800082a:	e7ce      	b.n	80007ca <__lesf2+0x32>
 800082c:	2001      	movs	r0, #1
 800082e:	4240      	negs	r0, r0
 8000830:	e7e1      	b.n	80007f6 <__lesf2+0x5e>
 8000832:	46c0      	nop			@ (mov r8, r8)

08000834 <__aeabi_fmul>:
 8000834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000836:	464f      	mov	r7, r9
 8000838:	4646      	mov	r6, r8
 800083a:	46d6      	mov	lr, sl
 800083c:	0243      	lsls	r3, r0, #9
 800083e:	0a5b      	lsrs	r3, r3, #9
 8000840:	0045      	lsls	r5, r0, #1
 8000842:	b5c0      	push	{r6, r7, lr}
 8000844:	4699      	mov	r9, r3
 8000846:	1c0f      	adds	r7, r1, #0
 8000848:	0e2d      	lsrs	r5, r5, #24
 800084a:	0fc6      	lsrs	r6, r0, #31
 800084c:	2d00      	cmp	r5, #0
 800084e:	d100      	bne.n	8000852 <__aeabi_fmul+0x1e>
 8000850:	e088      	b.n	8000964 <__aeabi_fmul+0x130>
 8000852:	2dff      	cmp	r5, #255	@ 0xff
 8000854:	d100      	bne.n	8000858 <__aeabi_fmul+0x24>
 8000856:	e08d      	b.n	8000974 <__aeabi_fmul+0x140>
 8000858:	2280      	movs	r2, #128	@ 0x80
 800085a:	00db      	lsls	r3, r3, #3
 800085c:	04d2      	lsls	r2, r2, #19
 800085e:	431a      	orrs	r2, r3
 8000860:	2300      	movs	r3, #0
 8000862:	4691      	mov	r9, r2
 8000864:	4698      	mov	r8, r3
 8000866:	469a      	mov	sl, r3
 8000868:	3d7f      	subs	r5, #127	@ 0x7f
 800086a:	027c      	lsls	r4, r7, #9
 800086c:	007b      	lsls	r3, r7, #1
 800086e:	0a64      	lsrs	r4, r4, #9
 8000870:	0e1b      	lsrs	r3, r3, #24
 8000872:	0fff      	lsrs	r7, r7, #31
 8000874:	2b00      	cmp	r3, #0
 8000876:	d068      	beq.n	800094a <__aeabi_fmul+0x116>
 8000878:	2bff      	cmp	r3, #255	@ 0xff
 800087a:	d021      	beq.n	80008c0 <__aeabi_fmul+0x8c>
 800087c:	2280      	movs	r2, #128	@ 0x80
 800087e:	00e4      	lsls	r4, r4, #3
 8000880:	04d2      	lsls	r2, r2, #19
 8000882:	4314      	orrs	r4, r2
 8000884:	4642      	mov	r2, r8
 8000886:	3b7f      	subs	r3, #127	@ 0x7f
 8000888:	195b      	adds	r3, r3, r5
 800088a:	2100      	movs	r1, #0
 800088c:	1c5d      	adds	r5, r3, #1
 800088e:	2a0a      	cmp	r2, #10
 8000890:	dc2e      	bgt.n	80008f0 <__aeabi_fmul+0xbc>
 8000892:	407e      	eors	r6, r7
 8000894:	4642      	mov	r2, r8
 8000896:	2a02      	cmp	r2, #2
 8000898:	dc23      	bgt.n	80008e2 <__aeabi_fmul+0xae>
 800089a:	3a01      	subs	r2, #1
 800089c:	2a01      	cmp	r2, #1
 800089e:	d900      	bls.n	80008a2 <__aeabi_fmul+0x6e>
 80008a0:	e0bd      	b.n	8000a1e <__aeabi_fmul+0x1ea>
 80008a2:	2902      	cmp	r1, #2
 80008a4:	d06e      	beq.n	8000984 <__aeabi_fmul+0x150>
 80008a6:	2901      	cmp	r1, #1
 80008a8:	d12c      	bne.n	8000904 <__aeabi_fmul+0xd0>
 80008aa:	2000      	movs	r0, #0
 80008ac:	2200      	movs	r2, #0
 80008ae:	05c0      	lsls	r0, r0, #23
 80008b0:	07f6      	lsls	r6, r6, #31
 80008b2:	4310      	orrs	r0, r2
 80008b4:	4330      	orrs	r0, r6
 80008b6:	bce0      	pop	{r5, r6, r7}
 80008b8:	46ba      	mov	sl, r7
 80008ba:	46b1      	mov	r9, r6
 80008bc:	46a8      	mov	r8, r5
 80008be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008c0:	002b      	movs	r3, r5
 80008c2:	33ff      	adds	r3, #255	@ 0xff
 80008c4:	2c00      	cmp	r4, #0
 80008c6:	d065      	beq.n	8000994 <__aeabi_fmul+0x160>
 80008c8:	2203      	movs	r2, #3
 80008ca:	4641      	mov	r1, r8
 80008cc:	4311      	orrs	r1, r2
 80008ce:	0032      	movs	r2, r6
 80008d0:	3501      	adds	r5, #1
 80008d2:	4688      	mov	r8, r1
 80008d4:	407a      	eors	r2, r7
 80008d6:	35ff      	adds	r5, #255	@ 0xff
 80008d8:	290a      	cmp	r1, #10
 80008da:	dd00      	ble.n	80008de <__aeabi_fmul+0xaa>
 80008dc:	e0d8      	b.n	8000a90 <__aeabi_fmul+0x25c>
 80008de:	0016      	movs	r6, r2
 80008e0:	2103      	movs	r1, #3
 80008e2:	4640      	mov	r0, r8
 80008e4:	2201      	movs	r2, #1
 80008e6:	4082      	lsls	r2, r0
 80008e8:	20a6      	movs	r0, #166	@ 0xa6
 80008ea:	00c0      	lsls	r0, r0, #3
 80008ec:	4202      	tst	r2, r0
 80008ee:	d020      	beq.n	8000932 <__aeabi_fmul+0xfe>
 80008f0:	4653      	mov	r3, sl
 80008f2:	2b02      	cmp	r3, #2
 80008f4:	d046      	beq.n	8000984 <__aeabi_fmul+0x150>
 80008f6:	2b03      	cmp	r3, #3
 80008f8:	d100      	bne.n	80008fc <__aeabi_fmul+0xc8>
 80008fa:	e0bb      	b.n	8000a74 <__aeabi_fmul+0x240>
 80008fc:	4651      	mov	r1, sl
 80008fe:	464c      	mov	r4, r9
 8000900:	2901      	cmp	r1, #1
 8000902:	d0d2      	beq.n	80008aa <__aeabi_fmul+0x76>
 8000904:	002b      	movs	r3, r5
 8000906:	337f      	adds	r3, #127	@ 0x7f
 8000908:	2b00      	cmp	r3, #0
 800090a:	dd70      	ble.n	80009ee <__aeabi_fmul+0x1ba>
 800090c:	0762      	lsls	r2, r4, #29
 800090e:	d004      	beq.n	800091a <__aeabi_fmul+0xe6>
 8000910:	220f      	movs	r2, #15
 8000912:	4022      	ands	r2, r4
 8000914:	2a04      	cmp	r2, #4
 8000916:	d000      	beq.n	800091a <__aeabi_fmul+0xe6>
 8000918:	3404      	adds	r4, #4
 800091a:	0122      	lsls	r2, r4, #4
 800091c:	d503      	bpl.n	8000926 <__aeabi_fmul+0xf2>
 800091e:	4b63      	ldr	r3, [pc, #396]	@ (8000aac <__aeabi_fmul+0x278>)
 8000920:	401c      	ands	r4, r3
 8000922:	002b      	movs	r3, r5
 8000924:	3380      	adds	r3, #128	@ 0x80
 8000926:	2bfe      	cmp	r3, #254	@ 0xfe
 8000928:	dc2c      	bgt.n	8000984 <__aeabi_fmul+0x150>
 800092a:	01a2      	lsls	r2, r4, #6
 800092c:	0a52      	lsrs	r2, r2, #9
 800092e:	b2d8      	uxtb	r0, r3
 8000930:	e7bd      	b.n	80008ae <__aeabi_fmul+0x7a>
 8000932:	2090      	movs	r0, #144	@ 0x90
 8000934:	0080      	lsls	r0, r0, #2
 8000936:	4202      	tst	r2, r0
 8000938:	d127      	bne.n	800098a <__aeabi_fmul+0x156>
 800093a:	38b9      	subs	r0, #185	@ 0xb9
 800093c:	38ff      	subs	r0, #255	@ 0xff
 800093e:	4210      	tst	r0, r2
 8000940:	d06d      	beq.n	8000a1e <__aeabi_fmul+0x1ea>
 8000942:	003e      	movs	r6, r7
 8000944:	46a1      	mov	r9, r4
 8000946:	468a      	mov	sl, r1
 8000948:	e7d2      	b.n	80008f0 <__aeabi_fmul+0xbc>
 800094a:	2c00      	cmp	r4, #0
 800094c:	d141      	bne.n	80009d2 <__aeabi_fmul+0x19e>
 800094e:	2301      	movs	r3, #1
 8000950:	4642      	mov	r2, r8
 8000952:	431a      	orrs	r2, r3
 8000954:	4690      	mov	r8, r2
 8000956:	002b      	movs	r3, r5
 8000958:	4642      	mov	r2, r8
 800095a:	2101      	movs	r1, #1
 800095c:	1c5d      	adds	r5, r3, #1
 800095e:	2a0a      	cmp	r2, #10
 8000960:	dd97      	ble.n	8000892 <__aeabi_fmul+0x5e>
 8000962:	e7c5      	b.n	80008f0 <__aeabi_fmul+0xbc>
 8000964:	2b00      	cmp	r3, #0
 8000966:	d126      	bne.n	80009b6 <__aeabi_fmul+0x182>
 8000968:	2304      	movs	r3, #4
 800096a:	4698      	mov	r8, r3
 800096c:	3b03      	subs	r3, #3
 800096e:	2500      	movs	r5, #0
 8000970:	469a      	mov	sl, r3
 8000972:	e77a      	b.n	800086a <__aeabi_fmul+0x36>
 8000974:	2b00      	cmp	r3, #0
 8000976:	d118      	bne.n	80009aa <__aeabi_fmul+0x176>
 8000978:	2308      	movs	r3, #8
 800097a:	4698      	mov	r8, r3
 800097c:	3b06      	subs	r3, #6
 800097e:	25ff      	movs	r5, #255	@ 0xff
 8000980:	469a      	mov	sl, r3
 8000982:	e772      	b.n	800086a <__aeabi_fmul+0x36>
 8000984:	20ff      	movs	r0, #255	@ 0xff
 8000986:	2200      	movs	r2, #0
 8000988:	e791      	b.n	80008ae <__aeabi_fmul+0x7a>
 800098a:	2280      	movs	r2, #128	@ 0x80
 800098c:	2600      	movs	r6, #0
 800098e:	20ff      	movs	r0, #255	@ 0xff
 8000990:	03d2      	lsls	r2, r2, #15
 8000992:	e78c      	b.n	80008ae <__aeabi_fmul+0x7a>
 8000994:	4641      	mov	r1, r8
 8000996:	2202      	movs	r2, #2
 8000998:	3501      	adds	r5, #1
 800099a:	4311      	orrs	r1, r2
 800099c:	4688      	mov	r8, r1
 800099e:	35ff      	adds	r5, #255	@ 0xff
 80009a0:	290a      	cmp	r1, #10
 80009a2:	dca5      	bgt.n	80008f0 <__aeabi_fmul+0xbc>
 80009a4:	2102      	movs	r1, #2
 80009a6:	407e      	eors	r6, r7
 80009a8:	e774      	b.n	8000894 <__aeabi_fmul+0x60>
 80009aa:	230c      	movs	r3, #12
 80009ac:	4698      	mov	r8, r3
 80009ae:	3b09      	subs	r3, #9
 80009b0:	25ff      	movs	r5, #255	@ 0xff
 80009b2:	469a      	mov	sl, r3
 80009b4:	e759      	b.n	800086a <__aeabi_fmul+0x36>
 80009b6:	0018      	movs	r0, r3
 80009b8:	f000 fca2 	bl	8001300 <__clzsi2>
 80009bc:	464a      	mov	r2, r9
 80009be:	1f43      	subs	r3, r0, #5
 80009c0:	2576      	movs	r5, #118	@ 0x76
 80009c2:	409a      	lsls	r2, r3
 80009c4:	2300      	movs	r3, #0
 80009c6:	426d      	negs	r5, r5
 80009c8:	4691      	mov	r9, r2
 80009ca:	4698      	mov	r8, r3
 80009cc:	469a      	mov	sl, r3
 80009ce:	1a2d      	subs	r5, r5, r0
 80009d0:	e74b      	b.n	800086a <__aeabi_fmul+0x36>
 80009d2:	0020      	movs	r0, r4
 80009d4:	f000 fc94 	bl	8001300 <__clzsi2>
 80009d8:	4642      	mov	r2, r8
 80009da:	1f43      	subs	r3, r0, #5
 80009dc:	409c      	lsls	r4, r3
 80009de:	1a2b      	subs	r3, r5, r0
 80009e0:	3b76      	subs	r3, #118	@ 0x76
 80009e2:	2100      	movs	r1, #0
 80009e4:	1c5d      	adds	r5, r3, #1
 80009e6:	2a0a      	cmp	r2, #10
 80009e8:	dc00      	bgt.n	80009ec <__aeabi_fmul+0x1b8>
 80009ea:	e752      	b.n	8000892 <__aeabi_fmul+0x5e>
 80009ec:	e780      	b.n	80008f0 <__aeabi_fmul+0xbc>
 80009ee:	2201      	movs	r2, #1
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	2b1b      	cmp	r3, #27
 80009f4:	dd00      	ble.n	80009f8 <__aeabi_fmul+0x1c4>
 80009f6:	e758      	b.n	80008aa <__aeabi_fmul+0x76>
 80009f8:	359e      	adds	r5, #158	@ 0x9e
 80009fa:	0022      	movs	r2, r4
 80009fc:	40ac      	lsls	r4, r5
 80009fe:	40da      	lsrs	r2, r3
 8000a00:	1e63      	subs	r3, r4, #1
 8000a02:	419c      	sbcs	r4, r3
 8000a04:	4322      	orrs	r2, r4
 8000a06:	0753      	lsls	r3, r2, #29
 8000a08:	d004      	beq.n	8000a14 <__aeabi_fmul+0x1e0>
 8000a0a:	230f      	movs	r3, #15
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	2b04      	cmp	r3, #4
 8000a10:	d000      	beq.n	8000a14 <__aeabi_fmul+0x1e0>
 8000a12:	3204      	adds	r2, #4
 8000a14:	0153      	lsls	r3, r2, #5
 8000a16:	d537      	bpl.n	8000a88 <__aeabi_fmul+0x254>
 8000a18:	2001      	movs	r0, #1
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	e747      	b.n	80008ae <__aeabi_fmul+0x7a>
 8000a1e:	0c21      	lsrs	r1, r4, #16
 8000a20:	464a      	mov	r2, r9
 8000a22:	0424      	lsls	r4, r4, #16
 8000a24:	0c24      	lsrs	r4, r4, #16
 8000a26:	0027      	movs	r7, r4
 8000a28:	0c10      	lsrs	r0, r2, #16
 8000a2a:	0412      	lsls	r2, r2, #16
 8000a2c:	0c12      	lsrs	r2, r2, #16
 8000a2e:	4344      	muls	r4, r0
 8000a30:	4357      	muls	r7, r2
 8000a32:	4348      	muls	r0, r1
 8000a34:	4351      	muls	r1, r2
 8000a36:	0c3a      	lsrs	r2, r7, #16
 8000a38:	1909      	adds	r1, r1, r4
 8000a3a:	1852      	adds	r2, r2, r1
 8000a3c:	4294      	cmp	r4, r2
 8000a3e:	d903      	bls.n	8000a48 <__aeabi_fmul+0x214>
 8000a40:	2180      	movs	r1, #128	@ 0x80
 8000a42:	0249      	lsls	r1, r1, #9
 8000a44:	468c      	mov	ip, r1
 8000a46:	4460      	add	r0, ip
 8000a48:	043f      	lsls	r7, r7, #16
 8000a4a:	0411      	lsls	r1, r2, #16
 8000a4c:	0c3f      	lsrs	r7, r7, #16
 8000a4e:	19c9      	adds	r1, r1, r7
 8000a50:	018c      	lsls	r4, r1, #6
 8000a52:	1e67      	subs	r7, r4, #1
 8000a54:	41bc      	sbcs	r4, r7
 8000a56:	0c12      	lsrs	r2, r2, #16
 8000a58:	0e89      	lsrs	r1, r1, #26
 8000a5a:	1812      	adds	r2, r2, r0
 8000a5c:	430c      	orrs	r4, r1
 8000a5e:	0192      	lsls	r2, r2, #6
 8000a60:	4314      	orrs	r4, r2
 8000a62:	0112      	lsls	r2, r2, #4
 8000a64:	d50e      	bpl.n	8000a84 <__aeabi_fmul+0x250>
 8000a66:	2301      	movs	r3, #1
 8000a68:	0862      	lsrs	r2, r4, #1
 8000a6a:	401c      	ands	r4, r3
 8000a6c:	4314      	orrs	r4, r2
 8000a6e:	e749      	b.n	8000904 <__aeabi_fmul+0xd0>
 8000a70:	003e      	movs	r6, r7
 8000a72:	46a1      	mov	r9, r4
 8000a74:	2280      	movs	r2, #128	@ 0x80
 8000a76:	464b      	mov	r3, r9
 8000a78:	03d2      	lsls	r2, r2, #15
 8000a7a:	431a      	orrs	r2, r3
 8000a7c:	0252      	lsls	r2, r2, #9
 8000a7e:	20ff      	movs	r0, #255	@ 0xff
 8000a80:	0a52      	lsrs	r2, r2, #9
 8000a82:	e714      	b.n	80008ae <__aeabi_fmul+0x7a>
 8000a84:	001d      	movs	r5, r3
 8000a86:	e73d      	b.n	8000904 <__aeabi_fmul+0xd0>
 8000a88:	0192      	lsls	r2, r2, #6
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	0a52      	lsrs	r2, r2, #9
 8000a8e:	e70e      	b.n	80008ae <__aeabi_fmul+0x7a>
 8000a90:	290f      	cmp	r1, #15
 8000a92:	d1ed      	bne.n	8000a70 <__aeabi_fmul+0x23c>
 8000a94:	2280      	movs	r2, #128	@ 0x80
 8000a96:	464b      	mov	r3, r9
 8000a98:	03d2      	lsls	r2, r2, #15
 8000a9a:	4213      	tst	r3, r2
 8000a9c:	d0ea      	beq.n	8000a74 <__aeabi_fmul+0x240>
 8000a9e:	4214      	tst	r4, r2
 8000aa0:	d1e8      	bne.n	8000a74 <__aeabi_fmul+0x240>
 8000aa2:	003e      	movs	r6, r7
 8000aa4:	20ff      	movs	r0, #255	@ 0xff
 8000aa6:	4322      	orrs	r2, r4
 8000aa8:	e701      	b.n	80008ae <__aeabi_fmul+0x7a>
 8000aaa:	46c0      	nop			@ (mov r8, r8)
 8000aac:	f7ffffff 	.word	0xf7ffffff

08000ab0 <__aeabi_ui2f>:
 8000ab0:	b570      	push	{r4, r5, r6, lr}
 8000ab2:	1e04      	subs	r4, r0, #0
 8000ab4:	d00e      	beq.n	8000ad4 <__aeabi_ui2f+0x24>
 8000ab6:	f000 fc23 	bl	8001300 <__clzsi2>
 8000aba:	239e      	movs	r3, #158	@ 0x9e
 8000abc:	0001      	movs	r1, r0
 8000abe:	1a1b      	subs	r3, r3, r0
 8000ac0:	2b96      	cmp	r3, #150	@ 0x96
 8000ac2:	dc0c      	bgt.n	8000ade <__aeabi_ui2f+0x2e>
 8000ac4:	2808      	cmp	r0, #8
 8000ac6:	d02f      	beq.n	8000b28 <__aeabi_ui2f+0x78>
 8000ac8:	3908      	subs	r1, #8
 8000aca:	408c      	lsls	r4, r1
 8000acc:	0264      	lsls	r4, r4, #9
 8000ace:	0a64      	lsrs	r4, r4, #9
 8000ad0:	b2d8      	uxtb	r0, r3
 8000ad2:	e001      	b.n	8000ad8 <__aeabi_ui2f+0x28>
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	2400      	movs	r4, #0
 8000ad8:	05c0      	lsls	r0, r0, #23
 8000ada:	4320      	orrs	r0, r4
 8000adc:	bd70      	pop	{r4, r5, r6, pc}
 8000ade:	2b99      	cmp	r3, #153	@ 0x99
 8000ae0:	dc16      	bgt.n	8000b10 <__aeabi_ui2f+0x60>
 8000ae2:	1f42      	subs	r2, r0, #5
 8000ae4:	2805      	cmp	r0, #5
 8000ae6:	d000      	beq.n	8000aea <__aeabi_ui2f+0x3a>
 8000ae8:	4094      	lsls	r4, r2
 8000aea:	0022      	movs	r2, r4
 8000aec:	4810      	ldr	r0, [pc, #64]	@ (8000b30 <__aeabi_ui2f+0x80>)
 8000aee:	4002      	ands	r2, r0
 8000af0:	0765      	lsls	r5, r4, #29
 8000af2:	d009      	beq.n	8000b08 <__aeabi_ui2f+0x58>
 8000af4:	250f      	movs	r5, #15
 8000af6:	402c      	ands	r4, r5
 8000af8:	2c04      	cmp	r4, #4
 8000afa:	d005      	beq.n	8000b08 <__aeabi_ui2f+0x58>
 8000afc:	3204      	adds	r2, #4
 8000afe:	0154      	lsls	r4, r2, #5
 8000b00:	d502      	bpl.n	8000b08 <__aeabi_ui2f+0x58>
 8000b02:	239f      	movs	r3, #159	@ 0x9f
 8000b04:	4002      	ands	r2, r0
 8000b06:	1a5b      	subs	r3, r3, r1
 8000b08:	0192      	lsls	r2, r2, #6
 8000b0a:	0a54      	lsrs	r4, r2, #9
 8000b0c:	b2d8      	uxtb	r0, r3
 8000b0e:	e7e3      	b.n	8000ad8 <__aeabi_ui2f+0x28>
 8000b10:	0002      	movs	r2, r0
 8000b12:	0020      	movs	r0, r4
 8000b14:	321b      	adds	r2, #27
 8000b16:	4090      	lsls	r0, r2
 8000b18:	0002      	movs	r2, r0
 8000b1a:	1e50      	subs	r0, r2, #1
 8000b1c:	4182      	sbcs	r2, r0
 8000b1e:	2005      	movs	r0, #5
 8000b20:	1a40      	subs	r0, r0, r1
 8000b22:	40c4      	lsrs	r4, r0
 8000b24:	4314      	orrs	r4, r2
 8000b26:	e7e0      	b.n	8000aea <__aeabi_ui2f+0x3a>
 8000b28:	0264      	lsls	r4, r4, #9
 8000b2a:	2096      	movs	r0, #150	@ 0x96
 8000b2c:	0a64      	lsrs	r4, r4, #9
 8000b2e:	e7d3      	b.n	8000ad8 <__aeabi_ui2f+0x28>
 8000b30:	fbffffff 	.word	0xfbffffff

08000b34 <__aeabi_ddiv>:
 8000b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b36:	46de      	mov	lr, fp
 8000b38:	4645      	mov	r5, r8
 8000b3a:	4657      	mov	r7, sl
 8000b3c:	464e      	mov	r6, r9
 8000b3e:	b5e0      	push	{r5, r6, r7, lr}
 8000b40:	b087      	sub	sp, #28
 8000b42:	9200      	str	r2, [sp, #0]
 8000b44:	9301      	str	r3, [sp, #4]
 8000b46:	030b      	lsls	r3, r1, #12
 8000b48:	0b1b      	lsrs	r3, r3, #12
 8000b4a:	469b      	mov	fp, r3
 8000b4c:	0fca      	lsrs	r2, r1, #31
 8000b4e:	004b      	lsls	r3, r1, #1
 8000b50:	0004      	movs	r4, r0
 8000b52:	4680      	mov	r8, r0
 8000b54:	0d5b      	lsrs	r3, r3, #21
 8000b56:	9202      	str	r2, [sp, #8]
 8000b58:	d100      	bne.n	8000b5c <__aeabi_ddiv+0x28>
 8000b5a:	e16a      	b.n	8000e32 <__aeabi_ddiv+0x2fe>
 8000b5c:	4ad4      	ldr	r2, [pc, #848]	@ (8000eb0 <__aeabi_ddiv+0x37c>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d100      	bne.n	8000b64 <__aeabi_ddiv+0x30>
 8000b62:	e18c      	b.n	8000e7e <__aeabi_ddiv+0x34a>
 8000b64:	4659      	mov	r1, fp
 8000b66:	0f42      	lsrs	r2, r0, #29
 8000b68:	00c9      	lsls	r1, r1, #3
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	2180      	movs	r1, #128	@ 0x80
 8000b6e:	0409      	lsls	r1, r1, #16
 8000b70:	4311      	orrs	r1, r2
 8000b72:	00c2      	lsls	r2, r0, #3
 8000b74:	4690      	mov	r8, r2
 8000b76:	4acf      	ldr	r2, [pc, #828]	@ (8000eb4 <__aeabi_ddiv+0x380>)
 8000b78:	4689      	mov	r9, r1
 8000b7a:	4692      	mov	sl, r2
 8000b7c:	449a      	add	sl, r3
 8000b7e:	2300      	movs	r3, #0
 8000b80:	2400      	movs	r4, #0
 8000b82:	9303      	str	r3, [sp, #12]
 8000b84:	9e00      	ldr	r6, [sp, #0]
 8000b86:	9f01      	ldr	r7, [sp, #4]
 8000b88:	033b      	lsls	r3, r7, #12
 8000b8a:	0b1b      	lsrs	r3, r3, #12
 8000b8c:	469b      	mov	fp, r3
 8000b8e:	007b      	lsls	r3, r7, #1
 8000b90:	0030      	movs	r0, r6
 8000b92:	0d5b      	lsrs	r3, r3, #21
 8000b94:	0ffd      	lsrs	r5, r7, #31
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d100      	bne.n	8000b9c <__aeabi_ddiv+0x68>
 8000b9a:	e128      	b.n	8000dee <__aeabi_ddiv+0x2ba>
 8000b9c:	4ac4      	ldr	r2, [pc, #784]	@ (8000eb0 <__aeabi_ddiv+0x37c>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d100      	bne.n	8000ba4 <__aeabi_ddiv+0x70>
 8000ba2:	e177      	b.n	8000e94 <__aeabi_ddiv+0x360>
 8000ba4:	4659      	mov	r1, fp
 8000ba6:	0f72      	lsrs	r2, r6, #29
 8000ba8:	00c9      	lsls	r1, r1, #3
 8000baa:	430a      	orrs	r2, r1
 8000bac:	2180      	movs	r1, #128	@ 0x80
 8000bae:	0409      	lsls	r1, r1, #16
 8000bb0:	4311      	orrs	r1, r2
 8000bb2:	468b      	mov	fp, r1
 8000bb4:	49bf      	ldr	r1, [pc, #764]	@ (8000eb4 <__aeabi_ddiv+0x380>)
 8000bb6:	00f2      	lsls	r2, r6, #3
 8000bb8:	468c      	mov	ip, r1
 8000bba:	4651      	mov	r1, sl
 8000bbc:	4463      	add	r3, ip
 8000bbe:	1acb      	subs	r3, r1, r3
 8000bc0:	469a      	mov	sl, r3
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	9e02      	ldr	r6, [sp, #8]
 8000bc6:	406e      	eors	r6, r5
 8000bc8:	2c0f      	cmp	r4, #15
 8000bca:	d827      	bhi.n	8000c1c <__aeabi_ddiv+0xe8>
 8000bcc:	49ba      	ldr	r1, [pc, #744]	@ (8000eb8 <__aeabi_ddiv+0x384>)
 8000bce:	00a4      	lsls	r4, r4, #2
 8000bd0:	5909      	ldr	r1, [r1, r4]
 8000bd2:	468f      	mov	pc, r1
 8000bd4:	46cb      	mov	fp, r9
 8000bd6:	4642      	mov	r2, r8
 8000bd8:	9e02      	ldr	r6, [sp, #8]
 8000bda:	9b03      	ldr	r3, [sp, #12]
 8000bdc:	2b02      	cmp	r3, #2
 8000bde:	d016      	beq.n	8000c0e <__aeabi_ddiv+0xda>
 8000be0:	2b03      	cmp	r3, #3
 8000be2:	d100      	bne.n	8000be6 <__aeabi_ddiv+0xb2>
 8000be4:	e2a6      	b.n	8001134 <__aeabi_ddiv+0x600>
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d000      	beq.n	8000bec <__aeabi_ddiv+0xb8>
 8000bea:	e0df      	b.n	8000dac <__aeabi_ddiv+0x278>
 8000bec:	2200      	movs	r2, #0
 8000bee:	2300      	movs	r3, #0
 8000bf0:	2400      	movs	r4, #0
 8000bf2:	4690      	mov	r8, r2
 8000bf4:	051b      	lsls	r3, r3, #20
 8000bf6:	4323      	orrs	r3, r4
 8000bf8:	07f6      	lsls	r6, r6, #31
 8000bfa:	4333      	orrs	r3, r6
 8000bfc:	4640      	mov	r0, r8
 8000bfe:	0019      	movs	r1, r3
 8000c00:	b007      	add	sp, #28
 8000c02:	bcf0      	pop	{r4, r5, r6, r7}
 8000c04:	46bb      	mov	fp, r7
 8000c06:	46b2      	mov	sl, r6
 8000c08:	46a9      	mov	r9, r5
 8000c0a:	46a0      	mov	r8, r4
 8000c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2400      	movs	r4, #0
 8000c12:	4690      	mov	r8, r2
 8000c14:	4ba6      	ldr	r3, [pc, #664]	@ (8000eb0 <__aeabi_ddiv+0x37c>)
 8000c16:	e7ed      	b.n	8000bf4 <__aeabi_ddiv+0xc0>
 8000c18:	002e      	movs	r6, r5
 8000c1a:	e7df      	b.n	8000bdc <__aeabi_ddiv+0xa8>
 8000c1c:	45cb      	cmp	fp, r9
 8000c1e:	d200      	bcs.n	8000c22 <__aeabi_ddiv+0xee>
 8000c20:	e1d4      	b.n	8000fcc <__aeabi_ddiv+0x498>
 8000c22:	d100      	bne.n	8000c26 <__aeabi_ddiv+0xf2>
 8000c24:	e1cf      	b.n	8000fc6 <__aeabi_ddiv+0x492>
 8000c26:	2301      	movs	r3, #1
 8000c28:	425b      	negs	r3, r3
 8000c2a:	469c      	mov	ip, r3
 8000c2c:	4644      	mov	r4, r8
 8000c2e:	4648      	mov	r0, r9
 8000c30:	2700      	movs	r7, #0
 8000c32:	44e2      	add	sl, ip
 8000c34:	465b      	mov	r3, fp
 8000c36:	0e15      	lsrs	r5, r2, #24
 8000c38:	021b      	lsls	r3, r3, #8
 8000c3a:	431d      	orrs	r5, r3
 8000c3c:	0c19      	lsrs	r1, r3, #16
 8000c3e:	042b      	lsls	r3, r5, #16
 8000c40:	0212      	lsls	r2, r2, #8
 8000c42:	9500      	str	r5, [sp, #0]
 8000c44:	0c1d      	lsrs	r5, r3, #16
 8000c46:	4691      	mov	r9, r2
 8000c48:	9102      	str	r1, [sp, #8]
 8000c4a:	9503      	str	r5, [sp, #12]
 8000c4c:	f7ff fae2 	bl	8000214 <__aeabi_uidivmod>
 8000c50:	0002      	movs	r2, r0
 8000c52:	436a      	muls	r2, r5
 8000c54:	040b      	lsls	r3, r1, #16
 8000c56:	0c21      	lsrs	r1, r4, #16
 8000c58:	4680      	mov	r8, r0
 8000c5a:	4319      	orrs	r1, r3
 8000c5c:	428a      	cmp	r2, r1
 8000c5e:	d909      	bls.n	8000c74 <__aeabi_ddiv+0x140>
 8000c60:	9d00      	ldr	r5, [sp, #0]
 8000c62:	2301      	movs	r3, #1
 8000c64:	46ac      	mov	ip, r5
 8000c66:	425b      	negs	r3, r3
 8000c68:	4461      	add	r1, ip
 8000c6a:	469c      	mov	ip, r3
 8000c6c:	44e0      	add	r8, ip
 8000c6e:	428d      	cmp	r5, r1
 8000c70:	d800      	bhi.n	8000c74 <__aeabi_ddiv+0x140>
 8000c72:	e1fb      	b.n	800106c <__aeabi_ddiv+0x538>
 8000c74:	1a88      	subs	r0, r1, r2
 8000c76:	9902      	ldr	r1, [sp, #8]
 8000c78:	f7ff facc 	bl	8000214 <__aeabi_uidivmod>
 8000c7c:	9a03      	ldr	r2, [sp, #12]
 8000c7e:	0424      	lsls	r4, r4, #16
 8000c80:	4342      	muls	r2, r0
 8000c82:	0409      	lsls	r1, r1, #16
 8000c84:	0c24      	lsrs	r4, r4, #16
 8000c86:	0003      	movs	r3, r0
 8000c88:	430c      	orrs	r4, r1
 8000c8a:	42a2      	cmp	r2, r4
 8000c8c:	d906      	bls.n	8000c9c <__aeabi_ddiv+0x168>
 8000c8e:	9900      	ldr	r1, [sp, #0]
 8000c90:	3b01      	subs	r3, #1
 8000c92:	468c      	mov	ip, r1
 8000c94:	4464      	add	r4, ip
 8000c96:	42a1      	cmp	r1, r4
 8000c98:	d800      	bhi.n	8000c9c <__aeabi_ddiv+0x168>
 8000c9a:	e1e1      	b.n	8001060 <__aeabi_ddiv+0x52c>
 8000c9c:	1aa0      	subs	r0, r4, r2
 8000c9e:	4642      	mov	r2, r8
 8000ca0:	0412      	lsls	r2, r2, #16
 8000ca2:	431a      	orrs	r2, r3
 8000ca4:	4693      	mov	fp, r2
 8000ca6:	464b      	mov	r3, r9
 8000ca8:	4659      	mov	r1, fp
 8000caa:	0c1b      	lsrs	r3, r3, #16
 8000cac:	001d      	movs	r5, r3
 8000cae:	9304      	str	r3, [sp, #16]
 8000cb0:	040b      	lsls	r3, r1, #16
 8000cb2:	4649      	mov	r1, r9
 8000cb4:	0409      	lsls	r1, r1, #16
 8000cb6:	0c09      	lsrs	r1, r1, #16
 8000cb8:	000c      	movs	r4, r1
 8000cba:	0c1b      	lsrs	r3, r3, #16
 8000cbc:	435c      	muls	r4, r3
 8000cbe:	0c12      	lsrs	r2, r2, #16
 8000cc0:	436b      	muls	r3, r5
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	4351      	muls	r1, r2
 8000cc6:	436a      	muls	r2, r5
 8000cc8:	0c25      	lsrs	r5, r4, #16
 8000cca:	46ac      	mov	ip, r5
 8000ccc:	185b      	adds	r3, r3, r1
 8000cce:	4463      	add	r3, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d903      	bls.n	8000cdc <__aeabi_ddiv+0x1a8>
 8000cd4:	2180      	movs	r1, #128	@ 0x80
 8000cd6:	0249      	lsls	r1, r1, #9
 8000cd8:	468c      	mov	ip, r1
 8000cda:	4462      	add	r2, ip
 8000cdc:	0c19      	lsrs	r1, r3, #16
 8000cde:	0424      	lsls	r4, r4, #16
 8000ce0:	041b      	lsls	r3, r3, #16
 8000ce2:	0c24      	lsrs	r4, r4, #16
 8000ce4:	188a      	adds	r2, r1, r2
 8000ce6:	191c      	adds	r4, r3, r4
 8000ce8:	4290      	cmp	r0, r2
 8000cea:	d302      	bcc.n	8000cf2 <__aeabi_ddiv+0x1be>
 8000cec:	d116      	bne.n	8000d1c <__aeabi_ddiv+0x1e8>
 8000cee:	42a7      	cmp	r7, r4
 8000cf0:	d214      	bcs.n	8000d1c <__aeabi_ddiv+0x1e8>
 8000cf2:	465b      	mov	r3, fp
 8000cf4:	9d00      	ldr	r5, [sp, #0]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	444f      	add	r7, r9
 8000cfa:	9305      	str	r3, [sp, #20]
 8000cfc:	454f      	cmp	r7, r9
 8000cfe:	419b      	sbcs	r3, r3
 8000d00:	46ac      	mov	ip, r5
 8000d02:	425b      	negs	r3, r3
 8000d04:	4463      	add	r3, ip
 8000d06:	18c0      	adds	r0, r0, r3
 8000d08:	4285      	cmp	r5, r0
 8000d0a:	d300      	bcc.n	8000d0e <__aeabi_ddiv+0x1da>
 8000d0c:	e1a1      	b.n	8001052 <__aeabi_ddiv+0x51e>
 8000d0e:	4282      	cmp	r2, r0
 8000d10:	d900      	bls.n	8000d14 <__aeabi_ddiv+0x1e0>
 8000d12:	e1f6      	b.n	8001102 <__aeabi_ddiv+0x5ce>
 8000d14:	d100      	bne.n	8000d18 <__aeabi_ddiv+0x1e4>
 8000d16:	e1f1      	b.n	80010fc <__aeabi_ddiv+0x5c8>
 8000d18:	9b05      	ldr	r3, [sp, #20]
 8000d1a:	469b      	mov	fp, r3
 8000d1c:	1b3c      	subs	r4, r7, r4
 8000d1e:	42a7      	cmp	r7, r4
 8000d20:	41bf      	sbcs	r7, r7
 8000d22:	9d00      	ldr	r5, [sp, #0]
 8000d24:	1a80      	subs	r0, r0, r2
 8000d26:	427f      	negs	r7, r7
 8000d28:	1bc0      	subs	r0, r0, r7
 8000d2a:	4285      	cmp	r5, r0
 8000d2c:	d100      	bne.n	8000d30 <__aeabi_ddiv+0x1fc>
 8000d2e:	e1d0      	b.n	80010d2 <__aeabi_ddiv+0x59e>
 8000d30:	9902      	ldr	r1, [sp, #8]
 8000d32:	f7ff fa6f 	bl	8000214 <__aeabi_uidivmod>
 8000d36:	9a03      	ldr	r2, [sp, #12]
 8000d38:	040b      	lsls	r3, r1, #16
 8000d3a:	4342      	muls	r2, r0
 8000d3c:	0c21      	lsrs	r1, r4, #16
 8000d3e:	0007      	movs	r7, r0
 8000d40:	4319      	orrs	r1, r3
 8000d42:	428a      	cmp	r2, r1
 8000d44:	d900      	bls.n	8000d48 <__aeabi_ddiv+0x214>
 8000d46:	e178      	b.n	800103a <__aeabi_ddiv+0x506>
 8000d48:	1a88      	subs	r0, r1, r2
 8000d4a:	9902      	ldr	r1, [sp, #8]
 8000d4c:	f7ff fa62 	bl	8000214 <__aeabi_uidivmod>
 8000d50:	9a03      	ldr	r2, [sp, #12]
 8000d52:	0424      	lsls	r4, r4, #16
 8000d54:	4342      	muls	r2, r0
 8000d56:	0409      	lsls	r1, r1, #16
 8000d58:	0c24      	lsrs	r4, r4, #16
 8000d5a:	0003      	movs	r3, r0
 8000d5c:	430c      	orrs	r4, r1
 8000d5e:	42a2      	cmp	r2, r4
 8000d60:	d900      	bls.n	8000d64 <__aeabi_ddiv+0x230>
 8000d62:	e15d      	b.n	8001020 <__aeabi_ddiv+0x4ec>
 8000d64:	4641      	mov	r1, r8
 8000d66:	1aa4      	subs	r4, r4, r2
 8000d68:	043a      	lsls	r2, r7, #16
 8000d6a:	431a      	orrs	r2, r3
 8000d6c:	9d04      	ldr	r5, [sp, #16]
 8000d6e:	0413      	lsls	r3, r2, #16
 8000d70:	0c1b      	lsrs	r3, r3, #16
 8000d72:	4359      	muls	r1, r3
 8000d74:	4647      	mov	r7, r8
 8000d76:	436b      	muls	r3, r5
 8000d78:	469c      	mov	ip, r3
 8000d7a:	0c10      	lsrs	r0, r2, #16
 8000d7c:	4347      	muls	r7, r0
 8000d7e:	0c0b      	lsrs	r3, r1, #16
 8000d80:	44bc      	add	ip, r7
 8000d82:	4463      	add	r3, ip
 8000d84:	4368      	muls	r0, r5
 8000d86:	429f      	cmp	r7, r3
 8000d88:	d903      	bls.n	8000d92 <__aeabi_ddiv+0x25e>
 8000d8a:	2580      	movs	r5, #128	@ 0x80
 8000d8c:	026d      	lsls	r5, r5, #9
 8000d8e:	46ac      	mov	ip, r5
 8000d90:	4460      	add	r0, ip
 8000d92:	0c1f      	lsrs	r7, r3, #16
 8000d94:	0409      	lsls	r1, r1, #16
 8000d96:	041b      	lsls	r3, r3, #16
 8000d98:	0c09      	lsrs	r1, r1, #16
 8000d9a:	183f      	adds	r7, r7, r0
 8000d9c:	185b      	adds	r3, r3, r1
 8000d9e:	42bc      	cmp	r4, r7
 8000da0:	d200      	bcs.n	8000da4 <__aeabi_ddiv+0x270>
 8000da2:	e102      	b.n	8000faa <__aeabi_ddiv+0x476>
 8000da4:	d100      	bne.n	8000da8 <__aeabi_ddiv+0x274>
 8000da6:	e0fd      	b.n	8000fa4 <__aeabi_ddiv+0x470>
 8000da8:	2301      	movs	r3, #1
 8000daa:	431a      	orrs	r2, r3
 8000dac:	4b43      	ldr	r3, [pc, #268]	@ (8000ebc <__aeabi_ddiv+0x388>)
 8000dae:	4453      	add	r3, sl
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	dc00      	bgt.n	8000db6 <__aeabi_ddiv+0x282>
 8000db4:	e0ae      	b.n	8000f14 <__aeabi_ddiv+0x3e0>
 8000db6:	0751      	lsls	r1, r2, #29
 8000db8:	d000      	beq.n	8000dbc <__aeabi_ddiv+0x288>
 8000dba:	e198      	b.n	80010ee <__aeabi_ddiv+0x5ba>
 8000dbc:	4659      	mov	r1, fp
 8000dbe:	01c9      	lsls	r1, r1, #7
 8000dc0:	d506      	bpl.n	8000dd0 <__aeabi_ddiv+0x29c>
 8000dc2:	4659      	mov	r1, fp
 8000dc4:	4b3e      	ldr	r3, [pc, #248]	@ (8000ec0 <__aeabi_ddiv+0x38c>)
 8000dc6:	4019      	ands	r1, r3
 8000dc8:	2380      	movs	r3, #128	@ 0x80
 8000dca:	468b      	mov	fp, r1
 8000dcc:	00db      	lsls	r3, r3, #3
 8000dce:	4453      	add	r3, sl
 8000dd0:	493c      	ldr	r1, [pc, #240]	@ (8000ec4 <__aeabi_ddiv+0x390>)
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	dd00      	ble.n	8000dd8 <__aeabi_ddiv+0x2a4>
 8000dd6:	e71a      	b.n	8000c0e <__aeabi_ddiv+0xda>
 8000dd8:	4659      	mov	r1, fp
 8000dda:	08d2      	lsrs	r2, r2, #3
 8000ddc:	0749      	lsls	r1, r1, #29
 8000dde:	4311      	orrs	r1, r2
 8000de0:	465a      	mov	r2, fp
 8000de2:	055b      	lsls	r3, r3, #21
 8000de4:	0254      	lsls	r4, r2, #9
 8000de6:	4688      	mov	r8, r1
 8000de8:	0b24      	lsrs	r4, r4, #12
 8000dea:	0d5b      	lsrs	r3, r3, #21
 8000dec:	e702      	b.n	8000bf4 <__aeabi_ddiv+0xc0>
 8000dee:	465a      	mov	r2, fp
 8000df0:	9b00      	ldr	r3, [sp, #0]
 8000df2:	431a      	orrs	r2, r3
 8000df4:	d100      	bne.n	8000df8 <__aeabi_ddiv+0x2c4>
 8000df6:	e07e      	b.n	8000ef6 <__aeabi_ddiv+0x3c2>
 8000df8:	465b      	mov	r3, fp
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d100      	bne.n	8000e00 <__aeabi_ddiv+0x2cc>
 8000dfe:	e100      	b.n	8001002 <__aeabi_ddiv+0x4ce>
 8000e00:	4658      	mov	r0, fp
 8000e02:	f000 fa7d 	bl	8001300 <__clzsi2>
 8000e06:	0002      	movs	r2, r0
 8000e08:	0003      	movs	r3, r0
 8000e0a:	3a0b      	subs	r2, #11
 8000e0c:	271d      	movs	r7, #29
 8000e0e:	9e00      	ldr	r6, [sp, #0]
 8000e10:	1aba      	subs	r2, r7, r2
 8000e12:	0019      	movs	r1, r3
 8000e14:	4658      	mov	r0, fp
 8000e16:	40d6      	lsrs	r6, r2
 8000e18:	3908      	subs	r1, #8
 8000e1a:	4088      	lsls	r0, r1
 8000e1c:	0032      	movs	r2, r6
 8000e1e:	4302      	orrs	r2, r0
 8000e20:	4693      	mov	fp, r2
 8000e22:	9a00      	ldr	r2, [sp, #0]
 8000e24:	408a      	lsls	r2, r1
 8000e26:	4928      	ldr	r1, [pc, #160]	@ (8000ec8 <__aeabi_ddiv+0x394>)
 8000e28:	4453      	add	r3, sl
 8000e2a:	468a      	mov	sl, r1
 8000e2c:	449a      	add	sl, r3
 8000e2e:	2300      	movs	r3, #0
 8000e30:	e6c8      	b.n	8000bc4 <__aeabi_ddiv+0x90>
 8000e32:	465b      	mov	r3, fp
 8000e34:	4303      	orrs	r3, r0
 8000e36:	4699      	mov	r9, r3
 8000e38:	d056      	beq.n	8000ee8 <__aeabi_ddiv+0x3b4>
 8000e3a:	465b      	mov	r3, fp
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d100      	bne.n	8000e42 <__aeabi_ddiv+0x30e>
 8000e40:	e0cd      	b.n	8000fde <__aeabi_ddiv+0x4aa>
 8000e42:	4658      	mov	r0, fp
 8000e44:	f000 fa5c 	bl	8001300 <__clzsi2>
 8000e48:	230b      	movs	r3, #11
 8000e4a:	425b      	negs	r3, r3
 8000e4c:	469c      	mov	ip, r3
 8000e4e:	0002      	movs	r2, r0
 8000e50:	4484      	add	ip, r0
 8000e52:	4666      	mov	r6, ip
 8000e54:	231d      	movs	r3, #29
 8000e56:	1b9b      	subs	r3, r3, r6
 8000e58:	0026      	movs	r6, r4
 8000e5a:	0011      	movs	r1, r2
 8000e5c:	4658      	mov	r0, fp
 8000e5e:	40de      	lsrs	r6, r3
 8000e60:	3908      	subs	r1, #8
 8000e62:	4088      	lsls	r0, r1
 8000e64:	0033      	movs	r3, r6
 8000e66:	4303      	orrs	r3, r0
 8000e68:	4699      	mov	r9, r3
 8000e6a:	0023      	movs	r3, r4
 8000e6c:	408b      	lsls	r3, r1
 8000e6e:	4698      	mov	r8, r3
 8000e70:	4b16      	ldr	r3, [pc, #88]	@ (8000ecc <__aeabi_ddiv+0x398>)
 8000e72:	2400      	movs	r4, #0
 8000e74:	1a9b      	subs	r3, r3, r2
 8000e76:	469a      	mov	sl, r3
 8000e78:	2300      	movs	r3, #0
 8000e7a:	9303      	str	r3, [sp, #12]
 8000e7c:	e682      	b.n	8000b84 <__aeabi_ddiv+0x50>
 8000e7e:	465a      	mov	r2, fp
 8000e80:	4302      	orrs	r2, r0
 8000e82:	4691      	mov	r9, r2
 8000e84:	d12a      	bne.n	8000edc <__aeabi_ddiv+0x3a8>
 8000e86:	2200      	movs	r2, #0
 8000e88:	469a      	mov	sl, r3
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	4690      	mov	r8, r2
 8000e8e:	2408      	movs	r4, #8
 8000e90:	9303      	str	r3, [sp, #12]
 8000e92:	e677      	b.n	8000b84 <__aeabi_ddiv+0x50>
 8000e94:	465a      	mov	r2, fp
 8000e96:	9b00      	ldr	r3, [sp, #0]
 8000e98:	431a      	orrs	r2, r3
 8000e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed0 <__aeabi_ddiv+0x39c>)
 8000e9c:	469c      	mov	ip, r3
 8000e9e:	44e2      	add	sl, ip
 8000ea0:	2a00      	cmp	r2, #0
 8000ea2:	d117      	bne.n	8000ed4 <__aeabi_ddiv+0x3a0>
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	431c      	orrs	r4, r3
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	469b      	mov	fp, r3
 8000eac:	3302      	adds	r3, #2
 8000eae:	e689      	b.n	8000bc4 <__aeabi_ddiv+0x90>
 8000eb0:	000007ff 	.word	0x000007ff
 8000eb4:	fffffc01 	.word	0xfffffc01
 8000eb8:	08003fac 	.word	0x08003fac
 8000ebc:	000003ff 	.word	0x000003ff
 8000ec0:	feffffff 	.word	0xfeffffff
 8000ec4:	000007fe 	.word	0x000007fe
 8000ec8:	000003f3 	.word	0x000003f3
 8000ecc:	fffffc0d 	.word	0xfffffc0d
 8000ed0:	fffff801 	.word	0xfffff801
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	0032      	movs	r2, r6
 8000ed8:	431c      	orrs	r4, r3
 8000eda:	e673      	b.n	8000bc4 <__aeabi_ddiv+0x90>
 8000edc:	469a      	mov	sl, r3
 8000ede:	2303      	movs	r3, #3
 8000ee0:	46d9      	mov	r9, fp
 8000ee2:	240c      	movs	r4, #12
 8000ee4:	9303      	str	r3, [sp, #12]
 8000ee6:	e64d      	b.n	8000b84 <__aeabi_ddiv+0x50>
 8000ee8:	2300      	movs	r3, #0
 8000eea:	4698      	mov	r8, r3
 8000eec:	469a      	mov	sl, r3
 8000eee:	3301      	adds	r3, #1
 8000ef0:	2404      	movs	r4, #4
 8000ef2:	9303      	str	r3, [sp, #12]
 8000ef4:	e646      	b.n	8000b84 <__aeabi_ddiv+0x50>
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	431c      	orrs	r4, r3
 8000efa:	2300      	movs	r3, #0
 8000efc:	469b      	mov	fp, r3
 8000efe:	3301      	adds	r3, #1
 8000f00:	e660      	b.n	8000bc4 <__aeabi_ddiv+0x90>
 8000f02:	2300      	movs	r3, #0
 8000f04:	2480      	movs	r4, #128	@ 0x80
 8000f06:	4698      	mov	r8, r3
 8000f08:	2600      	movs	r6, #0
 8000f0a:	4b92      	ldr	r3, [pc, #584]	@ (8001154 <__aeabi_ddiv+0x620>)
 8000f0c:	0324      	lsls	r4, r4, #12
 8000f0e:	e671      	b.n	8000bf4 <__aeabi_ddiv+0xc0>
 8000f10:	2201      	movs	r2, #1
 8000f12:	4252      	negs	r2, r2
 8000f14:	2101      	movs	r1, #1
 8000f16:	1ac9      	subs	r1, r1, r3
 8000f18:	2938      	cmp	r1, #56	@ 0x38
 8000f1a:	dd00      	ble.n	8000f1e <__aeabi_ddiv+0x3ea>
 8000f1c:	e666      	b.n	8000bec <__aeabi_ddiv+0xb8>
 8000f1e:	291f      	cmp	r1, #31
 8000f20:	dc00      	bgt.n	8000f24 <__aeabi_ddiv+0x3f0>
 8000f22:	e0ab      	b.n	800107c <__aeabi_ddiv+0x548>
 8000f24:	201f      	movs	r0, #31
 8000f26:	4240      	negs	r0, r0
 8000f28:	1ac3      	subs	r3, r0, r3
 8000f2a:	4658      	mov	r0, fp
 8000f2c:	40d8      	lsrs	r0, r3
 8000f2e:	0003      	movs	r3, r0
 8000f30:	2920      	cmp	r1, #32
 8000f32:	d004      	beq.n	8000f3e <__aeabi_ddiv+0x40a>
 8000f34:	4658      	mov	r0, fp
 8000f36:	4988      	ldr	r1, [pc, #544]	@ (8001158 <__aeabi_ddiv+0x624>)
 8000f38:	4451      	add	r1, sl
 8000f3a:	4088      	lsls	r0, r1
 8000f3c:	4302      	orrs	r2, r0
 8000f3e:	1e51      	subs	r1, r2, #1
 8000f40:	418a      	sbcs	r2, r1
 8000f42:	431a      	orrs	r2, r3
 8000f44:	2307      	movs	r3, #7
 8000f46:	0019      	movs	r1, r3
 8000f48:	2400      	movs	r4, #0
 8000f4a:	4011      	ands	r1, r2
 8000f4c:	4213      	tst	r3, r2
 8000f4e:	d00c      	beq.n	8000f6a <__aeabi_ddiv+0x436>
 8000f50:	230f      	movs	r3, #15
 8000f52:	4013      	ands	r3, r2
 8000f54:	2b04      	cmp	r3, #4
 8000f56:	d100      	bne.n	8000f5a <__aeabi_ddiv+0x426>
 8000f58:	e0f9      	b.n	800114e <__aeabi_ddiv+0x61a>
 8000f5a:	1d11      	adds	r1, r2, #4
 8000f5c:	4291      	cmp	r1, r2
 8000f5e:	419b      	sbcs	r3, r3
 8000f60:	000a      	movs	r2, r1
 8000f62:	425b      	negs	r3, r3
 8000f64:	0759      	lsls	r1, r3, #29
 8000f66:	025b      	lsls	r3, r3, #9
 8000f68:	0b1c      	lsrs	r4, r3, #12
 8000f6a:	08d2      	lsrs	r2, r2, #3
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	4690      	mov	r8, r2
 8000f70:	2300      	movs	r3, #0
 8000f72:	e63f      	b.n	8000bf4 <__aeabi_ddiv+0xc0>
 8000f74:	2480      	movs	r4, #128	@ 0x80
 8000f76:	464b      	mov	r3, r9
 8000f78:	0324      	lsls	r4, r4, #12
 8000f7a:	4223      	tst	r3, r4
 8000f7c:	d009      	beq.n	8000f92 <__aeabi_ddiv+0x45e>
 8000f7e:	465b      	mov	r3, fp
 8000f80:	4223      	tst	r3, r4
 8000f82:	d106      	bne.n	8000f92 <__aeabi_ddiv+0x45e>
 8000f84:	431c      	orrs	r4, r3
 8000f86:	0324      	lsls	r4, r4, #12
 8000f88:	002e      	movs	r6, r5
 8000f8a:	4690      	mov	r8, r2
 8000f8c:	4b71      	ldr	r3, [pc, #452]	@ (8001154 <__aeabi_ddiv+0x620>)
 8000f8e:	0b24      	lsrs	r4, r4, #12
 8000f90:	e630      	b.n	8000bf4 <__aeabi_ddiv+0xc0>
 8000f92:	2480      	movs	r4, #128	@ 0x80
 8000f94:	464b      	mov	r3, r9
 8000f96:	0324      	lsls	r4, r4, #12
 8000f98:	431c      	orrs	r4, r3
 8000f9a:	0324      	lsls	r4, r4, #12
 8000f9c:	9e02      	ldr	r6, [sp, #8]
 8000f9e:	4b6d      	ldr	r3, [pc, #436]	@ (8001154 <__aeabi_ddiv+0x620>)
 8000fa0:	0b24      	lsrs	r4, r4, #12
 8000fa2:	e627      	b.n	8000bf4 <__aeabi_ddiv+0xc0>
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d100      	bne.n	8000faa <__aeabi_ddiv+0x476>
 8000fa8:	e700      	b.n	8000dac <__aeabi_ddiv+0x278>
 8000faa:	9800      	ldr	r0, [sp, #0]
 8000fac:	1e51      	subs	r1, r2, #1
 8000fae:	4684      	mov	ip, r0
 8000fb0:	4464      	add	r4, ip
 8000fb2:	4284      	cmp	r4, r0
 8000fb4:	d200      	bcs.n	8000fb8 <__aeabi_ddiv+0x484>
 8000fb6:	e084      	b.n	80010c2 <__aeabi_ddiv+0x58e>
 8000fb8:	42bc      	cmp	r4, r7
 8000fba:	d200      	bcs.n	8000fbe <__aeabi_ddiv+0x48a>
 8000fbc:	e0ae      	b.n	800111c <__aeabi_ddiv+0x5e8>
 8000fbe:	d100      	bne.n	8000fc2 <__aeabi_ddiv+0x48e>
 8000fc0:	e0c1      	b.n	8001146 <__aeabi_ddiv+0x612>
 8000fc2:	000a      	movs	r2, r1
 8000fc4:	e6f0      	b.n	8000da8 <__aeabi_ddiv+0x274>
 8000fc6:	4542      	cmp	r2, r8
 8000fc8:	d900      	bls.n	8000fcc <__aeabi_ddiv+0x498>
 8000fca:	e62c      	b.n	8000c26 <__aeabi_ddiv+0xf2>
 8000fcc:	464b      	mov	r3, r9
 8000fce:	07dc      	lsls	r4, r3, #31
 8000fd0:	0858      	lsrs	r0, r3, #1
 8000fd2:	4643      	mov	r3, r8
 8000fd4:	085b      	lsrs	r3, r3, #1
 8000fd6:	431c      	orrs	r4, r3
 8000fd8:	4643      	mov	r3, r8
 8000fda:	07df      	lsls	r7, r3, #31
 8000fdc:	e62a      	b.n	8000c34 <__aeabi_ddiv+0x100>
 8000fde:	f000 f98f 	bl	8001300 <__clzsi2>
 8000fe2:	2315      	movs	r3, #21
 8000fe4:	469c      	mov	ip, r3
 8000fe6:	4484      	add	ip, r0
 8000fe8:	0002      	movs	r2, r0
 8000fea:	4663      	mov	r3, ip
 8000fec:	3220      	adds	r2, #32
 8000fee:	2b1c      	cmp	r3, #28
 8000ff0:	dc00      	bgt.n	8000ff4 <__aeabi_ddiv+0x4c0>
 8000ff2:	e72e      	b.n	8000e52 <__aeabi_ddiv+0x31e>
 8000ff4:	0023      	movs	r3, r4
 8000ff6:	3808      	subs	r0, #8
 8000ff8:	4083      	lsls	r3, r0
 8000ffa:	4699      	mov	r9, r3
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	4698      	mov	r8, r3
 8001000:	e736      	b.n	8000e70 <__aeabi_ddiv+0x33c>
 8001002:	f000 f97d 	bl	8001300 <__clzsi2>
 8001006:	0002      	movs	r2, r0
 8001008:	0003      	movs	r3, r0
 800100a:	3215      	adds	r2, #21
 800100c:	3320      	adds	r3, #32
 800100e:	2a1c      	cmp	r2, #28
 8001010:	dc00      	bgt.n	8001014 <__aeabi_ddiv+0x4e0>
 8001012:	e6fb      	b.n	8000e0c <__aeabi_ddiv+0x2d8>
 8001014:	9900      	ldr	r1, [sp, #0]
 8001016:	3808      	subs	r0, #8
 8001018:	4081      	lsls	r1, r0
 800101a:	2200      	movs	r2, #0
 800101c:	468b      	mov	fp, r1
 800101e:	e702      	b.n	8000e26 <__aeabi_ddiv+0x2f2>
 8001020:	9900      	ldr	r1, [sp, #0]
 8001022:	3b01      	subs	r3, #1
 8001024:	468c      	mov	ip, r1
 8001026:	4464      	add	r4, ip
 8001028:	42a1      	cmp	r1, r4
 800102a:	d900      	bls.n	800102e <__aeabi_ddiv+0x4fa>
 800102c:	e69a      	b.n	8000d64 <__aeabi_ddiv+0x230>
 800102e:	42a2      	cmp	r2, r4
 8001030:	d800      	bhi.n	8001034 <__aeabi_ddiv+0x500>
 8001032:	e697      	b.n	8000d64 <__aeabi_ddiv+0x230>
 8001034:	1e83      	subs	r3, r0, #2
 8001036:	4464      	add	r4, ip
 8001038:	e694      	b.n	8000d64 <__aeabi_ddiv+0x230>
 800103a:	46ac      	mov	ip, r5
 800103c:	4461      	add	r1, ip
 800103e:	3f01      	subs	r7, #1
 8001040:	428d      	cmp	r5, r1
 8001042:	d900      	bls.n	8001046 <__aeabi_ddiv+0x512>
 8001044:	e680      	b.n	8000d48 <__aeabi_ddiv+0x214>
 8001046:	428a      	cmp	r2, r1
 8001048:	d800      	bhi.n	800104c <__aeabi_ddiv+0x518>
 800104a:	e67d      	b.n	8000d48 <__aeabi_ddiv+0x214>
 800104c:	1e87      	subs	r7, r0, #2
 800104e:	4461      	add	r1, ip
 8001050:	e67a      	b.n	8000d48 <__aeabi_ddiv+0x214>
 8001052:	4285      	cmp	r5, r0
 8001054:	d000      	beq.n	8001058 <__aeabi_ddiv+0x524>
 8001056:	e65f      	b.n	8000d18 <__aeabi_ddiv+0x1e4>
 8001058:	45b9      	cmp	r9, r7
 800105a:	d900      	bls.n	800105e <__aeabi_ddiv+0x52a>
 800105c:	e65c      	b.n	8000d18 <__aeabi_ddiv+0x1e4>
 800105e:	e656      	b.n	8000d0e <__aeabi_ddiv+0x1da>
 8001060:	42a2      	cmp	r2, r4
 8001062:	d800      	bhi.n	8001066 <__aeabi_ddiv+0x532>
 8001064:	e61a      	b.n	8000c9c <__aeabi_ddiv+0x168>
 8001066:	1e83      	subs	r3, r0, #2
 8001068:	4464      	add	r4, ip
 800106a:	e617      	b.n	8000c9c <__aeabi_ddiv+0x168>
 800106c:	428a      	cmp	r2, r1
 800106e:	d800      	bhi.n	8001072 <__aeabi_ddiv+0x53e>
 8001070:	e600      	b.n	8000c74 <__aeabi_ddiv+0x140>
 8001072:	46ac      	mov	ip, r5
 8001074:	1e83      	subs	r3, r0, #2
 8001076:	4698      	mov	r8, r3
 8001078:	4461      	add	r1, ip
 800107a:	e5fb      	b.n	8000c74 <__aeabi_ddiv+0x140>
 800107c:	4837      	ldr	r0, [pc, #220]	@ (800115c <__aeabi_ddiv+0x628>)
 800107e:	0014      	movs	r4, r2
 8001080:	4450      	add	r0, sl
 8001082:	4082      	lsls	r2, r0
 8001084:	465b      	mov	r3, fp
 8001086:	0017      	movs	r7, r2
 8001088:	4083      	lsls	r3, r0
 800108a:	40cc      	lsrs	r4, r1
 800108c:	1e7a      	subs	r2, r7, #1
 800108e:	4197      	sbcs	r7, r2
 8001090:	4323      	orrs	r3, r4
 8001092:	433b      	orrs	r3, r7
 8001094:	001a      	movs	r2, r3
 8001096:	465b      	mov	r3, fp
 8001098:	40cb      	lsrs	r3, r1
 800109a:	0751      	lsls	r1, r2, #29
 800109c:	d009      	beq.n	80010b2 <__aeabi_ddiv+0x57e>
 800109e:	210f      	movs	r1, #15
 80010a0:	4011      	ands	r1, r2
 80010a2:	2904      	cmp	r1, #4
 80010a4:	d005      	beq.n	80010b2 <__aeabi_ddiv+0x57e>
 80010a6:	1d11      	adds	r1, r2, #4
 80010a8:	4291      	cmp	r1, r2
 80010aa:	4192      	sbcs	r2, r2
 80010ac:	4252      	negs	r2, r2
 80010ae:	189b      	adds	r3, r3, r2
 80010b0:	000a      	movs	r2, r1
 80010b2:	0219      	lsls	r1, r3, #8
 80010b4:	d400      	bmi.n	80010b8 <__aeabi_ddiv+0x584>
 80010b6:	e755      	b.n	8000f64 <__aeabi_ddiv+0x430>
 80010b8:	2200      	movs	r2, #0
 80010ba:	2301      	movs	r3, #1
 80010bc:	2400      	movs	r4, #0
 80010be:	4690      	mov	r8, r2
 80010c0:	e598      	b.n	8000bf4 <__aeabi_ddiv+0xc0>
 80010c2:	000a      	movs	r2, r1
 80010c4:	42bc      	cmp	r4, r7
 80010c6:	d000      	beq.n	80010ca <__aeabi_ddiv+0x596>
 80010c8:	e66e      	b.n	8000da8 <__aeabi_ddiv+0x274>
 80010ca:	454b      	cmp	r3, r9
 80010cc:	d000      	beq.n	80010d0 <__aeabi_ddiv+0x59c>
 80010ce:	e66b      	b.n	8000da8 <__aeabi_ddiv+0x274>
 80010d0:	e66c      	b.n	8000dac <__aeabi_ddiv+0x278>
 80010d2:	4b23      	ldr	r3, [pc, #140]	@ (8001160 <__aeabi_ddiv+0x62c>)
 80010d4:	4a23      	ldr	r2, [pc, #140]	@ (8001164 <__aeabi_ddiv+0x630>)
 80010d6:	4453      	add	r3, sl
 80010d8:	4592      	cmp	sl, r2
 80010da:	da00      	bge.n	80010de <__aeabi_ddiv+0x5aa>
 80010dc:	e718      	b.n	8000f10 <__aeabi_ddiv+0x3dc>
 80010de:	2101      	movs	r1, #1
 80010e0:	4249      	negs	r1, r1
 80010e2:	1d0a      	adds	r2, r1, #4
 80010e4:	428a      	cmp	r2, r1
 80010e6:	4189      	sbcs	r1, r1
 80010e8:	4249      	negs	r1, r1
 80010ea:	448b      	add	fp, r1
 80010ec:	e666      	b.n	8000dbc <__aeabi_ddiv+0x288>
 80010ee:	210f      	movs	r1, #15
 80010f0:	4011      	ands	r1, r2
 80010f2:	2904      	cmp	r1, #4
 80010f4:	d100      	bne.n	80010f8 <__aeabi_ddiv+0x5c4>
 80010f6:	e661      	b.n	8000dbc <__aeabi_ddiv+0x288>
 80010f8:	0011      	movs	r1, r2
 80010fa:	e7f2      	b.n	80010e2 <__aeabi_ddiv+0x5ae>
 80010fc:	42bc      	cmp	r4, r7
 80010fe:	d800      	bhi.n	8001102 <__aeabi_ddiv+0x5ce>
 8001100:	e60a      	b.n	8000d18 <__aeabi_ddiv+0x1e4>
 8001102:	2302      	movs	r3, #2
 8001104:	425b      	negs	r3, r3
 8001106:	469c      	mov	ip, r3
 8001108:	9900      	ldr	r1, [sp, #0]
 800110a:	444f      	add	r7, r9
 800110c:	454f      	cmp	r7, r9
 800110e:	419b      	sbcs	r3, r3
 8001110:	44e3      	add	fp, ip
 8001112:	468c      	mov	ip, r1
 8001114:	425b      	negs	r3, r3
 8001116:	4463      	add	r3, ip
 8001118:	18c0      	adds	r0, r0, r3
 800111a:	e5ff      	b.n	8000d1c <__aeabi_ddiv+0x1e8>
 800111c:	4649      	mov	r1, r9
 800111e:	9d00      	ldr	r5, [sp, #0]
 8001120:	0048      	lsls	r0, r1, #1
 8001122:	4548      	cmp	r0, r9
 8001124:	4189      	sbcs	r1, r1
 8001126:	46ac      	mov	ip, r5
 8001128:	4249      	negs	r1, r1
 800112a:	4461      	add	r1, ip
 800112c:	4681      	mov	r9, r0
 800112e:	3a02      	subs	r2, #2
 8001130:	1864      	adds	r4, r4, r1
 8001132:	e7c7      	b.n	80010c4 <__aeabi_ddiv+0x590>
 8001134:	2480      	movs	r4, #128	@ 0x80
 8001136:	465b      	mov	r3, fp
 8001138:	0324      	lsls	r4, r4, #12
 800113a:	431c      	orrs	r4, r3
 800113c:	0324      	lsls	r4, r4, #12
 800113e:	4690      	mov	r8, r2
 8001140:	4b04      	ldr	r3, [pc, #16]	@ (8001154 <__aeabi_ddiv+0x620>)
 8001142:	0b24      	lsrs	r4, r4, #12
 8001144:	e556      	b.n	8000bf4 <__aeabi_ddiv+0xc0>
 8001146:	4599      	cmp	r9, r3
 8001148:	d3e8      	bcc.n	800111c <__aeabi_ddiv+0x5e8>
 800114a:	000a      	movs	r2, r1
 800114c:	e7bd      	b.n	80010ca <__aeabi_ddiv+0x596>
 800114e:	2300      	movs	r3, #0
 8001150:	e708      	b.n	8000f64 <__aeabi_ddiv+0x430>
 8001152:	46c0      	nop			@ (mov r8, r8)
 8001154:	000007ff 	.word	0x000007ff
 8001158:	0000043e 	.word	0x0000043e
 800115c:	0000041e 	.word	0x0000041e
 8001160:	000003ff 	.word	0x000003ff
 8001164:	fffffc02 	.word	0xfffffc02

08001168 <__aeabi_f2d>:
 8001168:	b570      	push	{r4, r5, r6, lr}
 800116a:	0242      	lsls	r2, r0, #9
 800116c:	0043      	lsls	r3, r0, #1
 800116e:	0fc4      	lsrs	r4, r0, #31
 8001170:	20fe      	movs	r0, #254	@ 0xfe
 8001172:	0e1b      	lsrs	r3, r3, #24
 8001174:	1c59      	adds	r1, r3, #1
 8001176:	0a55      	lsrs	r5, r2, #9
 8001178:	4208      	tst	r0, r1
 800117a:	d00c      	beq.n	8001196 <__aeabi_f2d+0x2e>
 800117c:	21e0      	movs	r1, #224	@ 0xe0
 800117e:	0089      	lsls	r1, r1, #2
 8001180:	468c      	mov	ip, r1
 8001182:	076d      	lsls	r5, r5, #29
 8001184:	0b12      	lsrs	r2, r2, #12
 8001186:	4463      	add	r3, ip
 8001188:	051b      	lsls	r3, r3, #20
 800118a:	4313      	orrs	r3, r2
 800118c:	07e4      	lsls	r4, r4, #31
 800118e:	4323      	orrs	r3, r4
 8001190:	0028      	movs	r0, r5
 8001192:	0019      	movs	r1, r3
 8001194:	bd70      	pop	{r4, r5, r6, pc}
 8001196:	2b00      	cmp	r3, #0
 8001198:	d114      	bne.n	80011c4 <__aeabi_f2d+0x5c>
 800119a:	2d00      	cmp	r5, #0
 800119c:	d01b      	beq.n	80011d6 <__aeabi_f2d+0x6e>
 800119e:	0028      	movs	r0, r5
 80011a0:	f000 f8ae 	bl	8001300 <__clzsi2>
 80011a4:	280a      	cmp	r0, #10
 80011a6:	dc1c      	bgt.n	80011e2 <__aeabi_f2d+0x7a>
 80011a8:	230b      	movs	r3, #11
 80011aa:	002a      	movs	r2, r5
 80011ac:	1a1b      	subs	r3, r3, r0
 80011ae:	40da      	lsrs	r2, r3
 80011b0:	0003      	movs	r3, r0
 80011b2:	3315      	adds	r3, #21
 80011b4:	409d      	lsls	r5, r3
 80011b6:	4b0e      	ldr	r3, [pc, #56]	@ (80011f0 <__aeabi_f2d+0x88>)
 80011b8:	0312      	lsls	r2, r2, #12
 80011ba:	1a1b      	subs	r3, r3, r0
 80011bc:	055b      	lsls	r3, r3, #21
 80011be:	0b12      	lsrs	r2, r2, #12
 80011c0:	0d5b      	lsrs	r3, r3, #21
 80011c2:	e7e1      	b.n	8001188 <__aeabi_f2d+0x20>
 80011c4:	2d00      	cmp	r5, #0
 80011c6:	d009      	beq.n	80011dc <__aeabi_f2d+0x74>
 80011c8:	0b13      	lsrs	r3, r2, #12
 80011ca:	2280      	movs	r2, #128	@ 0x80
 80011cc:	0312      	lsls	r2, r2, #12
 80011ce:	431a      	orrs	r2, r3
 80011d0:	076d      	lsls	r5, r5, #29
 80011d2:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <__aeabi_f2d+0x8c>)
 80011d4:	e7d8      	b.n	8001188 <__aeabi_f2d+0x20>
 80011d6:	2300      	movs	r3, #0
 80011d8:	2200      	movs	r2, #0
 80011da:	e7d5      	b.n	8001188 <__aeabi_f2d+0x20>
 80011dc:	2200      	movs	r2, #0
 80011de:	4b05      	ldr	r3, [pc, #20]	@ (80011f4 <__aeabi_f2d+0x8c>)
 80011e0:	e7d2      	b.n	8001188 <__aeabi_f2d+0x20>
 80011e2:	0003      	movs	r3, r0
 80011e4:	002a      	movs	r2, r5
 80011e6:	3b0b      	subs	r3, #11
 80011e8:	409a      	lsls	r2, r3
 80011ea:	2500      	movs	r5, #0
 80011ec:	e7e3      	b.n	80011b6 <__aeabi_f2d+0x4e>
 80011ee:	46c0      	nop			@ (mov r8, r8)
 80011f0:	00000389 	.word	0x00000389
 80011f4:	000007ff 	.word	0x000007ff

080011f8 <__aeabi_d2f>:
 80011f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011fa:	004b      	lsls	r3, r1, #1
 80011fc:	030f      	lsls	r7, r1, #12
 80011fe:	0d5b      	lsrs	r3, r3, #21
 8001200:	4c3b      	ldr	r4, [pc, #236]	@ (80012f0 <__aeabi_d2f+0xf8>)
 8001202:	0f45      	lsrs	r5, r0, #29
 8001204:	b083      	sub	sp, #12
 8001206:	0a7f      	lsrs	r7, r7, #9
 8001208:	1c5e      	adds	r6, r3, #1
 800120a:	432f      	orrs	r7, r5
 800120c:	9000      	str	r0, [sp, #0]
 800120e:	9101      	str	r1, [sp, #4]
 8001210:	0fca      	lsrs	r2, r1, #31
 8001212:	00c5      	lsls	r5, r0, #3
 8001214:	4226      	tst	r6, r4
 8001216:	d00b      	beq.n	8001230 <__aeabi_d2f+0x38>
 8001218:	4936      	ldr	r1, [pc, #216]	@ (80012f4 <__aeabi_d2f+0xfc>)
 800121a:	185c      	adds	r4, r3, r1
 800121c:	2cfe      	cmp	r4, #254	@ 0xfe
 800121e:	dd13      	ble.n	8001248 <__aeabi_d2f+0x50>
 8001220:	20ff      	movs	r0, #255	@ 0xff
 8001222:	2300      	movs	r3, #0
 8001224:	05c0      	lsls	r0, r0, #23
 8001226:	4318      	orrs	r0, r3
 8001228:	07d2      	lsls	r2, r2, #31
 800122a:	4310      	orrs	r0, r2
 800122c:	b003      	add	sp, #12
 800122e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001230:	2b00      	cmp	r3, #0
 8001232:	d102      	bne.n	800123a <__aeabi_d2f+0x42>
 8001234:	2000      	movs	r0, #0
 8001236:	2300      	movs	r3, #0
 8001238:	e7f4      	b.n	8001224 <__aeabi_d2f+0x2c>
 800123a:	433d      	orrs	r5, r7
 800123c:	d0f0      	beq.n	8001220 <__aeabi_d2f+0x28>
 800123e:	2380      	movs	r3, #128	@ 0x80
 8001240:	03db      	lsls	r3, r3, #15
 8001242:	20ff      	movs	r0, #255	@ 0xff
 8001244:	433b      	orrs	r3, r7
 8001246:	e7ed      	b.n	8001224 <__aeabi_d2f+0x2c>
 8001248:	2c00      	cmp	r4, #0
 800124a:	dd14      	ble.n	8001276 <__aeabi_d2f+0x7e>
 800124c:	9b00      	ldr	r3, [sp, #0]
 800124e:	00ff      	lsls	r7, r7, #3
 8001250:	019b      	lsls	r3, r3, #6
 8001252:	1e58      	subs	r0, r3, #1
 8001254:	4183      	sbcs	r3, r0
 8001256:	0f69      	lsrs	r1, r5, #29
 8001258:	433b      	orrs	r3, r7
 800125a:	430b      	orrs	r3, r1
 800125c:	0759      	lsls	r1, r3, #29
 800125e:	d041      	beq.n	80012e4 <__aeabi_d2f+0xec>
 8001260:	210f      	movs	r1, #15
 8001262:	4019      	ands	r1, r3
 8001264:	2904      	cmp	r1, #4
 8001266:	d028      	beq.n	80012ba <__aeabi_d2f+0xc2>
 8001268:	3304      	adds	r3, #4
 800126a:	0159      	lsls	r1, r3, #5
 800126c:	d525      	bpl.n	80012ba <__aeabi_d2f+0xc2>
 800126e:	3401      	adds	r4, #1
 8001270:	2300      	movs	r3, #0
 8001272:	b2e0      	uxtb	r0, r4
 8001274:	e7d6      	b.n	8001224 <__aeabi_d2f+0x2c>
 8001276:	0021      	movs	r1, r4
 8001278:	3117      	adds	r1, #23
 800127a:	dbdb      	blt.n	8001234 <__aeabi_d2f+0x3c>
 800127c:	2180      	movs	r1, #128	@ 0x80
 800127e:	201e      	movs	r0, #30
 8001280:	0409      	lsls	r1, r1, #16
 8001282:	4339      	orrs	r1, r7
 8001284:	1b00      	subs	r0, r0, r4
 8001286:	281f      	cmp	r0, #31
 8001288:	dd1b      	ble.n	80012c2 <__aeabi_d2f+0xca>
 800128a:	2602      	movs	r6, #2
 800128c:	4276      	negs	r6, r6
 800128e:	1b34      	subs	r4, r6, r4
 8001290:	000e      	movs	r6, r1
 8001292:	40e6      	lsrs	r6, r4
 8001294:	0034      	movs	r4, r6
 8001296:	2820      	cmp	r0, #32
 8001298:	d004      	beq.n	80012a4 <__aeabi_d2f+0xac>
 800129a:	4817      	ldr	r0, [pc, #92]	@ (80012f8 <__aeabi_d2f+0x100>)
 800129c:	4684      	mov	ip, r0
 800129e:	4463      	add	r3, ip
 80012a0:	4099      	lsls	r1, r3
 80012a2:	430d      	orrs	r5, r1
 80012a4:	002b      	movs	r3, r5
 80012a6:	1e59      	subs	r1, r3, #1
 80012a8:	418b      	sbcs	r3, r1
 80012aa:	4323      	orrs	r3, r4
 80012ac:	0759      	lsls	r1, r3, #29
 80012ae:	d015      	beq.n	80012dc <__aeabi_d2f+0xe4>
 80012b0:	210f      	movs	r1, #15
 80012b2:	2400      	movs	r4, #0
 80012b4:	4019      	ands	r1, r3
 80012b6:	2904      	cmp	r1, #4
 80012b8:	d117      	bne.n	80012ea <__aeabi_d2f+0xf2>
 80012ba:	019b      	lsls	r3, r3, #6
 80012bc:	0a5b      	lsrs	r3, r3, #9
 80012be:	b2e0      	uxtb	r0, r4
 80012c0:	e7b0      	b.n	8001224 <__aeabi_d2f+0x2c>
 80012c2:	4c0e      	ldr	r4, [pc, #56]	@ (80012fc <__aeabi_d2f+0x104>)
 80012c4:	191c      	adds	r4, r3, r4
 80012c6:	002b      	movs	r3, r5
 80012c8:	40a5      	lsls	r5, r4
 80012ca:	40c3      	lsrs	r3, r0
 80012cc:	40a1      	lsls	r1, r4
 80012ce:	1e68      	subs	r0, r5, #1
 80012d0:	4185      	sbcs	r5, r0
 80012d2:	4329      	orrs	r1, r5
 80012d4:	430b      	orrs	r3, r1
 80012d6:	2400      	movs	r4, #0
 80012d8:	0759      	lsls	r1, r3, #29
 80012da:	d1c1      	bne.n	8001260 <__aeabi_d2f+0x68>
 80012dc:	019b      	lsls	r3, r3, #6
 80012de:	2000      	movs	r0, #0
 80012e0:	0a5b      	lsrs	r3, r3, #9
 80012e2:	e79f      	b.n	8001224 <__aeabi_d2f+0x2c>
 80012e4:	08db      	lsrs	r3, r3, #3
 80012e6:	b2e0      	uxtb	r0, r4
 80012e8:	e79c      	b.n	8001224 <__aeabi_d2f+0x2c>
 80012ea:	3304      	adds	r3, #4
 80012ec:	e7e5      	b.n	80012ba <__aeabi_d2f+0xc2>
 80012ee:	46c0      	nop			@ (mov r8, r8)
 80012f0:	000007fe 	.word	0x000007fe
 80012f4:	fffffc80 	.word	0xfffffc80
 80012f8:	fffffca2 	.word	0xfffffca2
 80012fc:	fffffc82 	.word	0xfffffc82

08001300 <__clzsi2>:
 8001300:	211c      	movs	r1, #28
 8001302:	2301      	movs	r3, #1
 8001304:	041b      	lsls	r3, r3, #16
 8001306:	4298      	cmp	r0, r3
 8001308:	d301      	bcc.n	800130e <__clzsi2+0xe>
 800130a:	0c00      	lsrs	r0, r0, #16
 800130c:	3910      	subs	r1, #16
 800130e:	0a1b      	lsrs	r3, r3, #8
 8001310:	4298      	cmp	r0, r3
 8001312:	d301      	bcc.n	8001318 <__clzsi2+0x18>
 8001314:	0a00      	lsrs	r0, r0, #8
 8001316:	3908      	subs	r1, #8
 8001318:	091b      	lsrs	r3, r3, #4
 800131a:	4298      	cmp	r0, r3
 800131c:	d301      	bcc.n	8001322 <__clzsi2+0x22>
 800131e:	0900      	lsrs	r0, r0, #4
 8001320:	3904      	subs	r1, #4
 8001322:	a202      	add	r2, pc, #8	@ (adr r2, 800132c <__clzsi2+0x2c>)
 8001324:	5c10      	ldrb	r0, [r2, r0]
 8001326:	1840      	adds	r0, r0, r1
 8001328:	4770      	bx	lr
 800132a:	46c0      	nop			@ (mov r8, r8)
 800132c:	02020304 	.word	0x02020304
 8001330:	01010101 	.word	0x01010101
	...

0800133c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001342:	f000 fb82 	bl	8001a4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001346:	f000 f8e3 	bl	8001510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800134a:	f000 f9e1 	bl	8001710 <MX_GPIO_Init>
  MX_ADC1_Init();
 800134e:	f000 f92b 	bl	80015a8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001352:	f000 f98f 	bl	8001674 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
//  HAL_GPIO_WritePin(R_GPIO_Port, R_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8001356:	23a0      	movs	r3, #160	@ 0xa0
 8001358:	05db      	lsls	r3, r3, #23
 800135a:	2201      	movs	r2, #1
 800135c:	2102      	movs	r1, #2
 800135e:	0018      	movs	r0, r3
 8001360:	f001 fc26 	bl	8002bb0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8001364:	23a0      	movs	r3, #160	@ 0xa0
 8001366:	05db      	lsls	r3, r3, #23
 8001368:	2201      	movs	r2, #1
 800136a:	2120      	movs	r1, #32
 800136c:	0018      	movs	r0, r3
 800136e:	f001 fc1f 	bl	8002bb0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R_GPIO_Port, R_Pin, GPIO_PIN_SET);
 8001372:	23a0      	movs	r3, #160	@ 0xa0
 8001374:	05db      	lsls	r3, r3, #23
 8001376:	2201      	movs	r2, #1
 8001378:	2104      	movs	r1, #4
 800137a:	0018      	movs	r0, r3
 800137c:	f001 fc18 	bl	8002bb0 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_ADC_Start(&hadc1);
 8001380:	4b57      	ldr	r3, [pc, #348]	@ (80014e0 <main+0x1a4>)
 8001382:	0018      	movs	r0, r3
 8001384:	f000 feba 	bl	80020fc <HAL_ADC_Start>
	  if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK)
 8001388:	2301      	movs	r3, #1
 800138a:	425a      	negs	r2, r3
 800138c:	4b54      	ldr	r3, [pc, #336]	@ (80014e0 <main+0x1a4>)
 800138e:	0011      	movs	r1, r2
 8001390:	0018      	movs	r0, r3
 8001392:	f000 ff01 	bl	8002198 <HAL_ADC_PollForConversion>
 8001396:	1e03      	subs	r3, r0, #0
 8001398:	d16a      	bne.n	8001470 <main+0x134>
	  {
		  adc_val = HAL_ADC_GetValue(&hadc1);
 800139a:	4b51      	ldr	r3, [pc, #324]	@ (80014e0 <main+0x1a4>)
 800139c:	0018      	movs	r0, r3
 800139e:	f000 ff89 	bl	80022b4 <HAL_ADC_GetValue>
 80013a2:	0003      	movs	r3, r0
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	4b4f      	ldr	r3, [pc, #316]	@ (80014e4 <main+0x1a8>)
 80013a8:	801a      	strh	r2, [r3, #0]
//		  mA = 3.3f * (adc_val/4096.0f);
		  for (int i = 0; i < AVERAGE_SAMPLES - 1; i++) {
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	e00b      	b.n	80013c8 <main+0x8c>
		      adc_sample_buffer[i] = adc_sample_buffer[i + 1];
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	1c5a      	adds	r2, r3, #1
 80013b4:	4b4c      	ldr	r3, [pc, #304]	@ (80014e8 <main+0x1ac>)
 80013b6:	0052      	lsls	r2, r2, #1
 80013b8:	5ad1      	ldrh	r1, [r2, r3]
 80013ba:	4b4b      	ldr	r3, [pc, #300]	@ (80014e8 <main+0x1ac>)
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	0052      	lsls	r2, r2, #1
 80013c0:	52d1      	strh	r1, [r2, r3]
		  for (int i = 0; i < AVERAGE_SAMPLES - 1; i++) {
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3301      	adds	r3, #1
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	2395      	movs	r3, #149	@ 0x95
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	429a      	cmp	r2, r3
 80013d0:	ddee      	ble.n	80013b0 <main+0x74>
		  }

		  // Place new value at the end
		  adc_sample_buffer[AVERAGE_SAMPLES - 1] = adc_val;
 80013d2:	4b44      	ldr	r3, [pc, #272]	@ (80014e4 <main+0x1a8>)
 80013d4:	8819      	ldrh	r1, [r3, #0]
 80013d6:	4b44      	ldr	r3, [pc, #272]	@ (80014e8 <main+0x1ac>)
 80013d8:	4a44      	ldr	r2, [pc, #272]	@ (80014ec <main+0x1b0>)
 80013da:	5299      	strh	r1, [r3, r2]
		  average = 0;
 80013dc:	4b44      	ldr	r3, [pc, #272]	@ (80014f0 <main+0x1b4>)
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
		  for(int i = 0; i<AVERAGE_SAMPLES;i++){
 80013e2:	2300      	movs	r3, #0
 80013e4:	603b      	str	r3, [r7, #0]
 80013e6:	e00c      	b.n	8001402 <main+0xc6>
			  average += adc_sample_buffer[i];
 80013e8:	4b3f      	ldr	r3, [pc, #252]	@ (80014e8 <main+0x1ac>)
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	0052      	lsls	r2, r2, #1
 80013ee:	5ad3      	ldrh	r3, [r2, r3]
 80013f0:	001a      	movs	r2, r3
 80013f2:	4b3f      	ldr	r3, [pc, #252]	@ (80014f0 <main+0x1b4>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	18d2      	adds	r2, r2, r3
 80013f8:	4b3d      	ldr	r3, [pc, #244]	@ (80014f0 <main+0x1b4>)
 80013fa:	601a      	str	r2, [r3, #0]
		  for(int i = 0; i<AVERAGE_SAMPLES;i++){
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	3301      	adds	r3, #1
 8001400:	603b      	str	r3, [r7, #0]
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	2396      	movs	r3, #150	@ 0x96
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	429a      	cmp	r2, r3
 800140a:	dbed      	blt.n	80013e8 <main+0xac>
		  }
		  average = (average/AVERAGE_SAMPLES);
 800140c:	4b38      	ldr	r3, [pc, #224]	@ (80014f0 <main+0x1b4>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2296      	movs	r2, #150	@ 0x96
 8001412:	0051      	lsls	r1, r2, #1
 8001414:	0018      	movs	r0, r3
 8001416:	f7fe fe77 	bl	8000108 <__udivsi3>
 800141a:	0003      	movs	r3, r0
 800141c:	001a      	movs	r2, r3
 800141e:	4b34      	ldr	r3, [pc, #208]	@ (80014f0 <main+0x1b4>)
 8001420:	601a      	str	r2, [r3, #0]
		  V = 3.3f * (average/4096.0f);
 8001422:	4b33      	ldr	r3, [pc, #204]	@ (80014f0 <main+0x1b4>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	0018      	movs	r0, r3
 8001428:	f7ff fb42 	bl	8000ab0 <__aeabi_ui2f>
 800142c:	1c03      	adds	r3, r0, #0
 800142e:	218b      	movs	r1, #139	@ 0x8b
 8001430:	05c9      	lsls	r1, r1, #23
 8001432:	1c18      	adds	r0, r3, #0
 8001434:	f7ff f818 	bl	8000468 <__aeabi_fdiv>
 8001438:	1c03      	adds	r3, r0, #0
 800143a:	492e      	ldr	r1, [pc, #184]	@ (80014f4 <main+0x1b8>)
 800143c:	1c18      	adds	r0, r3, #0
 800143e:	f7ff f9f9 	bl	8000834 <__aeabi_fmul>
 8001442:	1c03      	adds	r3, r0, #0
 8001444:	1c1a      	adds	r2, r3, #0
 8001446:	4b2c      	ldr	r3, [pc, #176]	@ (80014f8 <main+0x1bc>)
 8001448:	601a      	str	r2, [r3, #0]
		  mA = V/(Resistor*200);
 800144a:	4b2b      	ldr	r3, [pc, #172]	@ (80014f8 <main+0x1bc>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	1c18      	adds	r0, r3, #0
 8001450:	f7ff fe8a 	bl	8001168 <__aeabi_f2d>
 8001454:	2201      	movs	r2, #1
 8001456:	4252      	negs	r2, r2
 8001458:	4b28      	ldr	r3, [pc, #160]	@ (80014fc <main+0x1c0>)
 800145a:	f7ff fb6b 	bl	8000b34 <__aeabi_ddiv>
 800145e:	0002      	movs	r2, r0
 8001460:	000b      	movs	r3, r1
 8001462:	0010      	movs	r0, r2
 8001464:	0019      	movs	r1, r3
 8001466:	f7ff fec7 	bl	80011f8 <__aeabi_d2f>
 800146a:	1c02      	adds	r2, r0, #0
 800146c:	4b24      	ldr	r3, [pc, #144]	@ (8001500 <main+0x1c4>)
 800146e:	601a      	str	r2, [r3, #0]
	  }

	  // Evaluate average and toggle GPIO after delay
	  if ((HAL_GetTick() - last_eval_tick) >= EVALUATE_INTERVAL_MS)
 8001470:	f000 fb5e 	bl	8001b30 <HAL_GetTick>
 8001474:	0002      	movs	r2, r0
 8001476:	4b23      	ldr	r3, [pc, #140]	@ (8001504 <main+0x1c8>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	1ad2      	subs	r2, r2, r3
 800147c:	23fa      	movs	r3, #250	@ 0xfa
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	429a      	cmp	r2, r3
 8001482:	d200      	bcs.n	8001486 <main+0x14a>
 8001484:	e77c      	b.n	8001380 <main+0x44>
	  {
		  last_eval_tick = HAL_GetTick();
 8001486:	f000 fb53 	bl	8001b30 <HAL_GetTick>
 800148a:	0002      	movs	r2, r0
 800148c:	4b1d      	ldr	r3, [pc, #116]	@ (8001504 <main+0x1c8>)
 800148e:	601a      	str	r2, [r3, #0]
		  // Set only one pin based on thresholds
		  if (mA < LOWER_LEVEL)
 8001490:	4b1b      	ldr	r3, [pc, #108]	@ (8001500 <main+0x1c4>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	491c      	ldr	r1, [pc, #112]	@ (8001508 <main+0x1cc>)
 8001496:	1c18      	adds	r0, r3, #0
 8001498:	f7fe ffbe 	bl	8000418 <__aeabi_fcmplt>
 800149c:	1e03      	subs	r3, r0, #0
 800149e:	d007      	beq.n	80014b0 <main+0x174>
			  HAL_GPIO_WritePin(R_GPIO_Port, R_Pin, GPIO_PIN_RESET);
 80014a0:	23a0      	movs	r3, #160	@ 0xa0
 80014a2:	05db      	lsls	r3, r3, #23
 80014a4:	2200      	movs	r2, #0
 80014a6:	2104      	movs	r1, #4
 80014a8:	0018      	movs	r0, r3
 80014aa:	f001 fb81 	bl	8002bb0 <HAL_GPIO_WritePin>
 80014ae:	e767      	b.n	8001380 <main+0x44>
		  else if (mA<UPPER_LEVEL)
 80014b0:	4b13      	ldr	r3, [pc, #76]	@ (8001500 <main+0x1c4>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4915      	ldr	r1, [pc, #84]	@ (800150c <main+0x1d0>)
 80014b6:	1c18      	adds	r0, r3, #0
 80014b8:	f7fe ffae 	bl	8000418 <__aeabi_fcmplt>
 80014bc:	1e03      	subs	r3, r0, #0
 80014be:	d007      	beq.n	80014d0 <main+0x194>
			  HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 80014c0:	23a0      	movs	r3, #160	@ 0xa0
 80014c2:	05db      	lsls	r3, r3, #23
 80014c4:	2200      	movs	r2, #0
 80014c6:	2102      	movs	r1, #2
 80014c8:	0018      	movs	r0, r3
 80014ca:	f001 fb71 	bl	8002bb0 <HAL_GPIO_WritePin>
 80014ce:	e757      	b.n	8001380 <main+0x44>
		  else
			  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 80014d0:	23a0      	movs	r3, #160	@ 0xa0
 80014d2:	05db      	lsls	r3, r3, #23
 80014d4:	2200      	movs	r2, #0
 80014d6:	2120      	movs	r1, #32
 80014d8:	0018      	movs	r0, r3
 80014da:	f001 fb69 	bl	8002bb0 <HAL_GPIO_WritePin>
	  HAL_ADC_Start(&hadc1);
 80014de:	e74f      	b.n	8001380 <main+0x44>
 80014e0:	20000028 	.word	0x20000028
 80014e4:	20000388 	.word	0x20000388
 80014e8:	20000120 	.word	0x20000120
 80014ec:	00000256 	.word	0x00000256
 80014f0:	20000378 	.word	0x20000378
 80014f4:	40533333 	.word	0x40533333
 80014f8:	20000384 	.word	0x20000384
 80014fc:	40999fff 	.word	0x40999fff
 8001500:	20000380 	.word	0x20000380
 8001504:	2000037c 	.word	0x2000037c
 8001508:	3fcccccd 	.word	0x3fcccccd
 800150c:	3ff33333 	.word	0x3ff33333

08001510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001510:	b590      	push	{r4, r7, lr}
 8001512:	b08d      	sub	sp, #52	@ 0x34
 8001514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001516:	2414      	movs	r4, #20
 8001518:	193b      	adds	r3, r7, r4
 800151a:	0018      	movs	r0, r3
 800151c:	231c      	movs	r3, #28
 800151e:	001a      	movs	r2, r3
 8001520:	2100      	movs	r1, #0
 8001522:	f002 fccd 	bl	8003ec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001526:	003b      	movs	r3, r7
 8001528:	0018      	movs	r0, r3
 800152a:	2314      	movs	r3, #20
 800152c:	001a      	movs	r2, r3
 800152e:	2100      	movs	r1, #0
 8001530:	f002 fcc6 	bl	8003ec0 <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8001534:	4b1b      	ldr	r3, [pc, #108]	@ (80015a4 <SystemClock_Config+0x94>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4b1a      	ldr	r3, [pc, #104]	@ (80015a4 <SystemClock_Config+0x94>)
 800153a:	2107      	movs	r1, #7
 800153c:	438a      	bics	r2, r1
 800153e:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001540:	193b      	adds	r3, r7, r4
 8001542:	2202      	movs	r2, #2
 8001544:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001546:	193b      	adds	r3, r7, r4
 8001548:	2280      	movs	r2, #128	@ 0x80
 800154a:	0052      	lsls	r2, r2, #1
 800154c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 800154e:	193b      	adds	r3, r7, r4
 8001550:	2280      	movs	r2, #128	@ 0x80
 8001552:	0112      	lsls	r2, r2, #4
 8001554:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001556:	193b      	adds	r3, r7, r4
 8001558:	2240      	movs	r2, #64	@ 0x40
 800155a:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800155c:	193b      	adds	r3, r7, r4
 800155e:	0018      	movs	r0, r3
 8001560:	f001 fb44 	bl	8002bec <HAL_RCC_OscConfig>
 8001564:	1e03      	subs	r3, r0, #0
 8001566:	d001      	beq.n	800156c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001568:	f000 f916 	bl	8001798 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800156c:	003b      	movs	r3, r7
 800156e:	2207      	movs	r2, #7
 8001570:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001572:	003b      	movs	r3, r7
 8001574:	2200      	movs	r2, #0
 8001576:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001578:	003b      	movs	r3, r7
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800157e:	003b      	movs	r3, r7
 8001580:	2200      	movs	r2, #0
 8001582:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001584:	003b      	movs	r3, r7
 8001586:	2200      	movs	r2, #0
 8001588:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800158a:	003b      	movs	r3, r7
 800158c:	2100      	movs	r1, #0
 800158e:	0018      	movs	r0, r3
 8001590:	f001 fd10 	bl	8002fb4 <HAL_RCC_ClockConfig>
 8001594:	1e03      	subs	r3, r0, #0
 8001596:	d001      	beq.n	800159c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001598:	f000 f8fe 	bl	8001798 <Error_Handler>
  }
}
 800159c:	46c0      	nop			@ (mov r8, r8)
 800159e:	46bd      	mov	sp, r7
 80015a0:	b00d      	add	sp, #52	@ 0x34
 80015a2:	bd90      	pop	{r4, r7, pc}
 80015a4:	40022000 	.word	0x40022000

080015a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	0018      	movs	r0, r3
 80015b2:	230c      	movs	r3, #12
 80015b4:	001a      	movs	r2, r3
 80015b6:	2100      	movs	r1, #0
 80015b8:	f002 fc82 	bl	8003ec0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015bc:	4b2b      	ldr	r3, [pc, #172]	@ (800166c <MX_ADC1_Init+0xc4>)
 80015be:	4a2c      	ldr	r2, [pc, #176]	@ (8001670 <MX_ADC1_Init+0xc8>)
 80015c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80015c2:	4b2a      	ldr	r3, [pc, #168]	@ (800166c <MX_ADC1_Init+0xc4>)
 80015c4:	22c0      	movs	r2, #192	@ 0xc0
 80015c6:	0612      	lsls	r2, r2, #24
 80015c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015ca:	4b28      	ldr	r3, [pc, #160]	@ (800166c <MX_ADC1_Init+0xc4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015d0:	4b26      	ldr	r3, [pc, #152]	@ (800166c <MX_ADC1_Init+0xc4>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 80015d6:	4b25      	ldr	r3, [pc, #148]	@ (800166c <MX_ADC1_Init+0xc4>)
 80015d8:	2280      	movs	r2, #128	@ 0x80
 80015da:	0612      	lsls	r2, r2, #24
 80015dc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015de:	4b23      	ldr	r3, [pc, #140]	@ (800166c <MX_ADC1_Init+0xc4>)
 80015e0:	2204      	movs	r2, #4
 80015e2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80015e4:	4b21      	ldr	r3, [pc, #132]	@ (800166c <MX_ADC1_Init+0xc4>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80015ea:	4b20      	ldr	r3, [pc, #128]	@ (800166c <MX_ADC1_Init+0xc4>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015f0:	4b1e      	ldr	r3, [pc, #120]	@ (800166c <MX_ADC1_Init+0xc4>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80015f6:	4b1d      	ldr	r3, [pc, #116]	@ (800166c <MX_ADC1_Init+0xc4>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015fc:	4b1b      	ldr	r3, [pc, #108]	@ (800166c <MX_ADC1_Init+0xc4>)
 80015fe:	2220      	movs	r2, #32
 8001600:	2100      	movs	r1, #0
 8001602:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001604:	4b19      	ldr	r3, [pc, #100]	@ (800166c <MX_ADC1_Init+0xc4>)
 8001606:	2200      	movs	r2, #0
 8001608:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800160a:	4b18      	ldr	r3, [pc, #96]	@ (800166c <MX_ADC1_Init+0xc4>)
 800160c:	2200      	movs	r2, #0
 800160e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001610:	4b16      	ldr	r3, [pc, #88]	@ (800166c <MX_ADC1_Init+0xc4>)
 8001612:	222c      	movs	r2, #44	@ 0x2c
 8001614:	2100      	movs	r1, #0
 8001616:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001618:	4b14      	ldr	r3, [pc, #80]	@ (800166c <MX_ADC1_Init+0xc4>)
 800161a:	2200      	movs	r2, #0
 800161c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800161e:	4b13      	ldr	r3, [pc, #76]	@ (800166c <MX_ADC1_Init+0xc4>)
 8001620:	2200      	movs	r2, #0
 8001622:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001624:	4b11      	ldr	r3, [pc, #68]	@ (800166c <MX_ADC1_Init+0xc4>)
 8001626:	223c      	movs	r2, #60	@ 0x3c
 8001628:	2100      	movs	r1, #0
 800162a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800162c:	4b0f      	ldr	r3, [pc, #60]	@ (800166c <MX_ADC1_Init+0xc4>)
 800162e:	2200      	movs	r2, #0
 8001630:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001632:	4b0e      	ldr	r3, [pc, #56]	@ (800166c <MX_ADC1_Init+0xc4>)
 8001634:	0018      	movs	r0, r3
 8001636:	f000 fbbb 	bl	8001db0 <HAL_ADC_Init>
 800163a:	1e03      	subs	r3, r0, #0
 800163c:	d001      	beq.n	8001642 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 800163e:	f000 f8ab 	bl	8001798 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	2201      	movs	r2, #1
 8001646:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	2201      	movs	r2, #1
 800164c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800164e:	1d3a      	adds	r2, r7, #4
 8001650:	4b06      	ldr	r3, [pc, #24]	@ (800166c <MX_ADC1_Init+0xc4>)
 8001652:	0011      	movs	r1, r2
 8001654:	0018      	movs	r0, r3
 8001656:	f000 fe39 	bl	80022cc <HAL_ADC_ConfigChannel>
 800165a:	1e03      	subs	r3, r0, #0
 800165c:	d001      	beq.n	8001662 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 800165e:	f000 f89b 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001662:	46c0      	nop			@ (mov r8, r8)
 8001664:	46bd      	mov	sp, r7
 8001666:	b004      	add	sp, #16
 8001668:	bd80      	pop	{r7, pc}
 800166a:	46c0      	nop			@ (mov r8, r8)
 800166c:	20000028 	.word	0x20000028
 8001670:	40012400 	.word	0x40012400

08001674 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001678:	4b23      	ldr	r3, [pc, #140]	@ (8001708 <MX_USART1_UART_Init+0x94>)
 800167a:	4a24      	ldr	r2, [pc, #144]	@ (800170c <MX_USART1_UART_Init+0x98>)
 800167c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800167e:	4b22      	ldr	r3, [pc, #136]	@ (8001708 <MX_USART1_UART_Init+0x94>)
 8001680:	22e1      	movs	r2, #225	@ 0xe1
 8001682:	0252      	lsls	r2, r2, #9
 8001684:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001686:	4b20      	ldr	r3, [pc, #128]	@ (8001708 <MX_USART1_UART_Init+0x94>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800168c:	4b1e      	ldr	r3, [pc, #120]	@ (8001708 <MX_USART1_UART_Init+0x94>)
 800168e:	2200      	movs	r2, #0
 8001690:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001692:	4b1d      	ldr	r3, [pc, #116]	@ (8001708 <MX_USART1_UART_Init+0x94>)
 8001694:	2200      	movs	r2, #0
 8001696:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001698:	4b1b      	ldr	r3, [pc, #108]	@ (8001708 <MX_USART1_UART_Init+0x94>)
 800169a:	220c      	movs	r2, #12
 800169c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169e:	4b1a      	ldr	r3, [pc, #104]	@ (8001708 <MX_USART1_UART_Init+0x94>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a4:	4b18      	ldr	r3, [pc, #96]	@ (8001708 <MX_USART1_UART_Init+0x94>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016aa:	4b17      	ldr	r3, [pc, #92]	@ (8001708 <MX_USART1_UART_Init+0x94>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016b0:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <MX_USART1_UART_Init+0x94>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016b6:	4b14      	ldr	r3, [pc, #80]	@ (8001708 <MX_USART1_UART_Init+0x94>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016bc:	4b12      	ldr	r3, [pc, #72]	@ (8001708 <MX_USART1_UART_Init+0x94>)
 80016be:	0018      	movs	r0, r3
 80016c0:	f001 fedc 	bl	800347c <HAL_UART_Init>
 80016c4:	1e03      	subs	r3, r0, #0
 80016c6:	d001      	beq.n	80016cc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80016c8:	f000 f866 	bl	8001798 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001708 <MX_USART1_UART_Init+0x94>)
 80016ce:	2100      	movs	r1, #0
 80016d0:	0018      	movs	r0, r3
 80016d2:	f002 fb15 	bl	8003d00 <HAL_UARTEx_SetTxFifoThreshold>
 80016d6:	1e03      	subs	r3, r0, #0
 80016d8:	d001      	beq.n	80016de <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80016da:	f000 f85d 	bl	8001798 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016de:	4b0a      	ldr	r3, [pc, #40]	@ (8001708 <MX_USART1_UART_Init+0x94>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	0018      	movs	r0, r3
 80016e4:	f002 fb4c 	bl	8003d80 <HAL_UARTEx_SetRxFifoThreshold>
 80016e8:	1e03      	subs	r3, r0, #0
 80016ea:	d001      	beq.n	80016f0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80016ec:	f000 f854 	bl	8001798 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80016f0:	4b05      	ldr	r3, [pc, #20]	@ (8001708 <MX_USART1_UART_Init+0x94>)
 80016f2:	0018      	movs	r0, r3
 80016f4:	f002 faca 	bl	8003c8c <HAL_UARTEx_DisableFifoMode>
 80016f8:	1e03      	subs	r3, r0, #0
 80016fa:	d001      	beq.n	8001700 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80016fc:	f000 f84c 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001700:	46c0      	nop			@ (mov r8, r8)
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	46c0      	nop			@ (mov r8, r8)
 8001708:	2000008c 	.word	0x2000008c
 800170c:	40013800 	.word	0x40013800

08001710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001710:	b590      	push	{r4, r7, lr}
 8001712:	b089      	sub	sp, #36	@ 0x24
 8001714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001716:	240c      	movs	r4, #12
 8001718:	193b      	adds	r3, r7, r4
 800171a:	0018      	movs	r0, r3
 800171c:	2314      	movs	r3, #20
 800171e:	001a      	movs	r2, r3
 8001720:	2100      	movs	r1, #0
 8001722:	f002 fbcd 	bl	8003ec0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	4b1b      	ldr	r3, [pc, #108]	@ (8001794 <MX_GPIO_Init+0x84>)
 8001728:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800172a:	4b1a      	ldr	r3, [pc, #104]	@ (8001794 <MX_GPIO_Init+0x84>)
 800172c:	2101      	movs	r1, #1
 800172e:	430a      	orrs	r2, r1
 8001730:	635a      	str	r2, [r3, #52]	@ 0x34
 8001732:	4b18      	ldr	r3, [pc, #96]	@ (8001794 <MX_GPIO_Init+0x84>)
 8001734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001736:	2201      	movs	r2, #1
 8001738:	4013      	ands	r3, r2
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800173e:	4b15      	ldr	r3, [pc, #84]	@ (8001794 <MX_GPIO_Init+0x84>)
 8001740:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001742:	4b14      	ldr	r3, [pc, #80]	@ (8001794 <MX_GPIO_Init+0x84>)
 8001744:	2102      	movs	r1, #2
 8001746:	430a      	orrs	r2, r1
 8001748:	635a      	str	r2, [r3, #52]	@ 0x34
 800174a:	4b12      	ldr	r3, [pc, #72]	@ (8001794 <MX_GPIO_Init+0x84>)
 800174c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800174e:	2202      	movs	r2, #2
 8001750:	4013      	ands	r3, r2
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, G_Pin|R_Pin|B_Pin, GPIO_PIN_SET);
 8001756:	23a0      	movs	r3, #160	@ 0xa0
 8001758:	05db      	lsls	r3, r3, #23
 800175a:	2201      	movs	r2, #1
 800175c:	2126      	movs	r1, #38	@ 0x26
 800175e:	0018      	movs	r0, r3
 8001760:	f001 fa26 	bl	8002bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : G_Pin R_Pin B_Pin */
  GPIO_InitStruct.Pin = G_Pin|R_Pin|B_Pin;
 8001764:	0021      	movs	r1, r4
 8001766:	187b      	adds	r3, r7, r1
 8001768:	2226      	movs	r2, #38	@ 0x26
 800176a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176c:	187b      	adds	r3, r7, r1
 800176e:	2201      	movs	r2, #1
 8001770:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	187b      	adds	r3, r7, r1
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	187b      	adds	r3, r7, r1
 800177a:	2200      	movs	r2, #0
 800177c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177e:	187a      	adds	r2, r7, r1
 8001780:	23a0      	movs	r3, #160	@ 0xa0
 8001782:	05db      	lsls	r3, r3, #23
 8001784:	0011      	movs	r1, r2
 8001786:	0018      	movs	r0, r3
 8001788:	f001 f8a8 	bl	80028dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800178c:	46c0      	nop			@ (mov r8, r8)
 800178e:	46bd      	mov	sp, r7
 8001790:	b009      	add	sp, #36	@ 0x24
 8001792:	bd90      	pop	{r4, r7, pc}
 8001794:	40021000 	.word	0x40021000

08001798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800179c:	b672      	cpsid	i
}
 800179e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017a0:	46c0      	nop			@ (mov r8, r8)
 80017a2:	e7fd      	b.n	80017a0 <Error_Handler+0x8>

080017a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017aa:	4b0f      	ldr	r3, [pc, #60]	@ (80017e8 <HAL_MspInit+0x44>)
 80017ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017ae:	4b0e      	ldr	r3, [pc, #56]	@ (80017e8 <HAL_MspInit+0x44>)
 80017b0:	2101      	movs	r1, #1
 80017b2:	430a      	orrs	r2, r1
 80017b4:	641a      	str	r2, [r3, #64]	@ 0x40
 80017b6:	4b0c      	ldr	r3, [pc, #48]	@ (80017e8 <HAL_MspInit+0x44>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ba:	2201      	movs	r2, #1
 80017bc:	4013      	ands	r3, r2
 80017be:	607b      	str	r3, [r7, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c2:	4b09      	ldr	r3, [pc, #36]	@ (80017e8 <HAL_MspInit+0x44>)
 80017c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017c6:	4b08      	ldr	r3, [pc, #32]	@ (80017e8 <HAL_MspInit+0x44>)
 80017c8:	2180      	movs	r1, #128	@ 0x80
 80017ca:	0549      	lsls	r1, r1, #21
 80017cc:	430a      	orrs	r2, r1
 80017ce:	63da      	str	r2, [r3, #60]	@ 0x3c
 80017d0:	4b05      	ldr	r3, [pc, #20]	@ (80017e8 <HAL_MspInit+0x44>)
 80017d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017d4:	2380      	movs	r3, #128	@ 0x80
 80017d6:	055b      	lsls	r3, r3, #21
 80017d8:	4013      	ands	r3, r2
 80017da:	603b      	str	r3, [r7, #0]
 80017dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017de:	46c0      	nop			@ (mov r8, r8)
 80017e0:	46bd      	mov	sp, r7
 80017e2:	b002      	add	sp, #8
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	46c0      	nop			@ (mov r8, r8)
 80017e8:	40021000 	.word	0x40021000

080017ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017ec:	b590      	push	{r4, r7, lr}
 80017ee:	b091      	sub	sp, #68	@ 0x44
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	232c      	movs	r3, #44	@ 0x2c
 80017f6:	18fb      	adds	r3, r7, r3
 80017f8:	0018      	movs	r0, r3
 80017fa:	2314      	movs	r3, #20
 80017fc:	001a      	movs	r2, r3
 80017fe:	2100      	movs	r1, #0
 8001800:	f002 fb5e 	bl	8003ec0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001804:	2410      	movs	r4, #16
 8001806:	193b      	adds	r3, r7, r4
 8001808:	0018      	movs	r0, r3
 800180a:	231c      	movs	r3, #28
 800180c:	001a      	movs	r2, r3
 800180e:	2100      	movs	r1, #0
 8001810:	f002 fb56 	bl	8003ec0 <memset>
  if(hadc->Instance==ADC1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a1f      	ldr	r2, [pc, #124]	@ (8001898 <HAL_ADC_MspInit+0xac>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d138      	bne.n	8001890 <HAL_ADC_MspInit+0xa4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800181e:	193b      	adds	r3, r7, r4
 8001820:	2220      	movs	r2, #32
 8001822:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001824:	193b      	adds	r3, r7, r4
 8001826:	2200      	movs	r2, #0
 8001828:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800182a:	193b      	adds	r3, r7, r4
 800182c:	0018      	movs	r0, r3
 800182e:	f001 fd39 	bl	80032a4 <HAL_RCCEx_PeriphCLKConfig>
 8001832:	1e03      	subs	r3, r0, #0
 8001834:	d001      	beq.n	800183a <HAL_ADC_MspInit+0x4e>
    {
      Error_Handler();
 8001836:	f7ff ffaf 	bl	8001798 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800183a:	4b18      	ldr	r3, [pc, #96]	@ (800189c <HAL_ADC_MspInit+0xb0>)
 800183c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800183e:	4b17      	ldr	r3, [pc, #92]	@ (800189c <HAL_ADC_MspInit+0xb0>)
 8001840:	2180      	movs	r1, #128	@ 0x80
 8001842:	0349      	lsls	r1, r1, #13
 8001844:	430a      	orrs	r2, r1
 8001846:	641a      	str	r2, [r3, #64]	@ 0x40
 8001848:	4b14      	ldr	r3, [pc, #80]	@ (800189c <HAL_ADC_MspInit+0xb0>)
 800184a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800184c:	2380      	movs	r3, #128	@ 0x80
 800184e:	035b      	lsls	r3, r3, #13
 8001850:	4013      	ands	r3, r2
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001856:	4b11      	ldr	r3, [pc, #68]	@ (800189c <HAL_ADC_MspInit+0xb0>)
 8001858:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800185a:	4b10      	ldr	r3, [pc, #64]	@ (800189c <HAL_ADC_MspInit+0xb0>)
 800185c:	2101      	movs	r1, #1
 800185e:	430a      	orrs	r2, r1
 8001860:	635a      	str	r2, [r3, #52]	@ 0x34
 8001862:	4b0e      	ldr	r3, [pc, #56]	@ (800189c <HAL_ADC_MspInit+0xb0>)
 8001864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001866:	2201      	movs	r2, #1
 8001868:	4013      	ands	r3, r2
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800186e:	212c      	movs	r1, #44	@ 0x2c
 8001870:	187b      	adds	r3, r7, r1
 8001872:	2201      	movs	r2, #1
 8001874:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001876:	187b      	adds	r3, r7, r1
 8001878:	2203      	movs	r2, #3
 800187a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	187b      	adds	r3, r7, r1
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001882:	187a      	adds	r2, r7, r1
 8001884:	23a0      	movs	r3, #160	@ 0xa0
 8001886:	05db      	lsls	r3, r3, #23
 8001888:	0011      	movs	r1, r2
 800188a:	0018      	movs	r0, r3
 800188c:	f001 f826 	bl	80028dc <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001890:	46c0      	nop			@ (mov r8, r8)
 8001892:	46bd      	mov	sp, r7
 8001894:	b011      	add	sp, #68	@ 0x44
 8001896:	bd90      	pop	{r4, r7, pc}
 8001898:	40012400 	.word	0x40012400
 800189c:	40021000 	.word	0x40021000

080018a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a0:	b590      	push	{r4, r7, lr}
 80018a2:	b093      	sub	sp, #76	@ 0x4c
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	2334      	movs	r3, #52	@ 0x34
 80018aa:	18fb      	adds	r3, r7, r3
 80018ac:	0018      	movs	r0, r3
 80018ae:	2314      	movs	r3, #20
 80018b0:	001a      	movs	r2, r3
 80018b2:	2100      	movs	r1, #0
 80018b4:	f002 fb04 	bl	8003ec0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018b8:	2418      	movs	r4, #24
 80018ba:	193b      	adds	r3, r7, r4
 80018bc:	0018      	movs	r0, r3
 80018be:	231c      	movs	r3, #28
 80018c0:	001a      	movs	r2, r3
 80018c2:	2100      	movs	r1, #0
 80018c4:	f002 fafc 	bl	8003ec0 <memset>
  if(huart->Instance==USART1)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a34      	ldr	r2, [pc, #208]	@ (80019a0 <HAL_UART_MspInit+0x100>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d162      	bne.n	8001998 <HAL_UART_MspInit+0xf8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80018d2:	193b      	adds	r3, r7, r4
 80018d4:	2201      	movs	r2, #1
 80018d6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80018d8:	193b      	adds	r3, r7, r4
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018de:	193b      	adds	r3, r7, r4
 80018e0:	0018      	movs	r0, r3
 80018e2:	f001 fcdf 	bl	80032a4 <HAL_RCCEx_PeriphCLKConfig>
 80018e6:	1e03      	subs	r3, r0, #0
 80018e8:	d001      	beq.n	80018ee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80018ea:	f7ff ff55 	bl	8001798 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018ee:	4b2d      	ldr	r3, [pc, #180]	@ (80019a4 <HAL_UART_MspInit+0x104>)
 80018f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018f2:	4b2c      	ldr	r3, [pc, #176]	@ (80019a4 <HAL_UART_MspInit+0x104>)
 80018f4:	2180      	movs	r1, #128	@ 0x80
 80018f6:	01c9      	lsls	r1, r1, #7
 80018f8:	430a      	orrs	r2, r1
 80018fa:	641a      	str	r2, [r3, #64]	@ 0x40
 80018fc:	4b29      	ldr	r3, [pc, #164]	@ (80019a4 <HAL_UART_MspInit+0x104>)
 80018fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001900:	2380      	movs	r3, #128	@ 0x80
 8001902:	01db      	lsls	r3, r3, #7
 8001904:	4013      	ands	r3, r2
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190a:	4b26      	ldr	r3, [pc, #152]	@ (80019a4 <HAL_UART_MspInit+0x104>)
 800190c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800190e:	4b25      	ldr	r3, [pc, #148]	@ (80019a4 <HAL_UART_MspInit+0x104>)
 8001910:	2101      	movs	r1, #1
 8001912:	430a      	orrs	r2, r1
 8001914:	635a      	str	r2, [r3, #52]	@ 0x34
 8001916:	4b23      	ldr	r3, [pc, #140]	@ (80019a4 <HAL_UART_MspInit+0x104>)
 8001918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800191a:	2201      	movs	r2, #1
 800191c:	4013      	ands	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001922:	4b20      	ldr	r3, [pc, #128]	@ (80019a4 <HAL_UART_MspInit+0x104>)
 8001924:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001926:	4b1f      	ldr	r3, [pc, #124]	@ (80019a4 <HAL_UART_MspInit+0x104>)
 8001928:	2102      	movs	r1, #2
 800192a:	430a      	orrs	r2, r1
 800192c:	635a      	str	r2, [r3, #52]	@ 0x34
 800192e:	4b1d      	ldr	r3, [pc, #116]	@ (80019a4 <HAL_UART_MspInit+0x104>)
 8001930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001932:	2202      	movs	r2, #2
 8001934:	4013      	ands	r3, r2
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800193a:	2134      	movs	r1, #52	@ 0x34
 800193c:	187b      	adds	r3, r7, r1
 800193e:	2280      	movs	r2, #128	@ 0x80
 8001940:	0052      	lsls	r2, r2, #1
 8001942:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001944:	000c      	movs	r4, r1
 8001946:	193b      	adds	r3, r7, r4
 8001948:	2202      	movs	r2, #2
 800194a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	193b      	adds	r3, r7, r4
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001952:	193b      	adds	r3, r7, r4
 8001954:	2200      	movs	r2, #0
 8001956:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF14_USART1;
 8001958:	193b      	adds	r3, r7, r4
 800195a:	220e      	movs	r2, #14
 800195c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195e:	193a      	adds	r2, r7, r4
 8001960:	23a0      	movs	r3, #160	@ 0xa0
 8001962:	05db      	lsls	r3, r3, #23
 8001964:	0011      	movs	r1, r2
 8001966:	0018      	movs	r0, r3
 8001968:	f000 ffb8 	bl	80028dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800196c:	0021      	movs	r1, r4
 800196e:	187b      	adds	r3, r7, r1
 8001970:	2240      	movs	r2, #64	@ 0x40
 8001972:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	187b      	adds	r3, r7, r1
 8001976:	2202      	movs	r2, #2
 8001978:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	187b      	adds	r3, r7, r1
 800197c:	2200      	movs	r2, #0
 800197e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001980:	187b      	adds	r3, r7, r1
 8001982:	2200      	movs	r2, #0
 8001984:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001986:	187b      	adds	r3, r7, r1
 8001988:	2200      	movs	r2, #0
 800198a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198c:	187b      	adds	r3, r7, r1
 800198e:	4a06      	ldr	r2, [pc, #24]	@ (80019a8 <HAL_UART_MspInit+0x108>)
 8001990:	0019      	movs	r1, r3
 8001992:	0010      	movs	r0, r2
 8001994:	f000 ffa2 	bl	80028dc <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001998:	46c0      	nop			@ (mov r8, r8)
 800199a:	46bd      	mov	sp, r7
 800199c:	b013      	add	sp, #76	@ 0x4c
 800199e:	bd90      	pop	{r4, r7, pc}
 80019a0:	40013800 	.word	0x40013800
 80019a4:	40021000 	.word	0x40021000
 80019a8:	50000400 	.word	0x50000400

080019ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019b0:	46c0      	nop			@ (mov r8, r8)
 80019b2:	e7fd      	b.n	80019b0 <NMI_Handler+0x4>

080019b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019b8:	46c0      	nop			@ (mov r8, r8)
 80019ba:	e7fd      	b.n	80019b8 <HardFault_Handler+0x4>

080019bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80019c0:	46c0      	nop			@ (mov r8, r8)
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ca:	46c0      	nop			@ (mov r8, r8)
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019d4:	f000 f89a 	bl	8001b0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d8:	46c0      	nop			@ (mov r8, r8)
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019e4:	4b03      	ldr	r3, [pc, #12]	@ (80019f4 <SystemInit+0x14>)
 80019e6:	2280      	movs	r2, #128	@ 0x80
 80019e8:	0512      	lsls	r2, r2, #20
 80019ea:	609a      	str	r2, [r3, #8]
#endif
}
 80019ec:	46c0      	nop			@ (mov r8, r8)
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	46c0      	nop			@ (mov r8, r8)
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019f8:	480d      	ldr	r0, [pc, #52]	@ (8001a30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80019fc:	f7ff fff0 	bl	80019e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001a00:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001a02:	e003      	b.n	8001a0c <LoopCopyDataInit>

08001a04 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001a04:	4b0b      	ldr	r3, [pc, #44]	@ (8001a34 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001a06:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001a08:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001a0a:	3104      	adds	r1, #4

08001a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001a0c:	480a      	ldr	r0, [pc, #40]	@ (8001a38 <LoopForever+0xa>)
  ldr r3, =_edata
 8001a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a3c <LoopForever+0xe>)
  adds r2, r0, r1
 8001a10:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001a12:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001a14:	d3f6      	bcc.n	8001a04 <CopyDataInit>
  ldr r2, =_sbss
 8001a16:	4a0a      	ldr	r2, [pc, #40]	@ (8001a40 <LoopForever+0x12>)
  b LoopFillZerobss
 8001a18:	e002      	b.n	8001a20 <LoopFillZerobss>

08001a1a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001a1a:	2300      	movs	r3, #0
  str  r3, [r2]
 8001a1c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a1e:	3204      	adds	r2, #4

08001a20 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001a20:	4b08      	ldr	r3, [pc, #32]	@ (8001a44 <LoopForever+0x16>)
  cmp r2, r3
 8001a22:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001a24:	d3f9      	bcc.n	8001a1a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001a26:	f002 fa53 	bl	8003ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a2a:	f7ff fc87 	bl	800133c <main>

08001a2e <LoopForever>:

LoopForever:
    b LoopForever
 8001a2e:	e7fe      	b.n	8001a2e <LoopForever>
  ldr   r0, =_estack
 8001a30:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8001a34:	0800407c 	.word	0x0800407c
  ldr r0, =_sdata
 8001a38:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001a3c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001a40:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001a44:	20000390 	.word	0x20000390

08001a48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a48:	e7fe      	b.n	8001a48 <ADC1_IRQHandler>

08001a4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a50:	1dfb      	adds	r3, r7, #7
 8001a52:	2200      	movs	r2, #0
 8001a54:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a56:	2003      	movs	r0, #3
 8001a58:	f000 f80e 	bl	8001a78 <HAL_InitTick>
 8001a5c:	1e03      	subs	r3, r0, #0
 8001a5e:	d003      	beq.n	8001a68 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8001a60:	1dfb      	adds	r3, r7, #7
 8001a62:	2201      	movs	r2, #1
 8001a64:	701a      	strb	r2, [r3, #0]
 8001a66:	e001      	b.n	8001a6c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a68:	f7ff fe9c 	bl	80017a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a6c:	1dfb      	adds	r3, r7, #7
 8001a6e:	781b      	ldrb	r3, [r3, #0]
}
 8001a70:	0018      	movs	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	b002      	add	sp, #8
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a78:	b590      	push	{r4, r7, lr}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a80:	230f      	movs	r3, #15
 8001a82:	18fb      	adds	r3, r7, r3
 8001a84:	2200      	movs	r2, #0
 8001a86:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8001a88:	4b1d      	ldr	r3, [pc, #116]	@ (8001b00 <HAL_InitTick+0x88>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d02b      	beq.n	8001ae8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8001a90:	4b1c      	ldr	r3, [pc, #112]	@ (8001b04 <HAL_InitTick+0x8c>)
 8001a92:	681c      	ldr	r4, [r3, #0]
 8001a94:	4b1a      	ldr	r3, [pc, #104]	@ (8001b00 <HAL_InitTick+0x88>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	0019      	movs	r1, r3
 8001a9a:	23fa      	movs	r3, #250	@ 0xfa
 8001a9c:	0098      	lsls	r0, r3, #2
 8001a9e:	f7fe fb33 	bl	8000108 <__udivsi3>
 8001aa2:	0003      	movs	r3, r0
 8001aa4:	0019      	movs	r1, r3
 8001aa6:	0020      	movs	r0, r4
 8001aa8:	f7fe fb2e 	bl	8000108 <__udivsi3>
 8001aac:	0003      	movs	r3, r0
 8001aae:	0018      	movs	r0, r3
 8001ab0:	f000 ff07 	bl	80028c2 <HAL_SYSTICK_Config>
 8001ab4:	1e03      	subs	r3, r0, #0
 8001ab6:	d112      	bne.n	8001ade <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b03      	cmp	r3, #3
 8001abc:	d80a      	bhi.n	8001ad4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	425b      	negs	r3, r3
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	f000 fee6 	bl	8002898 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001acc:	4b0e      	ldr	r3, [pc, #56]	@ (8001b08 <HAL_InitTick+0x90>)
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	e00d      	b.n	8001af0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001ad4:	230f      	movs	r3, #15
 8001ad6:	18fb      	adds	r3, r7, r3
 8001ad8:	2201      	movs	r2, #1
 8001ada:	701a      	strb	r2, [r3, #0]
 8001adc:	e008      	b.n	8001af0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ade:	230f      	movs	r3, #15
 8001ae0:	18fb      	adds	r3, r7, r3
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	701a      	strb	r2, [r3, #0]
 8001ae6:	e003      	b.n	8001af0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ae8:	230f      	movs	r3, #15
 8001aea:	18fb      	adds	r3, r7, r3
 8001aec:	2201      	movs	r2, #1
 8001aee:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001af0:	230f      	movs	r3, #15
 8001af2:	18fb      	adds	r3, r7, r3
 8001af4:	781b      	ldrb	r3, [r3, #0]
}
 8001af6:	0018      	movs	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	b005      	add	sp, #20
 8001afc:	bd90      	pop	{r4, r7, pc}
 8001afe:	46c0      	nop			@ (mov r8, r8)
 8001b00:	20000008 	.word	0x20000008
 8001b04:	20000000 	.word	0x20000000
 8001b08:	20000004 	.word	0x20000004

08001b0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b10:	4b05      	ldr	r3, [pc, #20]	@ (8001b28 <HAL_IncTick+0x1c>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	001a      	movs	r2, r3
 8001b16:	4b05      	ldr	r3, [pc, #20]	@ (8001b2c <HAL_IncTick+0x20>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	18d2      	adds	r2, r2, r3
 8001b1c:	4b03      	ldr	r3, [pc, #12]	@ (8001b2c <HAL_IncTick+0x20>)
 8001b1e:	601a      	str	r2, [r3, #0]
}
 8001b20:	46c0      	nop			@ (mov r8, r8)
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	46c0      	nop			@ (mov r8, r8)
 8001b28:	20000008 	.word	0x20000008
 8001b2c:	2000038c 	.word	0x2000038c

08001b30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  return uwTick;
 8001b34:	4b02      	ldr	r3, [pc, #8]	@ (8001b40 <HAL_GetTick+0x10>)
 8001b36:	681b      	ldr	r3, [r3, #0]
}
 8001b38:	0018      	movs	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	46c0      	nop			@ (mov r8, r8)
 8001b40:	2000038c 	.word	0x2000038c

08001b44 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a05      	ldr	r2, [pc, #20]	@ (8001b68 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001b54:	401a      	ands	r2, r3
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	601a      	str	r2, [r3, #0]
}
 8001b5e:	46c0      	nop			@ (mov r8, r8)
 8001b60:	46bd      	mov	sp, r7
 8001b62:	b002      	add	sp, #8
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	46c0      	nop			@ (mov r8, r8)
 8001b68:	ff3fffff 	.word	0xff3fffff

08001b6c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	23c0      	movs	r3, #192	@ 0xc0
 8001b7a:	041b      	lsls	r3, r3, #16
 8001b7c:	4013      	ands	r3, r2
}
 8001b7e:	0018      	movs	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	b002      	add	sp, #8
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b084      	sub	sp, #16
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	60f8      	str	r0, [r7, #12]
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	2104      	movs	r1, #4
 8001b9a:	400a      	ands	r2, r1
 8001b9c:	2107      	movs	r1, #7
 8001b9e:	4091      	lsls	r1, r2
 8001ba0:	000a      	movs	r2, r1
 8001ba2:	43d2      	mvns	r2, r2
 8001ba4:	401a      	ands	r2, r3
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	2104      	movs	r1, #4
 8001baa:	400b      	ands	r3, r1
 8001bac:	6879      	ldr	r1, [r7, #4]
 8001bae:	4099      	lsls	r1, r3
 8001bb0:	000b      	movs	r3, r1
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001bb8:	46c0      	nop			@ (mov r8, r8)
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	b004      	add	sp, #16
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	2104      	movs	r1, #4
 8001bd2:	400a      	ands	r2, r1
 8001bd4:	2107      	movs	r1, #7
 8001bd6:	4091      	lsls	r1, r2
 8001bd8:	000a      	movs	r2, r1
 8001bda:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	2104      	movs	r1, #4
 8001be0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001be2:	40da      	lsrs	r2, r3
 8001be4:	0013      	movs	r3, r2
}
 8001be6:	0018      	movs	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	b002      	add	sp, #8
 8001bec:	bd80      	pop	{r7, pc}

08001bee <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68da      	ldr	r2, [r3, #12]
 8001bfa:	23c0      	movs	r3, #192	@ 0xc0
 8001bfc:	011b      	lsls	r3, r3, #4
 8001bfe:	4013      	ands	r3, r2
 8001c00:	d101      	bne.n	8001c06 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c02:	2301      	movs	r3, #1
 8001c04:	e000      	b.n	8001c08 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	0018      	movs	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	b002      	add	sp, #8
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c20:	68ba      	ldr	r2, [r7, #8]
 8001c22:	211f      	movs	r1, #31
 8001c24:	400a      	ands	r2, r1
 8001c26:	210f      	movs	r1, #15
 8001c28:	4091      	lsls	r1, r2
 8001c2a:	000a      	movs	r2, r1
 8001c2c:	43d2      	mvns	r2, r2
 8001c2e:	401a      	ands	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	0e9b      	lsrs	r3, r3, #26
 8001c34:	210f      	movs	r1, #15
 8001c36:	4019      	ands	r1, r3
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	201f      	movs	r0, #31
 8001c3c:	4003      	ands	r3, r0
 8001c3e:	4099      	lsls	r1, r3
 8001c40:	000b      	movs	r3, r1
 8001c42:	431a      	orrs	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c48:	46c0      	nop			@ (mov r8, r8)
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	b004      	add	sp, #16
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	025b      	lsls	r3, r3, #9
 8001c62:	0a5b      	lsrs	r3, r3, #9
 8001c64:	431a      	orrs	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c6a:	46c0      	nop			@ (mov r8, r8)
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	b002      	add	sp, #8
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	0252      	lsls	r2, r2, #9
 8001c84:	0a52      	lsrs	r2, r2, #9
 8001c86:	43d2      	mvns	r2, r2
 8001c88:	401a      	ands	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c8e:	46c0      	nop			@ (mov r8, r8)
 8001c90:	46bd      	mov	sp, r7
 8001c92:	b002      	add	sp, #8
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	68ba      	ldr	r2, [r7, #8]
 8001caa:	0212      	lsls	r2, r2, #8
 8001cac:	43d2      	mvns	r2, r2
 8001cae:	401a      	ands	r2, r3
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	021b      	lsls	r3, r3, #8
 8001cb4:	6879      	ldr	r1, [r7, #4]
 8001cb6:	400b      	ands	r3, r1
 8001cb8:	4904      	ldr	r1, [pc, #16]	@ (8001ccc <LL_ADC_SetChannelSamplingTime+0x34>)
 8001cba:	400b      	ands	r3, r1
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001cc2:	46c0      	nop			@ (mov r8, r8)
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	b004      	add	sp, #16
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	46c0      	nop			@ (mov r8, r8)
 8001ccc:	7fffff00 	.word	0x7fffff00

08001cd0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	4a05      	ldr	r2, [pc, #20]	@ (8001cf4 <LL_ADC_EnableInternalRegulator+0x24>)
 8001cde:	4013      	ands	r3, r2
 8001ce0:	2280      	movs	r2, #128	@ 0x80
 8001ce2:	0552      	lsls	r2, r2, #21
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001cea:	46c0      	nop			@ (mov r8, r8)
 8001cec:	46bd      	mov	sp, r7
 8001cee:	b002      	add	sp, #8
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	46c0      	nop			@ (mov r8, r8)
 8001cf4:	6fffffe8 	.word	0x6fffffe8

08001cf8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	2380      	movs	r3, #128	@ 0x80
 8001d06:	055b      	lsls	r3, r3, #21
 8001d08:	401a      	ands	r2, r3
 8001d0a:	2380      	movs	r3, #128	@ 0x80
 8001d0c:	055b      	lsls	r3, r3, #21
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d101      	bne.n	8001d16 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001d12:	2301      	movs	r3, #1
 8001d14:	e000      	b.n	8001d18 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	0018      	movs	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	b002      	add	sp, #8
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	4a04      	ldr	r2, [pc, #16]	@ (8001d40 <LL_ADC_Enable+0x20>)
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2201      	movs	r2, #1
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001d38:	46c0      	nop			@ (mov r8, r8)
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	b002      	add	sp, #8
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	7fffffe8 	.word	0x7fffffe8

08001d44 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2201      	movs	r2, #1
 8001d52:	4013      	ands	r3, r2
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d101      	bne.n	8001d5c <LL_ADC_IsEnabled+0x18>
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e000      	b.n	8001d5e <LL_ADC_IsEnabled+0x1a>
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	0018      	movs	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	b002      	add	sp, #8
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	4a04      	ldr	r2, [pc, #16]	@ (8001d88 <LL_ADC_REG_StartConversion+0x20>)
 8001d76:	4013      	ands	r3, r2
 8001d78:	2204      	movs	r2, #4
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d80:	46c0      	nop			@ (mov r8, r8)
 8001d82:	46bd      	mov	sp, r7
 8001d84:	b002      	add	sp, #8
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	7fffffe8 	.word	0x7fffffe8

08001d8c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	2204      	movs	r2, #4
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d101      	bne.n	8001da4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	0018      	movs	r0, r3
 8001da8:	46bd      	mov	sp, r7
 8001daa:	b002      	add	sp, #8
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b088      	sub	sp, #32
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001db8:	231f      	movs	r3, #31
 8001dba:	18fb      	adds	r3, r7, r3
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e17e      	b.n	80020d4 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10a      	bne.n	8001df4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	0018      	movs	r0, r3
 8001de2:	f7ff fd03 	bl	80017ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2254      	movs	r2, #84	@ 0x54
 8001df0:	2100      	movs	r1, #0
 8001df2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	0018      	movs	r0, r3
 8001dfa:	f7ff ff7d 	bl	8001cf8 <LL_ADC_IsInternalRegulatorEnabled>
 8001dfe:	1e03      	subs	r3, r0, #0
 8001e00:	d114      	bne.n	8001e2c <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	0018      	movs	r0, r3
 8001e08:	f7ff ff62 	bl	8001cd0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001e0c:	4bb3      	ldr	r3, [pc, #716]	@ (80020dc <HAL_ADC_Init+0x32c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	49b3      	ldr	r1, [pc, #716]	@ (80020e0 <HAL_ADC_Init+0x330>)
 8001e12:	0018      	movs	r0, r3
 8001e14:	f7fe f978 	bl	8000108 <__udivsi3>
 8001e18:	0003      	movs	r3, r0
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e1e:	e002      	b.n	8001e26 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1f9      	bne.n	8001e20 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	0018      	movs	r0, r3
 8001e32:	f7ff ff61 	bl	8001cf8 <LL_ADC_IsInternalRegulatorEnabled>
 8001e36:	1e03      	subs	r3, r0, #0
 8001e38:	d10f      	bne.n	8001e5a <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e3e:	2210      	movs	r2, #16
 8001e40:	431a      	orrs	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001e52:	231f      	movs	r3, #31
 8001e54:	18fb      	adds	r3, r7, r3
 8001e56:	2201      	movs	r2, #1
 8001e58:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	0018      	movs	r0, r3
 8001e60:	f7ff ff94 	bl	8001d8c <LL_ADC_REG_IsConversionOngoing>
 8001e64:	0003      	movs	r3, r0
 8001e66:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e6c:	2210      	movs	r2, #16
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d000      	beq.n	8001e74 <HAL_ADC_Init+0xc4>
 8001e72:	e122      	b.n	80020ba <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d000      	beq.n	8001e7c <HAL_ADC_Init+0xcc>
 8001e7a:	e11e      	b.n	80020ba <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e80:	4a98      	ldr	r2, [pc, #608]	@ (80020e4 <HAL_ADC_Init+0x334>)
 8001e82:	4013      	ands	r3, r2
 8001e84:	2202      	movs	r2, #2
 8001e86:	431a      	orrs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	0018      	movs	r0, r3
 8001e92:	f7ff ff57 	bl	8001d44 <LL_ADC_IsEnabled>
 8001e96:	1e03      	subs	r3, r0, #0
 8001e98:	d000      	beq.n	8001e9c <HAL_ADC_Init+0xec>
 8001e9a:	e0ad      	b.n	8001ff8 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	7e1b      	ldrb	r3, [r3, #24]
 8001ea4:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001ea6:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	7e5b      	ldrb	r3, [r3, #25]
 8001eac:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001eae:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	7e9b      	ldrb	r3, [r3, #26]
 8001eb4:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001eb6:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d002      	beq.n	8001ec6 <HAL_ADC_Init+0x116>
 8001ec0:	2380      	movs	r3, #128	@ 0x80
 8001ec2:	015b      	lsls	r3, r3, #5
 8001ec4:	e000      	b.n	8001ec8 <HAL_ADC_Init+0x118>
 8001ec6:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001ec8:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001ece:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	da04      	bge.n	8001ee2 <HAL_ADC_Init+0x132>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	085b      	lsrs	r3, r3, #1
 8001ee0:	e001      	b.n	8001ee6 <HAL_ADC_Init+0x136>
 8001ee2:	2380      	movs	r3, #128	@ 0x80
 8001ee4:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001ee6:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	212c      	movs	r1, #44	@ 0x2c
 8001eec:	5c5b      	ldrb	r3, [r3, r1]
 8001eee:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001ef0:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2220      	movs	r2, #32
 8001efc:	5c9b      	ldrb	r3, [r3, r2]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d115      	bne.n	8001f2e <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	7e9b      	ldrb	r3, [r3, #26]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d105      	bne.n	8001f16 <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	2280      	movs	r2, #128	@ 0x80
 8001f0e:	0252      	lsls	r2, r2, #9
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
 8001f14:	e00b      	b.n	8001f2e <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f26:	2201      	movs	r2, #1
 8001f28:	431a      	orrs	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00a      	beq.n	8001f4c <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f3a:	23e0      	movs	r3, #224	@ 0xe0
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001f44:	4313      	orrs	r3, r2
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	4a65      	ldr	r2, [pc, #404]	@ (80020e8 <HAL_ADC_Init+0x338>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	0019      	movs	r1, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	0f9b      	lsrs	r3, r3, #30
 8001f68:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	223c      	movs	r2, #60	@ 0x3c
 8001f7a:	5c9b      	ldrb	r3, [r3, r2]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d111      	bne.n	8001fa4 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	0f9b      	lsrs	r3, r3, #30
 8001f86:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001f8c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001f92:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001f98:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	4a50      	ldr	r2, [pc, #320]	@ (80020ec <HAL_ADC_Init+0x33c>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	0019      	movs	r1, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	23c0      	movs	r3, #192	@ 0xc0
 8001fc0:	061b      	lsls	r3, r3, #24
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d018      	beq.n	8001ff8 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001fca:	2380      	movs	r3, #128	@ 0x80
 8001fcc:	05db      	lsls	r3, r3, #23
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d012      	beq.n	8001ff8 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001fd6:	2380      	movs	r3, #128	@ 0x80
 8001fd8:	061b      	lsls	r3, r3, #24
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d00c      	beq.n	8001ff8 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001fde:	4b44      	ldr	r3, [pc, #272]	@ (80020f0 <HAL_ADC_Init+0x340>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a44      	ldr	r2, [pc, #272]	@ (80020f4 <HAL_ADC_Init+0x344>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	0019      	movs	r1, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	23f0      	movs	r3, #240	@ 0xf0
 8001fee:	039b      	lsls	r3, r3, #14
 8001ff0:	401a      	ands	r2, r3
 8001ff2:	4b3f      	ldr	r3, [pc, #252]	@ (80020f0 <HAL_ADC_Init+0x340>)
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6818      	ldr	r0, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002000:	001a      	movs	r2, r3
 8002002:	2100      	movs	r1, #0
 8002004:	f7ff fdbf 	bl	8001b86 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6818      	ldr	r0, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002010:	4939      	ldr	r1, [pc, #228]	@ (80020f8 <HAL_ADC_Init+0x348>)
 8002012:	001a      	movs	r2, r3
 8002014:	f7ff fdb7 	bl	8001b86 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d109      	bne.n	8002034 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2110      	movs	r1, #16
 800202c:	4249      	negs	r1, r1
 800202e:	430a      	orrs	r2, r1
 8002030:	629a      	str	r2, [r3, #40]	@ 0x28
 8002032:	e018      	b.n	8002066 <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691a      	ldr	r2, [r3, #16]
 8002038:	2380      	movs	r3, #128	@ 0x80
 800203a:	039b      	lsls	r3, r3, #14
 800203c:	429a      	cmp	r2, r3
 800203e:	d112      	bne.n	8002066 <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	3b01      	subs	r3, #1
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	221c      	movs	r2, #28
 8002050:	4013      	ands	r3, r2
 8002052:	2210      	movs	r2, #16
 8002054:	4252      	negs	r2, r2
 8002056:	409a      	lsls	r2, r3
 8002058:	0011      	movs	r1, r2
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2100      	movs	r1, #0
 800206c:	0018      	movs	r0, r3
 800206e:	f7ff fda7 	bl	8001bc0 <LL_ADC_GetSamplingTimeCommonChannels>
 8002072:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002078:	429a      	cmp	r2, r3
 800207a:	d10b      	bne.n	8002094 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002086:	2203      	movs	r2, #3
 8002088:	4393      	bics	r3, r2
 800208a:	2201      	movs	r2, #1
 800208c:	431a      	orrs	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002092:	e01c      	b.n	80020ce <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002098:	2212      	movs	r2, #18
 800209a:	4393      	bics	r3, r2
 800209c:	2210      	movs	r2, #16
 800209e:	431a      	orrs	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a8:	2201      	movs	r2, #1
 80020aa:	431a      	orrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80020b0:	231f      	movs	r3, #31
 80020b2:	18fb      	adds	r3, r7, r3
 80020b4:	2201      	movs	r2, #1
 80020b6:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80020b8:	e009      	b.n	80020ce <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020be:	2210      	movs	r2, #16
 80020c0:	431a      	orrs	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80020c6:	231f      	movs	r3, #31
 80020c8:	18fb      	adds	r3, r7, r3
 80020ca:	2201      	movs	r2, #1
 80020cc:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80020ce:	231f      	movs	r3, #31
 80020d0:	18fb      	adds	r3, r7, r3
 80020d2:	781b      	ldrb	r3, [r3, #0]
}
 80020d4:	0018      	movs	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	b008      	add	sp, #32
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	20000000 	.word	0x20000000
 80020e0:	00030d40 	.word	0x00030d40
 80020e4:	fffffefd 	.word	0xfffffefd
 80020e8:	ffde0201 	.word	0xffde0201
 80020ec:	1ffffc02 	.word	0x1ffffc02
 80020f0:	40012708 	.word	0x40012708
 80020f4:	ffc3ffff 	.word	0xffc3ffff
 80020f8:	7fffff04 	.word	0x7fffff04

080020fc <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80020fc:	b5b0      	push	{r4, r5, r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	0018      	movs	r0, r3
 800210a:	f7ff fe3f 	bl	8001d8c <LL_ADC_REG_IsConversionOngoing>
 800210e:	1e03      	subs	r3, r0, #0
 8002110:	d135      	bne.n	800217e <HAL_ADC_Start+0x82>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2254      	movs	r2, #84	@ 0x54
 8002116:	5c9b      	ldrb	r3, [r3, r2]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d101      	bne.n	8002120 <HAL_ADC_Start+0x24>
 800211c:	2302      	movs	r3, #2
 800211e:	e035      	b.n	800218c <HAL_ADC_Start+0x90>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2254      	movs	r2, #84	@ 0x54
 8002124:	2101      	movs	r1, #1
 8002126:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002128:	250f      	movs	r5, #15
 800212a:	197c      	adds	r4, r7, r5
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	0018      	movs	r0, r3
 8002130:	f000 faa2 	bl	8002678 <ADC_Enable>
 8002134:	0003      	movs	r3, r0
 8002136:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002138:	197b      	adds	r3, r7, r5
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d119      	bne.n	8002174 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002144:	4a13      	ldr	r2, [pc, #76]	@ (8002194 <HAL_ADC_Start+0x98>)
 8002146:	4013      	ands	r3, r2
 8002148:	2280      	movs	r2, #128	@ 0x80
 800214a:	0052      	lsls	r2, r2, #1
 800214c:	431a      	orrs	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	221c      	movs	r2, #28
 800215e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2254      	movs	r2, #84	@ 0x54
 8002164:	2100      	movs	r1, #0
 8002166:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	0018      	movs	r0, r3
 800216e:	f7ff fdfb 	bl	8001d68 <LL_ADC_REG_StartConversion>
 8002172:	e008      	b.n	8002186 <HAL_ADC_Start+0x8a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2254      	movs	r2, #84	@ 0x54
 8002178:	2100      	movs	r1, #0
 800217a:	5499      	strb	r1, [r3, r2]
 800217c:	e003      	b.n	8002186 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800217e:	230f      	movs	r3, #15
 8002180:	18fb      	adds	r3, r7, r3
 8002182:	2202      	movs	r2, #2
 8002184:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8002186:	230f      	movs	r3, #15
 8002188:	18fb      	adds	r3, r7, r3
 800218a:	781b      	ldrb	r3, [r3, #0]
}
 800218c:	0018      	movs	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	b004      	add	sp, #16
 8002192:	bdb0      	pop	{r4, r5, r7, pc}
 8002194:	fffff0fe 	.word	0xfffff0fe

08002198 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	2b08      	cmp	r3, #8
 80021a8:	d102      	bne.n	80021b0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80021aa:	2308      	movs	r3, #8
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	e00f      	b.n	80021d0 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	2201      	movs	r2, #1
 80021b8:	4013      	ands	r3, r2
 80021ba:	d007      	beq.n	80021cc <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c0:	2220      	movs	r2, #32
 80021c2:	431a      	orrs	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e06c      	b.n	80022a6 <HAL_ADC_PollForConversion+0x10e>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80021cc:	2304      	movs	r3, #4
 80021ce:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80021d0:	f7ff fcae 	bl	8001b30 <HAL_GetTick>
 80021d4:	0003      	movs	r3, r0
 80021d6:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80021d8:	e019      	b.n	800220e <HAL_ADC_PollForConversion+0x76>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	3301      	adds	r3, #1
 80021de:	d016      	beq.n	800220e <HAL_ADC_PollForConversion+0x76>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80021e0:	f7ff fca6 	bl	8001b30 <HAL_GetTick>
 80021e4:	0002      	movs	r2, r0
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d302      	bcc.n	80021f6 <HAL_ADC_PollForConversion+0x5e>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10b      	bne.n	800220e <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021fa:	2204      	movs	r2, #4
 80021fc:	431a      	orrs	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2254      	movs	r2, #84	@ 0x54
 8002206:	2100      	movs	r1, #0
 8002208:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e04b      	b.n	80022a6 <HAL_ADC_PollForConversion+0x10e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	4013      	ands	r3, r2
 8002218:	d0df      	beq.n	80021da <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800221e:	2280      	movs	r2, #128	@ 0x80
 8002220:	0092      	lsls	r2, r2, #2
 8002222:	431a      	orrs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	0018      	movs	r0, r3
 800222e:	f7ff fcde 	bl	8001bee <LL_ADC_REG_IsTriggerSourceSWStart>
 8002232:	1e03      	subs	r3, r0, #0
 8002234:	d02e      	beq.n	8002294 <HAL_ADC_PollForConversion+0xfc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	7e9b      	ldrb	r3, [r3, #26]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d12a      	bne.n	8002294 <HAL_ADC_PollForConversion+0xfc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2208      	movs	r2, #8
 8002246:	4013      	ands	r3, r2
 8002248:	2b08      	cmp	r3, #8
 800224a:	d123      	bne.n	8002294 <HAL_ADC_PollForConversion+0xfc>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	0018      	movs	r0, r3
 8002252:	f7ff fd9b 	bl	8001d8c <LL_ADC_REG_IsConversionOngoing>
 8002256:	1e03      	subs	r3, r0, #0
 8002258:	d110      	bne.n	800227c <HAL_ADC_PollForConversion+0xe4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	210c      	movs	r1, #12
 8002266:	438a      	bics	r2, r1
 8002268:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800226e:	4a10      	ldr	r2, [pc, #64]	@ (80022b0 <HAL_ADC_PollForConversion+0x118>)
 8002270:	4013      	ands	r3, r2
 8002272:	2201      	movs	r2, #1
 8002274:	431a      	orrs	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	659a      	str	r2, [r3, #88]	@ 0x58
 800227a:	e00b      	b.n	8002294 <HAL_ADC_PollForConversion+0xfc>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002280:	2220      	movs	r2, #32
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800228c:	2201      	movs	r2, #1
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	7e1b      	ldrb	r3, [r3, #24]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d103      	bne.n	80022a4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	220c      	movs	r2, #12
 80022a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	0018      	movs	r0, r3
 80022a8:	46bd      	mov	sp, r7
 80022aa:	b004      	add	sp, #16
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	46c0      	nop			@ (mov r8, r8)
 80022b0:	fffffefe 	.word	0xfffffefe

080022b4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80022c2:	0018      	movs	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	b002      	add	sp, #8
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022d6:	2317      	movs	r3, #23
 80022d8:	18fb      	adds	r3, r7, r3
 80022da:	2200      	movs	r2, #0
 80022dc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2254      	movs	r2, #84	@ 0x54
 80022e6:	5c9b      	ldrb	r3, [r3, r2]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d101      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x24>
 80022ec:	2302      	movs	r3, #2
 80022ee:	e1be      	b.n	800266e <HAL_ADC_ConfigChannel+0x3a2>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2254      	movs	r2, #84	@ 0x54
 80022f4:	2101      	movs	r1, #1
 80022f6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	0018      	movs	r0, r3
 80022fe:	f7ff fd45 	bl	8001d8c <LL_ADC_REG_IsConversionOngoing>
 8002302:	1e03      	subs	r3, r0, #0
 8002304:	d000      	beq.n	8002308 <HAL_ADC_ConfigChannel+0x3c>
 8002306:	e1a1      	b.n	800264c <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b02      	cmp	r3, #2
 800230e:	d100      	bne.n	8002312 <HAL_ADC_ConfigChannel+0x46>
 8002310:	e152      	b.n	80025b8 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691a      	ldr	r2, [r3, #16]
 8002316:	2380      	movs	r3, #128	@ 0x80
 8002318:	061b      	lsls	r3, r3, #24
 800231a:	429a      	cmp	r2, r3
 800231c:	d004      	beq.n	8002328 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002322:	4ac2      	ldr	r2, [pc, #776]	@ (800262c <HAL_ADC_ConfigChannel+0x360>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d108      	bne.n	800233a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	0019      	movs	r1, r3
 8002332:	0010      	movs	r0, r2
 8002334:	f7ff fc8c 	bl	8001c50 <LL_ADC_REG_SetSequencerChAdd>
 8002338:	e0ed      	b.n	8002516 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	211f      	movs	r1, #31
 8002344:	400b      	ands	r3, r1
 8002346:	210f      	movs	r1, #15
 8002348:	4099      	lsls	r1, r3
 800234a:	000b      	movs	r3, r1
 800234c:	43db      	mvns	r3, r3
 800234e:	4013      	ands	r3, r2
 8002350:	0019      	movs	r1, r3
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	025b      	lsls	r3, r3, #9
 8002358:	0a5b      	lsrs	r3, r3, #9
 800235a:	d105      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x9c>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	0e9b      	lsrs	r3, r3, #26
 8002362:	221f      	movs	r2, #31
 8002364:	4013      	ands	r3, r2
 8002366:	e0bc      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x216>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2201      	movs	r2, #1
 800236e:	4013      	ands	r3, r2
 8002370:	d000      	beq.n	8002374 <HAL_ADC_ConfigChannel+0xa8>
 8002372:	e0b5      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x214>
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2202      	movs	r2, #2
 800237a:	4013      	ands	r3, r2
 800237c:	d000      	beq.n	8002380 <HAL_ADC_ConfigChannel+0xb4>
 800237e:	e0ad      	b.n	80024dc <HAL_ADC_ConfigChannel+0x210>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2204      	movs	r2, #4
 8002386:	4013      	ands	r3, r2
 8002388:	d000      	beq.n	800238c <HAL_ADC_ConfigChannel+0xc0>
 800238a:	e0a5      	b.n	80024d8 <HAL_ADC_ConfigChannel+0x20c>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2208      	movs	r2, #8
 8002392:	4013      	ands	r3, r2
 8002394:	d000      	beq.n	8002398 <HAL_ADC_ConfigChannel+0xcc>
 8002396:	e09d      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x208>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2210      	movs	r2, #16
 800239e:	4013      	ands	r3, r2
 80023a0:	d000      	beq.n	80023a4 <HAL_ADC_ConfigChannel+0xd8>
 80023a2:	e095      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x204>
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2220      	movs	r2, #32
 80023aa:	4013      	ands	r3, r2
 80023ac:	d000      	beq.n	80023b0 <HAL_ADC_ConfigChannel+0xe4>
 80023ae:	e08d      	b.n	80024cc <HAL_ADC_ConfigChannel+0x200>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2240      	movs	r2, #64	@ 0x40
 80023b6:	4013      	ands	r3, r2
 80023b8:	d000      	beq.n	80023bc <HAL_ADC_ConfigChannel+0xf0>
 80023ba:	e085      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x1fc>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2280      	movs	r2, #128	@ 0x80
 80023c2:	4013      	ands	r3, r2
 80023c4:	d000      	beq.n	80023c8 <HAL_ADC_ConfigChannel+0xfc>
 80023c6:	e07d      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x1f8>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	2380      	movs	r3, #128	@ 0x80
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	4013      	ands	r3, r2
 80023d2:	d000      	beq.n	80023d6 <HAL_ADC_ConfigChannel+0x10a>
 80023d4:	e074      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x1f4>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	2380      	movs	r3, #128	@ 0x80
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4013      	ands	r3, r2
 80023e0:	d000      	beq.n	80023e4 <HAL_ADC_ConfigChannel+0x118>
 80023e2:	e06b      	b.n	80024bc <HAL_ADC_ConfigChannel+0x1f0>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	2380      	movs	r3, #128	@ 0x80
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	4013      	ands	r3, r2
 80023ee:	d000      	beq.n	80023f2 <HAL_ADC_ConfigChannel+0x126>
 80023f0:	e062      	b.n	80024b8 <HAL_ADC_ConfigChannel+0x1ec>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	2380      	movs	r3, #128	@ 0x80
 80023f8:	011b      	lsls	r3, r3, #4
 80023fa:	4013      	ands	r3, r2
 80023fc:	d000      	beq.n	8002400 <HAL_ADC_ConfigChannel+0x134>
 80023fe:	e059      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x1e8>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	2380      	movs	r3, #128	@ 0x80
 8002406:	015b      	lsls	r3, r3, #5
 8002408:	4013      	ands	r3, r2
 800240a:	d151      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x1e4>
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	2380      	movs	r3, #128	@ 0x80
 8002412:	019b      	lsls	r3, r3, #6
 8002414:	4013      	ands	r3, r2
 8002416:	d149      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x1e0>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	2380      	movs	r3, #128	@ 0x80
 800241e:	01db      	lsls	r3, r3, #7
 8002420:	4013      	ands	r3, r2
 8002422:	d141      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x1dc>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	2380      	movs	r3, #128	@ 0x80
 800242a:	021b      	lsls	r3, r3, #8
 800242c:	4013      	ands	r3, r2
 800242e:	d139      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x1d8>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	2380      	movs	r3, #128	@ 0x80
 8002436:	025b      	lsls	r3, r3, #9
 8002438:	4013      	ands	r3, r2
 800243a:	d131      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x1d4>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	2380      	movs	r3, #128	@ 0x80
 8002442:	029b      	lsls	r3, r3, #10
 8002444:	4013      	ands	r3, r2
 8002446:	d129      	bne.n	800249c <HAL_ADC_ConfigChannel+0x1d0>
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	2380      	movs	r3, #128	@ 0x80
 800244e:	02db      	lsls	r3, r3, #11
 8002450:	4013      	ands	r3, r2
 8002452:	d121      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x1cc>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	2380      	movs	r3, #128	@ 0x80
 800245a:	031b      	lsls	r3, r3, #12
 800245c:	4013      	ands	r3, r2
 800245e:	d119      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x1c8>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	2380      	movs	r3, #128	@ 0x80
 8002466:	035b      	lsls	r3, r3, #13
 8002468:	4013      	ands	r3, r2
 800246a:	d111      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x1c4>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	2380      	movs	r3, #128	@ 0x80
 8002472:	039b      	lsls	r3, r3, #14
 8002474:	4013      	ands	r3, r2
 8002476:	d109      	bne.n	800248c <HAL_ADC_ConfigChannel+0x1c0>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	2380      	movs	r3, #128	@ 0x80
 800247e:	03db      	lsls	r3, r3, #15
 8002480:	4013      	ands	r3, r2
 8002482:	d001      	beq.n	8002488 <HAL_ADC_ConfigChannel+0x1bc>
 8002484:	2316      	movs	r3, #22
 8002486:	e02c      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x216>
 8002488:	2300      	movs	r3, #0
 800248a:	e02a      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x216>
 800248c:	2315      	movs	r3, #21
 800248e:	e028      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x216>
 8002490:	2314      	movs	r3, #20
 8002492:	e026      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x216>
 8002494:	2313      	movs	r3, #19
 8002496:	e024      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x216>
 8002498:	2312      	movs	r3, #18
 800249a:	e022      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x216>
 800249c:	2311      	movs	r3, #17
 800249e:	e020      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x216>
 80024a0:	2310      	movs	r3, #16
 80024a2:	e01e      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x216>
 80024a4:	230f      	movs	r3, #15
 80024a6:	e01c      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x216>
 80024a8:	230e      	movs	r3, #14
 80024aa:	e01a      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x216>
 80024ac:	230d      	movs	r3, #13
 80024ae:	e018      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x216>
 80024b0:	230c      	movs	r3, #12
 80024b2:	e016      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x216>
 80024b4:	230b      	movs	r3, #11
 80024b6:	e014      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x216>
 80024b8:	230a      	movs	r3, #10
 80024ba:	e012      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x216>
 80024bc:	2309      	movs	r3, #9
 80024be:	e010      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x216>
 80024c0:	2308      	movs	r3, #8
 80024c2:	e00e      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x216>
 80024c4:	2307      	movs	r3, #7
 80024c6:	e00c      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x216>
 80024c8:	2306      	movs	r3, #6
 80024ca:	e00a      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x216>
 80024cc:	2305      	movs	r3, #5
 80024ce:	e008      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x216>
 80024d0:	2304      	movs	r3, #4
 80024d2:	e006      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x216>
 80024d4:	2303      	movs	r3, #3
 80024d6:	e004      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x216>
 80024d8:	2302      	movs	r3, #2
 80024da:	e002      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x216>
 80024dc:	2301      	movs	r3, #1
 80024de:	e000      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x216>
 80024e0:	2300      	movs	r3, #0
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	6852      	ldr	r2, [r2, #4]
 80024e6:	201f      	movs	r0, #31
 80024e8:	4002      	ands	r2, r0
 80024ea:	4093      	lsls	r3, r2
 80024ec:	000a      	movs	r2, r1
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	089b      	lsrs	r3, r3, #2
 80024fa:	1c5a      	adds	r2, r3, #1
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	429a      	cmp	r2, r3
 8002502:	d808      	bhi.n	8002516 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6818      	ldr	r0, [r3, #0]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	6859      	ldr	r1, [r3, #4]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	001a      	movs	r2, r3
 8002512:	f7ff fb7d 	bl	8001c10 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6818      	ldr	r0, [r3, #0]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	6819      	ldr	r1, [r3, #0]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	001a      	movs	r2, r3
 8002524:	f7ff fbb8 	bl	8001c98 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	db00      	blt.n	8002532 <HAL_ADC_ConfigChannel+0x266>
 8002530:	e096      	b.n	8002660 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002532:	4b3f      	ldr	r3, [pc, #252]	@ (8002630 <HAL_ADC_ConfigChannel+0x364>)
 8002534:	0018      	movs	r0, r3
 8002536:	f7ff fb19 	bl	8001b6c <LL_ADC_GetCommonPathInternalCh>
 800253a:	0003      	movs	r3, r0
 800253c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a3c      	ldr	r2, [pc, #240]	@ (8002634 <HAL_ADC_ConfigChannel+0x368>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d123      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	2380      	movs	r3, #128	@ 0x80
 800254c:	041b      	lsls	r3, r3, #16
 800254e:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002550:	d11e      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	2280      	movs	r2, #128	@ 0x80
 8002556:	0412      	lsls	r2, r2, #16
 8002558:	4313      	orrs	r3, r2
 800255a:	4a35      	ldr	r2, [pc, #212]	@ (8002630 <HAL_ADC_ConfigChannel+0x364>)
 800255c:	0019      	movs	r1, r3
 800255e:	0010      	movs	r0, r2
 8002560:	f7ff faf0 	bl	8001b44 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8002564:	4b34      	ldr	r3, [pc, #208]	@ (8002638 <HAL_ADC_ConfigChannel+0x36c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4934      	ldr	r1, [pc, #208]	@ (800263c <HAL_ADC_ConfigChannel+0x370>)
 800256a:	0018      	movs	r0, r3
 800256c:	f7fd fdcc 	bl	8000108 <__udivsi3>
 8002570:	0003      	movs	r3, r0
 8002572:	001a      	movs	r2, r3
 8002574:	0013      	movs	r3, r2
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	189b      	adds	r3, r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	3301      	adds	r3, #1
 800257e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002580:	e002      	b.n	8002588 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	3b01      	subs	r3, #1
 8002586:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1f9      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800258e:	e067      	b.n	8002660 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a2a      	ldr	r2, [pc, #168]	@ (8002640 <HAL_ADC_ConfigChannel+0x374>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d162      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	2380      	movs	r3, #128	@ 0x80
 800259e:	03db      	lsls	r3, r3, #15
 80025a0:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80025a2:	d15d      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	2280      	movs	r2, #128	@ 0x80
 80025a8:	03d2      	lsls	r2, r2, #15
 80025aa:	4313      	orrs	r3, r2
 80025ac:	4a20      	ldr	r2, [pc, #128]	@ (8002630 <HAL_ADC_ConfigChannel+0x364>)
 80025ae:	0019      	movs	r1, r3
 80025b0:	0010      	movs	r0, r2
 80025b2:	f7ff fac7 	bl	8001b44 <LL_ADC_SetCommonPathInternalCh>
 80025b6:	e053      	b.n	8002660 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	2380      	movs	r3, #128	@ 0x80
 80025be:	061b      	lsls	r3, r3, #24
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d004      	beq.n	80025ce <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80025c8:	4a18      	ldr	r2, [pc, #96]	@ (800262c <HAL_ADC_ConfigChannel+0x360>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d107      	bne.n	80025de <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	0019      	movs	r1, r3
 80025d8:	0010      	movs	r0, r2
 80025da:	f7ff fb4a 	bl	8001c72 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	da3c      	bge.n	8002660 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025e6:	4b12      	ldr	r3, [pc, #72]	@ (8002630 <HAL_ADC_ConfigChannel+0x364>)
 80025e8:	0018      	movs	r0, r3
 80025ea:	f7ff fabf 	bl	8001b6c <LL_ADC_GetCommonPathInternalCh>
 80025ee:	0003      	movs	r3, r0
 80025f0:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a0f      	ldr	r2, [pc, #60]	@ (8002634 <HAL_ADC_ConfigChannel+0x368>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d108      	bne.n	800260e <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	4a11      	ldr	r2, [pc, #68]	@ (8002644 <HAL_ADC_ConfigChannel+0x378>)
 8002600:	4013      	ands	r3, r2
 8002602:	4a0b      	ldr	r2, [pc, #44]	@ (8002630 <HAL_ADC_ConfigChannel+0x364>)
 8002604:	0019      	movs	r1, r3
 8002606:	0010      	movs	r0, r2
 8002608:	f7ff fa9c 	bl	8001b44 <LL_ADC_SetCommonPathInternalCh>
 800260c:	e028      	b.n	8002660 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a0b      	ldr	r2, [pc, #44]	@ (8002640 <HAL_ADC_ConfigChannel+0x374>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d123      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	4a0b      	ldr	r2, [pc, #44]	@ (8002648 <HAL_ADC_ConfigChannel+0x37c>)
 800261c:	4013      	ands	r3, r2
 800261e:	4a04      	ldr	r2, [pc, #16]	@ (8002630 <HAL_ADC_ConfigChannel+0x364>)
 8002620:	0019      	movs	r1, r3
 8002622:	0010      	movs	r0, r2
 8002624:	f7ff fa8e 	bl	8001b44 <LL_ADC_SetCommonPathInternalCh>
 8002628:	e01a      	b.n	8002660 <HAL_ADC_ConfigChannel+0x394>
 800262a:	46c0      	nop			@ (mov r8, r8)
 800262c:	80000004 	.word	0x80000004
 8002630:	40012708 	.word	0x40012708
 8002634:	a4000200 	.word	0xa4000200
 8002638:	20000000 	.word	0x20000000
 800263c:	00030d40 	.word	0x00030d40
 8002640:	a8000400 	.word	0xa8000400
 8002644:	ff7fffff 	.word	0xff7fffff
 8002648:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002650:	2220      	movs	r2, #32
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002658:	2317      	movs	r3, #23
 800265a:	18fb      	adds	r3, r7, r3
 800265c:	2201      	movs	r2, #1
 800265e:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2254      	movs	r2, #84	@ 0x54
 8002664:	2100      	movs	r1, #0
 8002666:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8002668:	2317      	movs	r3, #23
 800266a:	18fb      	adds	r3, r7, r3
 800266c:	781b      	ldrb	r3, [r3, #0]
}
 800266e:	0018      	movs	r0, r3
 8002670:	46bd      	mov	sp, r7
 8002672:	b006      	add	sp, #24
 8002674:	bd80      	pop	{r7, pc}
 8002676:	46c0      	nop			@ (mov r8, r8)

08002678 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002680:	2300      	movs	r3, #0
 8002682:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	0018      	movs	r0, r3
 800268a:	f7ff fb5b 	bl	8001d44 <LL_ADC_IsEnabled>
 800268e:	1e03      	subs	r3, r0, #0
 8002690:	d162      	bne.n	8002758 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	4a32      	ldr	r2, [pc, #200]	@ (8002764 <ADC_Enable+0xec>)
 800269a:	4013      	ands	r3, r2
 800269c:	d00d      	beq.n	80026ba <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a2:	2210      	movs	r2, #16
 80026a4:	431a      	orrs	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ae:	2201      	movs	r2, #1
 80026b0:	431a      	orrs	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e04f      	b.n	800275a <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	0018      	movs	r0, r3
 80026c0:	f7ff fb2e 	bl	8001d20 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80026c4:	4b28      	ldr	r3, [pc, #160]	@ (8002768 <ADC_Enable+0xf0>)
 80026c6:	0018      	movs	r0, r3
 80026c8:	f7ff fa50 	bl	8001b6c <LL_ADC_GetCommonPathInternalCh>
 80026cc:	0002      	movs	r2, r0
 80026ce:	2380      	movs	r3, #128	@ 0x80
 80026d0:	041b      	lsls	r3, r3, #16
 80026d2:	4013      	ands	r3, r2
 80026d4:	d00f      	beq.n	80026f6 <ADC_Enable+0x7e>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026d6:	4b25      	ldr	r3, [pc, #148]	@ (800276c <ADC_Enable+0xf4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4925      	ldr	r1, [pc, #148]	@ (8002770 <ADC_Enable+0xf8>)
 80026dc:	0018      	movs	r0, r3
 80026de:	f7fd fd13 	bl	8000108 <__udivsi3>
 80026e2:	0003      	movs	r3, r0
 80026e4:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80026e6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80026e8:	e002      	b.n	80026f0 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	3b01      	subs	r3, #1
 80026ee:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1f9      	bne.n	80026ea <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	7e5b      	ldrb	r3, [r3, #25]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d02c      	beq.n	8002758 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80026fe:	f7ff fa17 	bl	8001b30 <HAL_GetTick>
 8002702:	0003      	movs	r3, r0
 8002704:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002706:	e020      	b.n	800274a <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	0018      	movs	r0, r3
 800270e:	f7ff fb19 	bl	8001d44 <LL_ADC_IsEnabled>
 8002712:	1e03      	subs	r3, r0, #0
 8002714:	d104      	bne.n	8002720 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	0018      	movs	r0, r3
 800271c:	f7ff fb00 	bl	8001d20 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002720:	f7ff fa06 	bl	8001b30 <HAL_GetTick>
 8002724:	0002      	movs	r2, r0
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d90d      	bls.n	800274a <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002732:	2210      	movs	r2, #16
 8002734:	431a      	orrs	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800273e:	2201      	movs	r2, #1
 8002740:	431a      	orrs	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e007      	b.n	800275a <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2201      	movs	r2, #1
 8002752:	4013      	ands	r3, r2
 8002754:	2b01      	cmp	r3, #1
 8002756:	d1d7      	bne.n	8002708 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	0018      	movs	r0, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	b004      	add	sp, #16
 8002760:	bd80      	pop	{r7, pc}
 8002762:	46c0      	nop			@ (mov r8, r8)
 8002764:	80000017 	.word	0x80000017
 8002768:	40012708 	.word	0x40012708
 800276c:	20000000 	.word	0x20000000
 8002770:	00030d40 	.word	0x00030d40

08002774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002774:	b590      	push	{r4, r7, lr}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	0002      	movs	r2, r0
 800277c:	6039      	str	r1, [r7, #0]
 800277e:	1dfb      	adds	r3, r7, #7
 8002780:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002782:	1dfb      	adds	r3, r7, #7
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b7f      	cmp	r3, #127	@ 0x7f
 8002788:	d828      	bhi.n	80027dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800278a:	4a2f      	ldr	r2, [pc, #188]	@ (8002848 <__NVIC_SetPriority+0xd4>)
 800278c:	1dfb      	adds	r3, r7, #7
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	b25b      	sxtb	r3, r3
 8002792:	089b      	lsrs	r3, r3, #2
 8002794:	33c0      	adds	r3, #192	@ 0xc0
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	589b      	ldr	r3, [r3, r2]
 800279a:	1dfa      	adds	r2, r7, #7
 800279c:	7812      	ldrb	r2, [r2, #0]
 800279e:	0011      	movs	r1, r2
 80027a0:	2203      	movs	r2, #3
 80027a2:	400a      	ands	r2, r1
 80027a4:	00d2      	lsls	r2, r2, #3
 80027a6:	21ff      	movs	r1, #255	@ 0xff
 80027a8:	4091      	lsls	r1, r2
 80027aa:	000a      	movs	r2, r1
 80027ac:	43d2      	mvns	r2, r2
 80027ae:	401a      	ands	r2, r3
 80027b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	019b      	lsls	r3, r3, #6
 80027b6:	22ff      	movs	r2, #255	@ 0xff
 80027b8:	401a      	ands	r2, r3
 80027ba:	1dfb      	adds	r3, r7, #7
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	0018      	movs	r0, r3
 80027c0:	2303      	movs	r3, #3
 80027c2:	4003      	ands	r3, r0
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027c8:	481f      	ldr	r0, [pc, #124]	@ (8002848 <__NVIC_SetPriority+0xd4>)
 80027ca:	1dfb      	adds	r3, r7, #7
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	b25b      	sxtb	r3, r3
 80027d0:	089b      	lsrs	r3, r3, #2
 80027d2:	430a      	orrs	r2, r1
 80027d4:	33c0      	adds	r3, #192	@ 0xc0
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80027da:	e031      	b.n	8002840 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027dc:	4a1b      	ldr	r2, [pc, #108]	@ (800284c <__NVIC_SetPriority+0xd8>)
 80027de:	1dfb      	adds	r3, r7, #7
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	0019      	movs	r1, r3
 80027e4:	230f      	movs	r3, #15
 80027e6:	400b      	ands	r3, r1
 80027e8:	3b08      	subs	r3, #8
 80027ea:	089b      	lsrs	r3, r3, #2
 80027ec:	3306      	adds	r3, #6
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	18d3      	adds	r3, r2, r3
 80027f2:	3304      	adds	r3, #4
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	1dfa      	adds	r2, r7, #7
 80027f8:	7812      	ldrb	r2, [r2, #0]
 80027fa:	0011      	movs	r1, r2
 80027fc:	2203      	movs	r2, #3
 80027fe:	400a      	ands	r2, r1
 8002800:	00d2      	lsls	r2, r2, #3
 8002802:	21ff      	movs	r1, #255	@ 0xff
 8002804:	4091      	lsls	r1, r2
 8002806:	000a      	movs	r2, r1
 8002808:	43d2      	mvns	r2, r2
 800280a:	401a      	ands	r2, r3
 800280c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	019b      	lsls	r3, r3, #6
 8002812:	22ff      	movs	r2, #255	@ 0xff
 8002814:	401a      	ands	r2, r3
 8002816:	1dfb      	adds	r3, r7, #7
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	0018      	movs	r0, r3
 800281c:	2303      	movs	r3, #3
 800281e:	4003      	ands	r3, r0
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002824:	4809      	ldr	r0, [pc, #36]	@ (800284c <__NVIC_SetPriority+0xd8>)
 8002826:	1dfb      	adds	r3, r7, #7
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	001c      	movs	r4, r3
 800282c:	230f      	movs	r3, #15
 800282e:	4023      	ands	r3, r4
 8002830:	3b08      	subs	r3, #8
 8002832:	089b      	lsrs	r3, r3, #2
 8002834:	430a      	orrs	r2, r1
 8002836:	3306      	adds	r3, #6
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	18c3      	adds	r3, r0, r3
 800283c:	3304      	adds	r3, #4
 800283e:	601a      	str	r2, [r3, #0]
}
 8002840:	46c0      	nop			@ (mov r8, r8)
 8002842:	46bd      	mov	sp, r7
 8002844:	b003      	add	sp, #12
 8002846:	bd90      	pop	{r4, r7, pc}
 8002848:	e000e100 	.word	0xe000e100
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	1e5a      	subs	r2, r3, #1
 800285c:	2380      	movs	r3, #128	@ 0x80
 800285e:	045b      	lsls	r3, r3, #17
 8002860:	429a      	cmp	r2, r3
 8002862:	d301      	bcc.n	8002868 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002864:	2301      	movs	r3, #1
 8002866:	e010      	b.n	800288a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002868:	4b0a      	ldr	r3, [pc, #40]	@ (8002894 <SysTick_Config+0x44>)
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	3a01      	subs	r2, #1
 800286e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002870:	2301      	movs	r3, #1
 8002872:	425b      	negs	r3, r3
 8002874:	2103      	movs	r1, #3
 8002876:	0018      	movs	r0, r3
 8002878:	f7ff ff7c 	bl	8002774 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800287c:	4b05      	ldr	r3, [pc, #20]	@ (8002894 <SysTick_Config+0x44>)
 800287e:	2200      	movs	r2, #0
 8002880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002882:	4b04      	ldr	r3, [pc, #16]	@ (8002894 <SysTick_Config+0x44>)
 8002884:	2207      	movs	r2, #7
 8002886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002888:	2300      	movs	r3, #0
}
 800288a:	0018      	movs	r0, r3
 800288c:	46bd      	mov	sp, r7
 800288e:	b002      	add	sp, #8
 8002890:	bd80      	pop	{r7, pc}
 8002892:	46c0      	nop			@ (mov r8, r8)
 8002894:	e000e010 	.word	0xe000e010

08002898 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	60b9      	str	r1, [r7, #8]
 80028a0:	607a      	str	r2, [r7, #4]
 80028a2:	210f      	movs	r1, #15
 80028a4:	187b      	adds	r3, r7, r1
 80028a6:	1c02      	adds	r2, r0, #0
 80028a8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	187b      	adds	r3, r7, r1
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	b25b      	sxtb	r3, r3
 80028b2:	0011      	movs	r1, r2
 80028b4:	0018      	movs	r0, r3
 80028b6:	f7ff ff5d 	bl	8002774 <__NVIC_SetPriority>
}
 80028ba:	46c0      	nop			@ (mov r8, r8)
 80028bc:	46bd      	mov	sp, r7
 80028be:	b004      	add	sp, #16
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b082      	sub	sp, #8
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	0018      	movs	r0, r3
 80028ce:	f7ff ffbf 	bl	8002850 <SysTick_Config>
 80028d2:	0003      	movs	r3, r0
}
 80028d4:	0018      	movs	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b002      	add	sp, #8
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80028ea:	e14d      	b.n	8002b88 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2101      	movs	r1, #1
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	4091      	lsls	r1, r2
 80028f6:	000a      	movs	r2, r1
 80028f8:	4013      	ands	r3, r2
 80028fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d100      	bne.n	8002904 <HAL_GPIO_Init+0x28>
 8002902:	e13e      	b.n	8002b82 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2b02      	cmp	r3, #2
 800290a:	d003      	beq.n	8002914 <HAL_GPIO_Init+0x38>
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b12      	cmp	r3, #18
 8002912:	d125      	bne.n	8002960 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	08da      	lsrs	r2, r3, #3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3208      	adds	r2, #8
 800291c:	0092      	lsls	r2, r2, #2
 800291e:	58d3      	ldr	r3, [r2, r3]
 8002920:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	2207      	movs	r2, #7
 8002926:	4013      	ands	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	220f      	movs	r2, #15
 800292c:	409a      	lsls	r2, r3
 800292e:	0013      	movs	r3, r2
 8002930:	43da      	mvns	r2, r3
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	4013      	ands	r3, r2
 8002936:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	220f      	movs	r2, #15
 800293e:	401a      	ands	r2, r3
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	2107      	movs	r1, #7
 8002944:	400b      	ands	r3, r1
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	409a      	lsls	r2, r3
 800294a:	0013      	movs	r3, r2
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	4313      	orrs	r3, r2
 8002950:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	08da      	lsrs	r2, r3, #3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3208      	adds	r2, #8
 800295a:	0092      	lsls	r2, r2, #2
 800295c:	6979      	ldr	r1, [r7, #20]
 800295e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	2203      	movs	r2, #3
 800296c:	409a      	lsls	r2, r3
 800296e:	0013      	movs	r3, r2
 8002970:	43da      	mvns	r2, r3
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	4013      	ands	r3, r2
 8002976:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2203      	movs	r2, #3
 800297e:	401a      	ands	r2, r3
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	409a      	lsls	r2, r3
 8002986:	0013      	movs	r3, r2
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	4313      	orrs	r3, r2
 800298c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d00b      	beq.n	80029b4 <HAL_GPIO_Init+0xd8>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d007      	beq.n	80029b4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029a8:	2b11      	cmp	r3, #17
 80029aa:	d003      	beq.n	80029b4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b12      	cmp	r3, #18
 80029b2:	d130      	bne.n	8002a16 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	2203      	movs	r2, #3
 80029c0:	409a      	lsls	r2, r3
 80029c2:	0013      	movs	r3, r2
 80029c4:	43da      	mvns	r2, r3
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	4013      	ands	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	68da      	ldr	r2, [r3, #12]
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	409a      	lsls	r2, r3
 80029d6:	0013      	movs	r3, r2
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	4313      	orrs	r3, r2
 80029dc:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029ea:	2201      	movs	r2, #1
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	409a      	lsls	r2, r3
 80029f0:	0013      	movs	r3, r2
 80029f2:	43da      	mvns	r2, r3
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	4013      	ands	r3, r2
 80029f8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	091b      	lsrs	r3, r3, #4
 8002a00:	2201      	movs	r2, #1
 8002a02:	401a      	ands	r2, r3
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	409a      	lsls	r2, r3
 8002a08:	0013      	movs	r3, r2
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2b03      	cmp	r3, #3
 8002a1c:	d017      	beq.n	8002a4e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	2203      	movs	r2, #3
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	0013      	movs	r3, r2
 8002a2e:	43da      	mvns	r2, r3
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	4013      	ands	r3, r2
 8002a34:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	689a      	ldr	r2, [r3, #8]
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	409a      	lsls	r2, r3
 8002a40:	0013      	movs	r3, r2
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	2380      	movs	r3, #128	@ 0x80
 8002a54:	055b      	lsls	r3, r3, #21
 8002a56:	4013      	ands	r3, r2
 8002a58:	d100      	bne.n	8002a5c <HAL_GPIO_Init+0x180>
 8002a5a:	e092      	b.n	8002b82 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002a5c:	4a50      	ldr	r2, [pc, #320]	@ (8002ba0 <HAL_GPIO_Init+0x2c4>)
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	089b      	lsrs	r3, r3, #2
 8002a62:	3318      	adds	r3, #24
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	589b      	ldr	r3, [r3, r2]
 8002a68:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	2203      	movs	r2, #3
 8002a6e:	4013      	ands	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	220f      	movs	r2, #15
 8002a74:	409a      	lsls	r2, r3
 8002a76:	0013      	movs	r3, r2
 8002a78:	43da      	mvns	r2, r3
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	23a0      	movs	r3, #160	@ 0xa0
 8002a84:	05db      	lsls	r3, r3, #23
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d013      	beq.n	8002ab2 <HAL_GPIO_Init+0x1d6>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a45      	ldr	r2, [pc, #276]	@ (8002ba4 <HAL_GPIO_Init+0x2c8>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d00d      	beq.n	8002aae <HAL_GPIO_Init+0x1d2>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a44      	ldr	r2, [pc, #272]	@ (8002ba8 <HAL_GPIO_Init+0x2cc>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d007      	beq.n	8002aaa <HAL_GPIO_Init+0x1ce>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a43      	ldr	r2, [pc, #268]	@ (8002bac <HAL_GPIO_Init+0x2d0>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d101      	bne.n	8002aa6 <HAL_GPIO_Init+0x1ca>
 8002aa2:	2305      	movs	r3, #5
 8002aa4:	e006      	b.n	8002ab4 <HAL_GPIO_Init+0x1d8>
 8002aa6:	2306      	movs	r3, #6
 8002aa8:	e004      	b.n	8002ab4 <HAL_GPIO_Init+0x1d8>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e002      	b.n	8002ab4 <HAL_GPIO_Init+0x1d8>
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e000      	b.n	8002ab4 <HAL_GPIO_Init+0x1d8>
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	2103      	movs	r1, #3
 8002ab8:	400a      	ands	r2, r1
 8002aba:	00d2      	lsls	r2, r2, #3
 8002abc:	4093      	lsls	r3, r2
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002ac4:	4936      	ldr	r1, [pc, #216]	@ (8002ba0 <HAL_GPIO_Init+0x2c4>)
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	089b      	lsrs	r3, r3, #2
 8002aca:	3318      	adds	r3, #24
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8002ad2:	4a33      	ldr	r2, [pc, #204]	@ (8002ba0 <HAL_GPIO_Init+0x2c4>)
 8002ad4:	2380      	movs	r3, #128	@ 0x80
 8002ad6:	58d3      	ldr	r3, [r2, r3]
 8002ad8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	43da      	mvns	r2, r3
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	2380      	movs	r3, #128	@ 0x80
 8002aea:	025b      	lsls	r3, r3, #9
 8002aec:	4013      	ands	r3, r2
 8002aee:	d003      	beq.n	8002af8 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002af8:	4929      	ldr	r1, [pc, #164]	@ (8002ba0 <HAL_GPIO_Init+0x2c4>)
 8002afa:	2280      	movs	r2, #128	@ 0x80
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8002b00:	4a27      	ldr	r2, [pc, #156]	@ (8002ba0 <HAL_GPIO_Init+0x2c4>)
 8002b02:	2384      	movs	r3, #132	@ 0x84
 8002b04:	58d3      	ldr	r3, [r2, r3]
 8002b06:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	43da      	mvns	r2, r3
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	2380      	movs	r3, #128	@ 0x80
 8002b18:	029b      	lsls	r3, r3, #10
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	d003      	beq.n	8002b26 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002b26:	491e      	ldr	r1, [pc, #120]	@ (8002ba0 <HAL_GPIO_Init+0x2c4>)
 8002b28:	2284      	movs	r2, #132	@ 0x84
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8002ba0 <HAL_GPIO_Init+0x2c4>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	43da      	mvns	r2, r3
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	2380      	movs	r3, #128	@ 0x80
 8002b44:	035b      	lsls	r3, r3, #13
 8002b46:	4013      	ands	r3, r2
 8002b48:	d003      	beq.n	8002b52 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002b52:	4b13      	ldr	r3, [pc, #76]	@ (8002ba0 <HAL_GPIO_Init+0x2c4>)
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8002b58:	4b11      	ldr	r3, [pc, #68]	@ (8002ba0 <HAL_GPIO_Init+0x2c4>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	43da      	mvns	r2, r3
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	4013      	ands	r3, r2
 8002b66:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	2380      	movs	r3, #128	@ 0x80
 8002b6e:	039b      	lsls	r3, r3, #14
 8002b70:	4013      	ands	r3, r2
 8002b72:	d003      	beq.n	8002b7c <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002b7c:	4b08      	ldr	r3, [pc, #32]	@ (8002ba0 <HAL_GPIO_Init+0x2c4>)
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	3301      	adds	r3, #1
 8002b86:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	40da      	lsrs	r2, r3
 8002b90:	1e13      	subs	r3, r2, #0
 8002b92:	d000      	beq.n	8002b96 <HAL_GPIO_Init+0x2ba>
 8002b94:	e6aa      	b.n	80028ec <HAL_GPIO_Init+0x10>
  }
}
 8002b96:	46c0      	nop			@ (mov r8, r8)
 8002b98:	46c0      	nop			@ (mov r8, r8)
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	b006      	add	sp, #24
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40021800 	.word	0x40021800
 8002ba4:	50000400 	.word	0x50000400
 8002ba8:	50000800 	.word	0x50000800
 8002bac:	50001400 	.word	0x50001400

08002bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	0008      	movs	r0, r1
 8002bba:	0011      	movs	r1, r2
 8002bbc:	1cbb      	adds	r3, r7, #2
 8002bbe:	1c02      	adds	r2, r0, #0
 8002bc0:	801a      	strh	r2, [r3, #0]
 8002bc2:	1c7b      	adds	r3, r7, #1
 8002bc4:	1c0a      	adds	r2, r1, #0
 8002bc6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bc8:	1c7b      	adds	r3, r7, #1
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d004      	beq.n	8002bda <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bd0:	1cbb      	adds	r3, r7, #2
 8002bd2:	881a      	ldrh	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bd8:	e003      	b.n	8002be2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bda:	1cbb      	adds	r3, r7, #2
 8002bdc:	881a      	ldrh	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002be2:	46c0      	nop			@ (mov r8, r8)
 8002be4:	46bd      	mov	sp, r7
 8002be6:	b002      	add	sp, #8
 8002be8:	bd80      	pop	{r7, pc}
	...

08002bec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e1d0      	b.n	8002fa0 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2201      	movs	r2, #1
 8002c04:	4013      	ands	r3, r2
 8002c06:	d100      	bne.n	8002c0a <HAL_RCC_OscConfig+0x1e>
 8002c08:	e069      	b.n	8002cde <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c0a:	4bc8      	ldr	r3, [pc, #800]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	2238      	movs	r2, #56	@ 0x38
 8002c10:	4013      	ands	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	2b08      	cmp	r3, #8
 8002c18:	d105      	bne.n	8002c26 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d15d      	bne.n	8002cde <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e1bc      	b.n	8002fa0 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	2380      	movs	r3, #128	@ 0x80
 8002c2c:	025b      	lsls	r3, r3, #9
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d107      	bne.n	8002c42 <HAL_RCC_OscConfig+0x56>
 8002c32:	4bbe      	ldr	r3, [pc, #760]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	4bbd      	ldr	r3, [pc, #756]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002c38:	2180      	movs	r1, #128	@ 0x80
 8002c3a:	0249      	lsls	r1, r1, #9
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	e020      	b.n	8002c84 <HAL_RCC_OscConfig+0x98>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	23a0      	movs	r3, #160	@ 0xa0
 8002c48:	02db      	lsls	r3, r3, #11
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d10e      	bne.n	8002c6c <HAL_RCC_OscConfig+0x80>
 8002c4e:	4bb7      	ldr	r3, [pc, #732]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	4bb6      	ldr	r3, [pc, #728]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002c54:	2180      	movs	r1, #128	@ 0x80
 8002c56:	02c9      	lsls	r1, r1, #11
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	4bb3      	ldr	r3, [pc, #716]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	4bb2      	ldr	r3, [pc, #712]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002c62:	2180      	movs	r1, #128	@ 0x80
 8002c64:	0249      	lsls	r1, r1, #9
 8002c66:	430a      	orrs	r2, r1
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	e00b      	b.n	8002c84 <HAL_RCC_OscConfig+0x98>
 8002c6c:	4baf      	ldr	r3, [pc, #700]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	4bae      	ldr	r3, [pc, #696]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002c72:	49af      	ldr	r1, [pc, #700]	@ (8002f30 <HAL_RCC_OscConfig+0x344>)
 8002c74:	400a      	ands	r2, r1
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	4bac      	ldr	r3, [pc, #688]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	4bab      	ldr	r3, [pc, #684]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002c7e:	49ad      	ldr	r1, [pc, #692]	@ (8002f34 <HAL_RCC_OscConfig+0x348>)
 8002c80:	400a      	ands	r2, r1
 8002c82:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d014      	beq.n	8002cb6 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8c:	f7fe ff50 	bl	8001b30 <HAL_GetTick>
 8002c90:	0003      	movs	r3, r0
 8002c92:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002c96:	f7fe ff4b 	bl	8001b30 <HAL_GetTick>
 8002c9a:	0002      	movs	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b64      	cmp	r3, #100	@ 0x64
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e17b      	b.n	8002fa0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ca8:	4ba0      	ldr	r3, [pc, #640]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	2380      	movs	r3, #128	@ 0x80
 8002cae:	029b      	lsls	r3, r3, #10
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	d0f0      	beq.n	8002c96 <HAL_RCC_OscConfig+0xaa>
 8002cb4:	e013      	b.n	8002cde <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb6:	f7fe ff3b 	bl	8001b30 <HAL_GetTick>
 8002cba:	0003      	movs	r3, r0
 8002cbc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002cc0:	f7fe ff36 	bl	8001b30 <HAL_GetTick>
 8002cc4:	0002      	movs	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b64      	cmp	r3, #100	@ 0x64
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e166      	b.n	8002fa0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cd2:	4b96      	ldr	r3, [pc, #600]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	2380      	movs	r3, #128	@ 0x80
 8002cd8:	029b      	lsls	r3, r3, #10
 8002cda:	4013      	ands	r3, r2
 8002cdc:	d1f0      	bne.n	8002cc0 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	d100      	bne.n	8002cea <HAL_RCC_OscConfig+0xfe>
 8002ce8:	e086      	b.n	8002df8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cea:	4b90      	ldr	r3, [pc, #576]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	2238      	movs	r2, #56	@ 0x38
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d12f      	bne.n	8002d5a <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e14c      	b.n	8002fa0 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d06:	4b89      	ldr	r3, [pc, #548]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	4a8b      	ldr	r2, [pc, #556]	@ (8002f38 <HAL_RCC_OscConfig+0x34c>)
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	0019      	movs	r1, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	021a      	lsls	r2, r3, #8
 8002d16:	4b85      	ldr	r3, [pc, #532]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d112      	bne.n	8002d48 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002d22:	4b82      	ldr	r3, [pc, #520]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a85      	ldr	r2, [pc, #532]	@ (8002f3c <HAL_RCC_OscConfig+0x350>)
 8002d28:	4013      	ands	r3, r2
 8002d2a:	0019      	movs	r1, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691a      	ldr	r2, [r3, #16]
 8002d30:	4b7e      	ldr	r3, [pc, #504]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002d32:	430a      	orrs	r2, r1
 8002d34:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002d36:	4b7d      	ldr	r3, [pc, #500]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	0adb      	lsrs	r3, r3, #11
 8002d3c:	2207      	movs	r2, #7
 8002d3e:	4013      	ands	r3, r2
 8002d40:	4a7f      	ldr	r2, [pc, #508]	@ (8002f40 <HAL_RCC_OscConfig+0x354>)
 8002d42:	40da      	lsrs	r2, r3
 8002d44:	4b7f      	ldr	r3, [pc, #508]	@ (8002f44 <HAL_RCC_OscConfig+0x358>)
 8002d46:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002d48:	4b7f      	ldr	r3, [pc, #508]	@ (8002f48 <HAL_RCC_OscConfig+0x35c>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f7fe fe93 	bl	8001a78 <HAL_InitTick>
 8002d52:	1e03      	subs	r3, r0, #0
 8002d54:	d050      	beq.n	8002df8 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e122      	b.n	8002fa0 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d030      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002d62:	4b72      	ldr	r3, [pc, #456]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a75      	ldr	r2, [pc, #468]	@ (8002f3c <HAL_RCC_OscConfig+0x350>)
 8002d68:	4013      	ands	r3, r2
 8002d6a:	0019      	movs	r1, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	4b6e      	ldr	r3, [pc, #440]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002d72:	430a      	orrs	r2, r1
 8002d74:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8002d76:	4b6d      	ldr	r3, [pc, #436]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	4b6c      	ldr	r3, [pc, #432]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002d7c:	2180      	movs	r1, #128	@ 0x80
 8002d7e:	0049      	lsls	r1, r1, #1
 8002d80:	430a      	orrs	r2, r1
 8002d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d84:	f7fe fed4 	bl	8001b30 <HAL_GetTick>
 8002d88:	0003      	movs	r3, r0
 8002d8a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002d8e:	f7fe fecf 	bl	8001b30 <HAL_GetTick>
 8002d92:	0002      	movs	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e0ff      	b.n	8002fa0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002da0:	4b62      	ldr	r3, [pc, #392]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	2380      	movs	r3, #128	@ 0x80
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	4013      	ands	r3, r2
 8002daa:	d0f0      	beq.n	8002d8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dac:	4b5f      	ldr	r3, [pc, #380]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	4a61      	ldr	r2, [pc, #388]	@ (8002f38 <HAL_RCC_OscConfig+0x34c>)
 8002db2:	4013      	ands	r3, r2
 8002db4:	0019      	movs	r1, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	021a      	lsls	r2, r3, #8
 8002dbc:	4b5b      	ldr	r3, [pc, #364]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	605a      	str	r2, [r3, #4]
 8002dc2:	e019      	b.n	8002df8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8002dc4:	4b59      	ldr	r3, [pc, #356]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	4b58      	ldr	r3, [pc, #352]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002dca:	4960      	ldr	r1, [pc, #384]	@ (8002f4c <HAL_RCC_OscConfig+0x360>)
 8002dcc:	400a      	ands	r2, r1
 8002dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd0:	f7fe feae 	bl	8001b30 <HAL_GetTick>
 8002dd4:	0003      	movs	r3, r0
 8002dd6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dd8:	e008      	b.n	8002dec <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002dda:	f7fe fea9 	bl	8001b30 <HAL_GetTick>
 8002dde:	0002      	movs	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e0d9      	b.n	8002fa0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dec:	4b4f      	ldr	r3, [pc, #316]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	2380      	movs	r3, #128	@ 0x80
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	4013      	ands	r3, r2
 8002df6:	d1f0      	bne.n	8002dda <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2208      	movs	r2, #8
 8002dfe:	4013      	ands	r3, r2
 8002e00:	d042      	beq.n	8002e88 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002e02:	4b4a      	ldr	r3, [pc, #296]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	2238      	movs	r2, #56	@ 0x38
 8002e08:	4013      	ands	r3, r2
 8002e0a:	2b18      	cmp	r3, #24
 8002e0c:	d105      	bne.n	8002e1a <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d138      	bne.n	8002e88 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e0c2      	b.n	8002fa0 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d019      	beq.n	8002e56 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002e22:	4b42      	ldr	r3, [pc, #264]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002e24:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002e26:	4b41      	ldr	r3, [pc, #260]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002e28:	2101      	movs	r1, #1
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2e:	f7fe fe7f 	bl	8001b30 <HAL_GetTick>
 8002e32:	0003      	movs	r3, r0
 8002e34:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002e38:	f7fe fe7a 	bl	8001b30 <HAL_GetTick>
 8002e3c:	0002      	movs	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e0aa      	b.n	8002fa0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002e4a:	4b38      	ldr	r3, [pc, #224]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002e4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e4e:	2202      	movs	r2, #2
 8002e50:	4013      	ands	r3, r2
 8002e52:	d0f1      	beq.n	8002e38 <HAL_RCC_OscConfig+0x24c>
 8002e54:	e018      	b.n	8002e88 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002e56:	4b35      	ldr	r3, [pc, #212]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002e58:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002e5a:	4b34      	ldr	r3, [pc, #208]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	438a      	bics	r2, r1
 8002e60:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e62:	f7fe fe65 	bl	8001b30 <HAL_GetTick>
 8002e66:	0003      	movs	r3, r0
 8002e68:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002e6c:	f7fe fe60 	bl	8001b30 <HAL_GetTick>
 8002e70:	0002      	movs	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e090      	b.n	8002fa0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002e7e:	4b2b      	ldr	r3, [pc, #172]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002e80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e82:	2202      	movs	r2, #2
 8002e84:	4013      	ands	r3, r2
 8002e86:	d1f1      	bne.n	8002e6c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2204      	movs	r2, #4
 8002e8e:	4013      	ands	r3, r2
 8002e90:	d100      	bne.n	8002e94 <HAL_RCC_OscConfig+0x2a8>
 8002e92:	e084      	b.n	8002f9e <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e94:	230f      	movs	r3, #15
 8002e96:	18fb      	adds	r3, r7, r3
 8002e98:	2200      	movs	r2, #0
 8002e9a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002e9c:	4b23      	ldr	r3, [pc, #140]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	2238      	movs	r2, #56	@ 0x38
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	2b20      	cmp	r3, #32
 8002ea6:	d106      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d000      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x2c6>
 8002eb0:	e075      	b.n	8002f9e <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e074      	b.n	8002fa0 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d106      	bne.n	8002ecc <HAL_RCC_OscConfig+0x2e0>
 8002ebe:	4b1b      	ldr	r3, [pc, #108]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002ec0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002eca:	e01c      	b.n	8002f06 <HAL_RCC_OscConfig+0x31a>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	2b05      	cmp	r3, #5
 8002ed2:	d10c      	bne.n	8002eee <HAL_RCC_OscConfig+0x302>
 8002ed4:	4b15      	ldr	r3, [pc, #84]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002ed6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ed8:	4b14      	ldr	r3, [pc, #80]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002eda:	2104      	movs	r1, #4
 8002edc:	430a      	orrs	r2, r1
 8002ede:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ee0:	4b12      	ldr	r3, [pc, #72]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002ee2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ee4:	4b11      	ldr	r3, [pc, #68]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002eec:	e00b      	b.n	8002f06 <HAL_RCC_OscConfig+0x31a>
 8002eee:	4b0f      	ldr	r3, [pc, #60]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002ef0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	438a      	bics	r2, r1
 8002ef8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002efa:	4b0c      	ldr	r3, [pc, #48]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002efc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002efe:	4b0b      	ldr	r3, [pc, #44]	@ (8002f2c <HAL_RCC_OscConfig+0x340>)
 8002f00:	2104      	movs	r1, #4
 8002f02:	438a      	bics	r2, r1
 8002f04:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d028      	beq.n	8002f60 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0e:	f7fe fe0f 	bl	8001b30 <HAL_GetTick>
 8002f12:	0003      	movs	r3, r0
 8002f14:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002f16:	e01d      	b.n	8002f54 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f18:	f7fe fe0a 	bl	8001b30 <HAL_GetTick>
 8002f1c:	0002      	movs	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	4a0b      	ldr	r2, [pc, #44]	@ (8002f50 <HAL_RCC_OscConfig+0x364>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d915      	bls.n	8002f54 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e039      	b.n	8002fa0 <HAL_RCC_OscConfig+0x3b4>
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	fffeffff 	.word	0xfffeffff
 8002f34:	fffbffff 	.word	0xfffbffff
 8002f38:	ffff80ff 	.word	0xffff80ff
 8002f3c:	ffffc7ff 	.word	0xffffc7ff
 8002f40:	02dc6c00 	.word	0x02dc6c00
 8002f44:	20000000 	.word	0x20000000
 8002f48:	20000004 	.word	0x20000004
 8002f4c:	fffffeff 	.word	0xfffffeff
 8002f50:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002f54:	4b14      	ldr	r3, [pc, #80]	@ (8002fa8 <HAL_RCC_OscConfig+0x3bc>)
 8002f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f58:	2202      	movs	r2, #2
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d0dc      	beq.n	8002f18 <HAL_RCC_OscConfig+0x32c>
 8002f5e:	e013      	b.n	8002f88 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f60:	f7fe fde6 	bl	8001b30 <HAL_GetTick>
 8002f64:	0003      	movs	r3, r0
 8002f66:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002f68:	e009      	b.n	8002f7e <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f6a:	f7fe fde1 	bl	8001b30 <HAL_GetTick>
 8002f6e:	0002      	movs	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	4a0d      	ldr	r2, [pc, #52]	@ (8002fac <HAL_RCC_OscConfig+0x3c0>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e010      	b.n	8002fa0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa8 <HAL_RCC_OscConfig+0x3bc>)
 8002f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f82:	2202      	movs	r2, #2
 8002f84:	4013      	ands	r3, r2
 8002f86:	d1f0      	bne.n	8002f6a <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002f88:	230f      	movs	r3, #15
 8002f8a:	18fb      	adds	r3, r7, r3
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d105      	bne.n	8002f9e <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002f92:	4b05      	ldr	r3, [pc, #20]	@ (8002fa8 <HAL_RCC_OscConfig+0x3bc>)
 8002f94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f96:	4b04      	ldr	r3, [pc, #16]	@ (8002fa8 <HAL_RCC_OscConfig+0x3bc>)
 8002f98:	4905      	ldr	r1, [pc, #20]	@ (8002fb0 <HAL_RCC_OscConfig+0x3c4>)
 8002f9a:	400a      	ands	r2, r1
 8002f9c:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	b006      	add	sp, #24
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	00001388 	.word	0x00001388
 8002fb0:	efffffff 	.word	0xefffffff

08002fb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e0df      	b.n	8003188 <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fc8:	4b71      	ldr	r3, [pc, #452]	@ (8003190 <HAL_RCC_ClockConfig+0x1dc>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2207      	movs	r2, #7
 8002fce:	4013      	ands	r3, r2
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d91e      	bls.n	8003014 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd6:	4b6e      	ldr	r3, [pc, #440]	@ (8003190 <HAL_RCC_ClockConfig+0x1dc>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2207      	movs	r2, #7
 8002fdc:	4393      	bics	r3, r2
 8002fde:	0019      	movs	r1, r3
 8002fe0:	4b6b      	ldr	r3, [pc, #428]	@ (8003190 <HAL_RCC_ClockConfig+0x1dc>)
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002fe8:	f7fe fda2 	bl	8001b30 <HAL_GetTick>
 8002fec:	0003      	movs	r3, r0
 8002fee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ff0:	e009      	b.n	8003006 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002ff2:	f7fe fd9d 	bl	8001b30 <HAL_GetTick>
 8002ff6:	0002      	movs	r2, r0
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	4a65      	ldr	r2, [pc, #404]	@ (8003194 <HAL_RCC_ClockConfig+0x1e0>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e0c0      	b.n	8003188 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003006:	4b62      	ldr	r3, [pc, #392]	@ (8003190 <HAL_RCC_ClockConfig+0x1dc>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2207      	movs	r2, #7
 800300c:	4013      	ands	r3, r2
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	429a      	cmp	r2, r3
 8003012:	d1ee      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2202      	movs	r2, #2
 800301a:	4013      	ands	r3, r2
 800301c:	d017      	beq.n	800304e <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2204      	movs	r2, #4
 8003024:	4013      	ands	r3, r2
 8003026:	d008      	beq.n	800303a <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003028:	4b5b      	ldr	r3, [pc, #364]	@ (8003198 <HAL_RCC_ClockConfig+0x1e4>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	4a5b      	ldr	r2, [pc, #364]	@ (800319c <HAL_RCC_ClockConfig+0x1e8>)
 800302e:	401a      	ands	r2, r3
 8003030:	4b59      	ldr	r3, [pc, #356]	@ (8003198 <HAL_RCC_ClockConfig+0x1e4>)
 8003032:	21b0      	movs	r1, #176	@ 0xb0
 8003034:	0109      	lsls	r1, r1, #4
 8003036:	430a      	orrs	r2, r1
 8003038:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800303a:	4b57      	ldr	r3, [pc, #348]	@ (8003198 <HAL_RCC_ClockConfig+0x1e4>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	4a58      	ldr	r2, [pc, #352]	@ (80031a0 <HAL_RCC_ClockConfig+0x1ec>)
 8003040:	4013      	ands	r3, r2
 8003042:	0019      	movs	r1, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68da      	ldr	r2, [r3, #12]
 8003048:	4b53      	ldr	r3, [pc, #332]	@ (8003198 <HAL_RCC_ClockConfig+0x1e4>)
 800304a:	430a      	orrs	r2, r1
 800304c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2201      	movs	r2, #1
 8003054:	4013      	ands	r3, r2
 8003056:	d04b      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d107      	bne.n	8003070 <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003060:	4b4d      	ldr	r3, [pc, #308]	@ (8003198 <HAL_RCC_ClockConfig+0x1e4>)
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	2380      	movs	r3, #128	@ 0x80
 8003066:	029b      	lsls	r3, r3, #10
 8003068:	4013      	ands	r3, r2
 800306a:	d11f      	bne.n	80030ac <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e08b      	b.n	8003188 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d107      	bne.n	8003088 <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003078:	4b47      	ldr	r3, [pc, #284]	@ (8003198 <HAL_RCC_ClockConfig+0x1e4>)
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	2380      	movs	r3, #128	@ 0x80
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	4013      	ands	r3, r2
 8003082:	d113      	bne.n	80030ac <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e07f      	b.n	8003188 <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	2b03      	cmp	r3, #3
 800308e:	d106      	bne.n	800309e <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8003090:	4b41      	ldr	r3, [pc, #260]	@ (8003198 <HAL_RCC_ClockConfig+0x1e4>)
 8003092:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003094:	2202      	movs	r2, #2
 8003096:	4013      	ands	r3, r2
 8003098:	d108      	bne.n	80030ac <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e074      	b.n	8003188 <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800309e:	4b3e      	ldr	r3, [pc, #248]	@ (8003198 <HAL_RCC_ClockConfig+0x1e4>)
 80030a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a2:	2202      	movs	r2, #2
 80030a4:	4013      	ands	r3, r2
 80030a6:	d101      	bne.n	80030ac <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e06d      	b.n	8003188 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030ac:	4b3a      	ldr	r3, [pc, #232]	@ (8003198 <HAL_RCC_ClockConfig+0x1e4>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	2207      	movs	r2, #7
 80030b2:	4393      	bics	r3, r2
 80030b4:	0019      	movs	r1, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	4b37      	ldr	r3, [pc, #220]	@ (8003198 <HAL_RCC_ClockConfig+0x1e4>)
 80030bc:	430a      	orrs	r2, r1
 80030be:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030c0:	f7fe fd36 	bl	8001b30 <HAL_GetTick>
 80030c4:	0003      	movs	r3, r0
 80030c6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c8:	e009      	b.n	80030de <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80030ca:	f7fe fd31 	bl	8001b30 <HAL_GetTick>
 80030ce:	0002      	movs	r2, r0
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	4a2f      	ldr	r2, [pc, #188]	@ (8003194 <HAL_RCC_ClockConfig+0x1e0>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e054      	b.n	8003188 <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030de:	4b2e      	ldr	r3, [pc, #184]	@ (8003198 <HAL_RCC_ClockConfig+0x1e4>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	2238      	movs	r2, #56	@ 0x38
 80030e4:	401a      	ands	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d1ec      	bne.n	80030ca <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030f0:	4b27      	ldr	r3, [pc, #156]	@ (8003190 <HAL_RCC_ClockConfig+0x1dc>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2207      	movs	r2, #7
 80030f6:	4013      	ands	r3, r2
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d21e      	bcs.n	800313c <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fe:	4b24      	ldr	r3, [pc, #144]	@ (8003190 <HAL_RCC_ClockConfig+0x1dc>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2207      	movs	r2, #7
 8003104:	4393      	bics	r3, r2
 8003106:	0019      	movs	r1, r3
 8003108:	4b21      	ldr	r3, [pc, #132]	@ (8003190 <HAL_RCC_ClockConfig+0x1dc>)
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	430a      	orrs	r2, r1
 800310e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003110:	f7fe fd0e 	bl	8001b30 <HAL_GetTick>
 8003114:	0003      	movs	r3, r0
 8003116:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003118:	e009      	b.n	800312e <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800311a:	f7fe fd09 	bl	8001b30 <HAL_GetTick>
 800311e:	0002      	movs	r2, r0
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	4a1b      	ldr	r2, [pc, #108]	@ (8003194 <HAL_RCC_ClockConfig+0x1e0>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d901      	bls.n	800312e <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e02c      	b.n	8003188 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800312e:	4b18      	ldr	r3, [pc, #96]	@ (8003190 <HAL_RCC_ClockConfig+0x1dc>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2207      	movs	r2, #7
 8003134:	4013      	ands	r3, r2
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	429a      	cmp	r2, r3
 800313a:	d1ee      	bne.n	800311a <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2204      	movs	r2, #4
 8003142:	4013      	ands	r3, r2
 8003144:	d009      	beq.n	800315a <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003146:	4b14      	ldr	r3, [pc, #80]	@ (8003198 <HAL_RCC_ClockConfig+0x1e4>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	4a16      	ldr	r2, [pc, #88]	@ (80031a4 <HAL_RCC_ClockConfig+0x1f0>)
 800314c:	4013      	ands	r3, r2
 800314e:	0019      	movs	r1, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691a      	ldr	r2, [r3, #16]
 8003154:	4b10      	ldr	r3, [pc, #64]	@ (8003198 <HAL_RCC_ClockConfig+0x1e4>)
 8003156:	430a      	orrs	r2, r1
 8003158:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800315a:	f000 f82b 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 800315e:	0001      	movs	r1, r0
 8003160:	4b0d      	ldr	r3, [pc, #52]	@ (8003198 <HAL_RCC_ClockConfig+0x1e4>)
 8003162:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003164:	0a1b      	lsrs	r3, r3, #8
 8003166:	220f      	movs	r2, #15
 8003168:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800316a:	4b0f      	ldr	r3, [pc, #60]	@ (80031a8 <HAL_RCC_ClockConfig+0x1f4>)
 800316c:	0092      	lsls	r2, r2, #2
 800316e:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003170:	221f      	movs	r2, #31
 8003172:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003174:	000a      	movs	r2, r1
 8003176:	40da      	lsrs	r2, r3
 8003178:	4b0c      	ldr	r3, [pc, #48]	@ (80031ac <HAL_RCC_ClockConfig+0x1f8>)
 800317a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800317c:	4b0c      	ldr	r3, [pc, #48]	@ (80031b0 <HAL_RCC_ClockConfig+0x1fc>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	0018      	movs	r0, r3
 8003182:	f7fe fc79 	bl	8001a78 <HAL_InitTick>
 8003186:	0003      	movs	r3, r0
}
 8003188:	0018      	movs	r0, r3
 800318a:	46bd      	mov	sp, r7
 800318c:	b004      	add	sp, #16
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40022000 	.word	0x40022000
 8003194:	00001388 	.word	0x00001388
 8003198:	40021000 	.word	0x40021000
 800319c:	ffff84ff 	.word	0xffff84ff
 80031a0:	fffff0ff 	.word	0xfffff0ff
 80031a4:	ffff8fff 	.word	0xffff8fff
 80031a8:	08003fec 	.word	0x08003fec
 80031ac:	20000000 	.word	0x20000000
 80031b0:	20000004 	.word	0x20000004

080031b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80031ba:	4b1c      	ldr	r3, [pc, #112]	@ (800322c <HAL_RCC_GetSysClockFreq+0x78>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	2238      	movs	r2, #56	@ 0x38
 80031c0:	4013      	ands	r3, r2
 80031c2:	d10f      	bne.n	80031e4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80031c4:	4b19      	ldr	r3, [pc, #100]	@ (800322c <HAL_RCC_GetSysClockFreq+0x78>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	0adb      	lsrs	r3, r3, #11
 80031ca:	2207      	movs	r2, #7
 80031cc:	4013      	ands	r3, r2
 80031ce:	2201      	movs	r2, #1
 80031d0:	409a      	lsls	r2, r3
 80031d2:	0013      	movs	r3, r2
 80031d4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80031d6:	6839      	ldr	r1, [r7, #0]
 80031d8:	4815      	ldr	r0, [pc, #84]	@ (8003230 <HAL_RCC_GetSysClockFreq+0x7c>)
 80031da:	f7fc ff95 	bl	8000108 <__udivsi3>
 80031de:	0003      	movs	r3, r0
 80031e0:	607b      	str	r3, [r7, #4]
 80031e2:	e01e      	b.n	8003222 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80031e4:	4b11      	ldr	r3, [pc, #68]	@ (800322c <HAL_RCC_GetSysClockFreq+0x78>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	2238      	movs	r2, #56	@ 0x38
 80031ea:	4013      	ands	r3, r2
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d102      	bne.n	80031f6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031f0:	4b10      	ldr	r3, [pc, #64]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x80>)
 80031f2:	607b      	str	r3, [r7, #4]
 80031f4:	e015      	b.n	8003222 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80031f6:	4b0d      	ldr	r3, [pc, #52]	@ (800322c <HAL_RCC_GetSysClockFreq+0x78>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	2238      	movs	r2, #56	@ 0x38
 80031fc:	4013      	ands	r3, r2
 80031fe:	2b20      	cmp	r3, #32
 8003200:	d103      	bne.n	800320a <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003202:	2380      	movs	r3, #128	@ 0x80
 8003204:	021b      	lsls	r3, r3, #8
 8003206:	607b      	str	r3, [r7, #4]
 8003208:	e00b      	b.n	8003222 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800320a:	4b08      	ldr	r3, [pc, #32]	@ (800322c <HAL_RCC_GetSysClockFreq+0x78>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	2238      	movs	r2, #56	@ 0x38
 8003210:	4013      	ands	r3, r2
 8003212:	2b18      	cmp	r3, #24
 8003214:	d103      	bne.n	800321e <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003216:	23fa      	movs	r3, #250	@ 0xfa
 8003218:	01db      	lsls	r3, r3, #7
 800321a:	607b      	str	r3, [r7, #4]
 800321c:	e001      	b.n	8003222 <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 800321e:	2300      	movs	r3, #0
 8003220:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8003222:	687b      	ldr	r3, [r7, #4]
}
 8003224:	0018      	movs	r0, r3
 8003226:	46bd      	mov	sp, r7
 8003228:	b002      	add	sp, #8
 800322a:	bd80      	pop	{r7, pc}
 800322c:	40021000 	.word	0x40021000
 8003230:	02dc6c00 	.word	0x02dc6c00
 8003234:	007a1200 	.word	0x007a1200

08003238 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800323c:	f7ff ffba 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 8003240:	0001      	movs	r1, r0
 8003242:	4b09      	ldr	r3, [pc, #36]	@ (8003268 <HAL_RCC_GetHCLKFreq+0x30>)
 8003244:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003246:	0a1b      	lsrs	r3, r3, #8
 8003248:	220f      	movs	r2, #15
 800324a:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800324c:	4b07      	ldr	r3, [pc, #28]	@ (800326c <HAL_RCC_GetHCLKFreq+0x34>)
 800324e:	0092      	lsls	r2, r2, #2
 8003250:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003252:	221f      	movs	r2, #31
 8003254:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003256:	000a      	movs	r2, r1
 8003258:	40da      	lsrs	r2, r3
 800325a:	4b05      	ldr	r3, [pc, #20]	@ (8003270 <HAL_RCC_GetHCLKFreq+0x38>)
 800325c:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 800325e:	4b04      	ldr	r3, [pc, #16]	@ (8003270 <HAL_RCC_GetHCLKFreq+0x38>)
 8003260:	681b      	ldr	r3, [r3, #0]
}
 8003262:	0018      	movs	r0, r3
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40021000 	.word	0x40021000
 800326c:	08003fec 	.word	0x08003fec
 8003270:	20000000 	.word	0x20000000

08003274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8003278:	f7ff ffde 	bl	8003238 <HAL_RCC_GetHCLKFreq>
 800327c:	0001      	movs	r1, r0
 800327e:	4b07      	ldr	r3, [pc, #28]	@ (800329c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	0b1b      	lsrs	r3, r3, #12
 8003284:	2207      	movs	r2, #7
 8003286:	401a      	ands	r2, r3
 8003288:	4b05      	ldr	r3, [pc, #20]	@ (80032a0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800328a:	0092      	lsls	r2, r2, #2
 800328c:	58d3      	ldr	r3, [r2, r3]
 800328e:	221f      	movs	r2, #31
 8003290:	4013      	ands	r3, r2
 8003292:	40d9      	lsrs	r1, r3
 8003294:	000b      	movs	r3, r1
}
 8003296:	0018      	movs	r0, r3
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40021000 	.word	0x40021000
 80032a0:	0800402c 	.word	0x0800402c

080032a4 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80032ac:	2313      	movs	r3, #19
 80032ae:	18fb      	adds	r3, r7, r3
 80032b0:	2200      	movs	r2, #0
 80032b2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032b4:	2312      	movs	r3, #18
 80032b6:	18fb      	adds	r3, r7, r3
 80032b8:	2200      	movs	r2, #0
 80032ba:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2240      	movs	r2, #64	@ 0x40
 80032c2:	4013      	ands	r3, r2
 80032c4:	d100      	bne.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x24>
 80032c6:	e079      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032c8:	2011      	movs	r0, #17
 80032ca:	183b      	adds	r3, r7, r0
 80032cc:	2200      	movs	r2, #0
 80032ce:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032d0:	4b63      	ldr	r3, [pc, #396]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032d4:	2380      	movs	r3, #128	@ 0x80
 80032d6:	055b      	lsls	r3, r3, #21
 80032d8:	4013      	ands	r3, r2
 80032da:	d110      	bne.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032dc:	4b60      	ldr	r3, [pc, #384]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032e0:	4b5f      	ldr	r3, [pc, #380]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032e2:	2180      	movs	r1, #128	@ 0x80
 80032e4:	0549      	lsls	r1, r1, #21
 80032e6:	430a      	orrs	r2, r1
 80032e8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80032ea:	4b5d      	ldr	r3, [pc, #372]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032ee:	2380      	movs	r3, #128	@ 0x80
 80032f0:	055b      	lsls	r3, r3, #21
 80032f2:	4013      	ands	r3, r2
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032f8:	183b      	adds	r3, r7, r0
 80032fa:	2201      	movs	r2, #1
 80032fc:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80032fe:	4b58      	ldr	r3, [pc, #352]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003300:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003302:	23c0      	movs	r3, #192	@ 0xc0
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4013      	ands	r3, r2
 8003308:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d019      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	429a      	cmp	r2, r3
 8003318:	d014      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 800331a:	4b51      	ldr	r3, [pc, #324]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800331c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800331e:	4a51      	ldr	r2, [pc, #324]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003320:	4013      	ands	r3, r2
 8003322:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003324:	4b4e      	ldr	r3, [pc, #312]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003326:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003328:	4b4d      	ldr	r3, [pc, #308]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800332a:	2180      	movs	r1, #128	@ 0x80
 800332c:	0249      	lsls	r1, r1, #9
 800332e:	430a      	orrs	r2, r1
 8003330:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003332:	4b4b      	ldr	r3, [pc, #300]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003334:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003336:	4b4a      	ldr	r3, [pc, #296]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003338:	494b      	ldr	r1, [pc, #300]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800333a:	400a      	ands	r2, r1
 800333c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 800333e:	4b48      	ldr	r3, [pc, #288]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	2201      	movs	r2, #1
 8003348:	4013      	ands	r3, r2
 800334a:	d016      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334c:	f7fe fbf0 	bl	8001b30 <HAL_GetTick>
 8003350:	0003      	movs	r3, r0
 8003352:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003354:	e00c      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003356:	f7fe fbeb 	bl	8001b30 <HAL_GetTick>
 800335a:	0002      	movs	r2, r0
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	4a42      	ldr	r2, [pc, #264]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d904      	bls.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8003366:	2313      	movs	r3, #19
 8003368:	18fb      	adds	r3, r7, r3
 800336a:	2203      	movs	r2, #3
 800336c:	701a      	strb	r2, [r3, #0]
          break;
 800336e:	e004      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003370:	4b3b      	ldr	r3, [pc, #236]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003372:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003374:	2202      	movs	r2, #2
 8003376:	4013      	ands	r3, r2
 8003378:	d0ed      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 800337a:	2313      	movs	r3, #19
 800337c:	18fb      	adds	r3, r7, r3
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10a      	bne.n	800339a <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003384:	4b36      	ldr	r3, [pc, #216]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003388:	4a36      	ldr	r2, [pc, #216]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800338a:	4013      	ands	r3, r2
 800338c:	0019      	movs	r1, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	699a      	ldr	r2, [r3, #24]
 8003392:	4b33      	ldr	r3, [pc, #204]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003394:	430a      	orrs	r2, r1
 8003396:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003398:	e005      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800339a:	2312      	movs	r3, #18
 800339c:	18fb      	adds	r3, r7, r3
 800339e:	2213      	movs	r2, #19
 80033a0:	18ba      	adds	r2, r7, r2
 80033a2:	7812      	ldrb	r2, [r2, #0]
 80033a4:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033a6:	2311      	movs	r3, #17
 80033a8:	18fb      	adds	r3, r7, r3
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d105      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033b0:	4b2b      	ldr	r3, [pc, #172]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033b4:	4b2a      	ldr	r3, [pc, #168]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033b6:	492e      	ldr	r1, [pc, #184]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80033b8:	400a      	ands	r2, r1
 80033ba:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2201      	movs	r2, #1
 80033c2:	4013      	ands	r3, r2
 80033c4:	d009      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033c6:	4b26      	ldr	r3, [pc, #152]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ca:	2203      	movs	r2, #3
 80033cc:	4393      	bics	r3, r2
 80033ce:	0019      	movs	r1, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	4b22      	ldr	r3, [pc, #136]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033d6:	430a      	orrs	r2, r1
 80033d8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2202      	movs	r2, #2
 80033e0:	4013      	ands	r3, r2
 80033e2:	d009      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033e4:	4b1e      	ldr	r3, [pc, #120]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033e8:	4a22      	ldr	r2, [pc, #136]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ea:	4013      	ands	r3, r2
 80033ec:	0019      	movs	r1, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033f4:	430a      	orrs	r2, r1
 80033f6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2220      	movs	r2, #32
 80033fe:	4013      	ands	r3, r2
 8003400:	d008      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003402:	4b17      	ldr	r3, [pc, #92]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	0899      	lsrs	r1, r3, #2
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	695a      	ldr	r2, [r3, #20]
 800340e:	4b14      	ldr	r3, [pc, #80]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003410:	430a      	orrs	r2, r1
 8003412:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2204      	movs	r2, #4
 800341a:	4013      	ands	r3, r2
 800341c:	d009      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800341e:	4b10      	ldr	r3, [pc, #64]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003422:	4a15      	ldr	r2, [pc, #84]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003424:	4013      	ands	r3, r2
 8003426:	0019      	movs	r1, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691a      	ldr	r2, [r3, #16]
 800342c:	4b0c      	ldr	r3, [pc, #48]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800342e:	430a      	orrs	r2, r1
 8003430:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2280      	movs	r2, #128	@ 0x80
 8003438:	4013      	ands	r3, r2
 800343a:	d009      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 800343c:	4b08      	ldr	r3, [pc, #32]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	22e0      	movs	r2, #224	@ 0xe0
 8003442:	4393      	bics	r3, r2
 8003444:	0019      	movs	r1, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	4b05      	ldr	r3, [pc, #20]	@ (8003460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800344c:	430a      	orrs	r2, r1
 800344e:	601a      	str	r2, [r3, #0]
  }
  return status;
 8003450:	2312      	movs	r3, #18
 8003452:	18fb      	adds	r3, r7, r3
 8003454:	781b      	ldrb	r3, [r3, #0]
}
 8003456:	0018      	movs	r0, r3
 8003458:	46bd      	mov	sp, r7
 800345a:	b006      	add	sp, #24
 800345c:	bd80      	pop	{r7, pc}
 800345e:	46c0      	nop			@ (mov r8, r8)
 8003460:	40021000 	.word	0x40021000
 8003464:	fffffcff 	.word	0xfffffcff
 8003468:	fffeffff 	.word	0xfffeffff
 800346c:	00001388 	.word	0x00001388
 8003470:	efffffff 	.word	0xefffffff
 8003474:	ffffcfff 	.word	0xffffcfff
 8003478:	ffff3fff 	.word	0xffff3fff

0800347c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e046      	b.n	800351c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2288      	movs	r2, #136	@ 0x88
 8003492:	589b      	ldr	r3, [r3, r2]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d107      	bne.n	80034a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2284      	movs	r2, #132	@ 0x84
 800349c:	2100      	movs	r1, #0
 800349e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	0018      	movs	r0, r3
 80034a4:	f7fe f9fc 	bl	80018a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2288      	movs	r2, #136	@ 0x88
 80034ac:	2124      	movs	r1, #36	@ 0x24
 80034ae:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2101      	movs	r1, #1
 80034bc:	438a      	bics	r2, r1
 80034be:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	0018      	movs	r0, r3
 80034cc:	f000 f9aa 	bl	8003824 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	0018      	movs	r0, r3
 80034d4:	f000 f828 	bl	8003528 <UART_SetConfig>
 80034d8:	0003      	movs	r3, r0
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d101      	bne.n	80034e2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e01c      	b.n	800351c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	490d      	ldr	r1, [pc, #52]	@ (8003524 <HAL_UART_Init+0xa8>)
 80034ee:	400a      	ands	r2, r1
 80034f0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	212a      	movs	r1, #42	@ 0x2a
 80034fe:	438a      	bics	r2, r1
 8003500:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2101      	movs	r1, #1
 800350e:	430a      	orrs	r2, r1
 8003510:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	0018      	movs	r0, r3
 8003516:	f000 fa39 	bl	800398c <UART_CheckIdleState>
 800351a:	0003      	movs	r3, r0
}
 800351c:	0018      	movs	r0, r3
 800351e:	46bd      	mov	sp, r7
 8003520:	b002      	add	sp, #8
 8003522:	bd80      	pop	{r7, pc}
 8003524:	ffffb7ff 	.word	0xffffb7ff

08003528 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b088      	sub	sp, #32
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003530:	231e      	movs	r3, #30
 8003532:	18fb      	adds	r3, r7, r3
 8003534:	2200      	movs	r2, #0
 8003536:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	431a      	orrs	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	69db      	ldr	r3, [r3, #28]
 800354c:	4313      	orrs	r3, r2
 800354e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4aab      	ldr	r2, [pc, #684]	@ (8003804 <UART_SetConfig+0x2dc>)
 8003558:	4013      	ands	r3, r2
 800355a:	0019      	movs	r1, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	430a      	orrs	r2, r1
 8003564:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	4aa6      	ldr	r2, [pc, #664]	@ (8003808 <UART_SetConfig+0x2e0>)
 800356e:	4013      	ands	r3, r2
 8003570:	0019      	movs	r1, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68da      	ldr	r2, [r3, #12]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	430a      	orrs	r2, r1
 800357c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	697a      	ldr	r2, [r7, #20]
 800358a:	4313      	orrs	r3, r2
 800358c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	4a9d      	ldr	r2, [pc, #628]	@ (800380c <UART_SetConfig+0x2e4>)
 8003596:	4013      	ands	r3, r2
 8003598:	0019      	movs	r1, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	430a      	orrs	r2, r1
 80035a2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035aa:	220f      	movs	r2, #15
 80035ac:	4393      	bics	r3, r2
 80035ae:	0019      	movs	r1, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a93      	ldr	r2, [pc, #588]	@ (8003810 <UART_SetConfig+0x2e8>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d127      	bne.n	8003616 <UART_SetConfig+0xee>
 80035c6:	4b93      	ldr	r3, [pc, #588]	@ (8003814 <UART_SetConfig+0x2ec>)
 80035c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ca:	2203      	movs	r2, #3
 80035cc:	4013      	ands	r3, r2
 80035ce:	2b03      	cmp	r3, #3
 80035d0:	d017      	beq.n	8003602 <UART_SetConfig+0xda>
 80035d2:	d81b      	bhi.n	800360c <UART_SetConfig+0xe4>
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d00a      	beq.n	80035ee <UART_SetConfig+0xc6>
 80035d8:	d818      	bhi.n	800360c <UART_SetConfig+0xe4>
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d002      	beq.n	80035e4 <UART_SetConfig+0xbc>
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d00a      	beq.n	80035f8 <UART_SetConfig+0xd0>
 80035e2:	e013      	b.n	800360c <UART_SetConfig+0xe4>
 80035e4:	231f      	movs	r3, #31
 80035e6:	18fb      	adds	r3, r7, r3
 80035e8:	2200      	movs	r2, #0
 80035ea:	701a      	strb	r2, [r3, #0]
 80035ec:	e021      	b.n	8003632 <UART_SetConfig+0x10a>
 80035ee:	231f      	movs	r3, #31
 80035f0:	18fb      	adds	r3, r7, r3
 80035f2:	2202      	movs	r2, #2
 80035f4:	701a      	strb	r2, [r3, #0]
 80035f6:	e01c      	b.n	8003632 <UART_SetConfig+0x10a>
 80035f8:	231f      	movs	r3, #31
 80035fa:	18fb      	adds	r3, r7, r3
 80035fc:	2204      	movs	r2, #4
 80035fe:	701a      	strb	r2, [r3, #0]
 8003600:	e017      	b.n	8003632 <UART_SetConfig+0x10a>
 8003602:	231f      	movs	r3, #31
 8003604:	18fb      	adds	r3, r7, r3
 8003606:	2208      	movs	r2, #8
 8003608:	701a      	strb	r2, [r3, #0]
 800360a:	e012      	b.n	8003632 <UART_SetConfig+0x10a>
 800360c:	231f      	movs	r3, #31
 800360e:	18fb      	adds	r3, r7, r3
 8003610:	2210      	movs	r2, #16
 8003612:	701a      	strb	r2, [r3, #0]
 8003614:	e00d      	b.n	8003632 <UART_SetConfig+0x10a>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a7f      	ldr	r2, [pc, #508]	@ (8003818 <UART_SetConfig+0x2f0>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d104      	bne.n	800362a <UART_SetConfig+0x102>
 8003620:	231f      	movs	r3, #31
 8003622:	18fb      	adds	r3, r7, r3
 8003624:	2200      	movs	r2, #0
 8003626:	701a      	strb	r2, [r3, #0]
 8003628:	e003      	b.n	8003632 <UART_SetConfig+0x10a>
 800362a:	231f      	movs	r3, #31
 800362c:	18fb      	adds	r3, r7, r3
 800362e:	2210      	movs	r2, #16
 8003630:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69da      	ldr	r2, [r3, #28]
 8003636:	2380      	movs	r3, #128	@ 0x80
 8003638:	021b      	lsls	r3, r3, #8
 800363a:	429a      	cmp	r2, r3
 800363c:	d000      	beq.n	8003640 <UART_SetConfig+0x118>
 800363e:	e06f      	b.n	8003720 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8003640:	231f      	movs	r3, #31
 8003642:	18fb      	adds	r3, r7, r3
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	2b08      	cmp	r3, #8
 8003648:	d01f      	beq.n	800368a <UART_SetConfig+0x162>
 800364a:	dc22      	bgt.n	8003692 <UART_SetConfig+0x16a>
 800364c:	2b04      	cmp	r3, #4
 800364e:	d017      	beq.n	8003680 <UART_SetConfig+0x158>
 8003650:	dc1f      	bgt.n	8003692 <UART_SetConfig+0x16a>
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <UART_SetConfig+0x134>
 8003656:	2b02      	cmp	r3, #2
 8003658:	d005      	beq.n	8003666 <UART_SetConfig+0x13e>
 800365a:	e01a      	b.n	8003692 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800365c:	f7ff fe0a 	bl	8003274 <HAL_RCC_GetPCLK1Freq>
 8003660:	0003      	movs	r3, r0
 8003662:	61bb      	str	r3, [r7, #24]
        break;
 8003664:	e01c      	b.n	80036a0 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8003666:	4b6b      	ldr	r3, [pc, #428]	@ (8003814 <UART_SetConfig+0x2ec>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	095b      	lsrs	r3, r3, #5
 800366c:	2207      	movs	r2, #7
 800366e:	4013      	ands	r3, r2
 8003670:	3301      	adds	r3, #1
 8003672:	0019      	movs	r1, r3
 8003674:	4869      	ldr	r0, [pc, #420]	@ (800381c <UART_SetConfig+0x2f4>)
 8003676:	f7fc fd47 	bl	8000108 <__udivsi3>
 800367a:	0003      	movs	r3, r0
 800367c:	61bb      	str	r3, [r7, #24]
        break;
 800367e:	e00f      	b.n	80036a0 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003680:	f7ff fd98 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 8003684:	0003      	movs	r3, r0
 8003686:	61bb      	str	r3, [r7, #24]
        break;
 8003688:	e00a      	b.n	80036a0 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800368a:	2380      	movs	r3, #128	@ 0x80
 800368c:	021b      	lsls	r3, r3, #8
 800368e:	61bb      	str	r3, [r7, #24]
        break;
 8003690:	e006      	b.n	80036a0 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8003692:	2300      	movs	r3, #0
 8003694:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003696:	231e      	movs	r3, #30
 8003698:	18fb      	adds	r3, r7, r3
 800369a:	2201      	movs	r2, #1
 800369c:	701a      	strb	r2, [r3, #0]
        break;
 800369e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d100      	bne.n	80036a8 <UART_SetConfig+0x180>
 80036a6:	e097      	b.n	80037d8 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036ac:	4b5c      	ldr	r3, [pc, #368]	@ (8003820 <UART_SetConfig+0x2f8>)
 80036ae:	0052      	lsls	r2, r2, #1
 80036b0:	5ad3      	ldrh	r3, [r2, r3]
 80036b2:	0019      	movs	r1, r3
 80036b4:	69b8      	ldr	r0, [r7, #24]
 80036b6:	f7fc fd27 	bl	8000108 <__udivsi3>
 80036ba:	0003      	movs	r3, r0
 80036bc:	005a      	lsls	r2, r3, #1
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	085b      	lsrs	r3, r3, #1
 80036c4:	18d2      	adds	r2, r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	0019      	movs	r1, r3
 80036cc:	0010      	movs	r0, r2
 80036ce:	f7fc fd1b 	bl	8000108 <__udivsi3>
 80036d2:	0003      	movs	r3, r0
 80036d4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	2b0f      	cmp	r3, #15
 80036da:	d91c      	bls.n	8003716 <UART_SetConfig+0x1ee>
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	2380      	movs	r3, #128	@ 0x80
 80036e0:	025b      	lsls	r3, r3, #9
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d217      	bcs.n	8003716 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	200e      	movs	r0, #14
 80036ec:	183b      	adds	r3, r7, r0
 80036ee:	210f      	movs	r1, #15
 80036f0:	438a      	bics	r2, r1
 80036f2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	085b      	lsrs	r3, r3, #1
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	2207      	movs	r2, #7
 80036fc:	4013      	ands	r3, r2
 80036fe:	b299      	uxth	r1, r3
 8003700:	183b      	adds	r3, r7, r0
 8003702:	183a      	adds	r2, r7, r0
 8003704:	8812      	ldrh	r2, [r2, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	183a      	adds	r2, r7, r0
 8003710:	8812      	ldrh	r2, [r2, #0]
 8003712:	60da      	str	r2, [r3, #12]
 8003714:	e060      	b.n	80037d8 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8003716:	231e      	movs	r3, #30
 8003718:	18fb      	adds	r3, r7, r3
 800371a:	2201      	movs	r2, #1
 800371c:	701a      	strb	r2, [r3, #0]
 800371e:	e05b      	b.n	80037d8 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003720:	231f      	movs	r3, #31
 8003722:	18fb      	adds	r3, r7, r3
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b08      	cmp	r3, #8
 8003728:	d01f      	beq.n	800376a <UART_SetConfig+0x242>
 800372a:	dc22      	bgt.n	8003772 <UART_SetConfig+0x24a>
 800372c:	2b04      	cmp	r3, #4
 800372e:	d017      	beq.n	8003760 <UART_SetConfig+0x238>
 8003730:	dc1f      	bgt.n	8003772 <UART_SetConfig+0x24a>
 8003732:	2b00      	cmp	r3, #0
 8003734:	d002      	beq.n	800373c <UART_SetConfig+0x214>
 8003736:	2b02      	cmp	r3, #2
 8003738:	d005      	beq.n	8003746 <UART_SetConfig+0x21e>
 800373a:	e01a      	b.n	8003772 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800373c:	f7ff fd9a 	bl	8003274 <HAL_RCC_GetPCLK1Freq>
 8003740:	0003      	movs	r3, r0
 8003742:	61bb      	str	r3, [r7, #24]
        break;
 8003744:	e01c      	b.n	8003780 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8003746:	4b33      	ldr	r3, [pc, #204]	@ (8003814 <UART_SetConfig+0x2ec>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	095b      	lsrs	r3, r3, #5
 800374c:	2207      	movs	r2, #7
 800374e:	4013      	ands	r3, r2
 8003750:	3301      	adds	r3, #1
 8003752:	0019      	movs	r1, r3
 8003754:	4831      	ldr	r0, [pc, #196]	@ (800381c <UART_SetConfig+0x2f4>)
 8003756:	f7fc fcd7 	bl	8000108 <__udivsi3>
 800375a:	0003      	movs	r3, r0
 800375c:	61bb      	str	r3, [r7, #24]
        break;
 800375e:	e00f      	b.n	8003780 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003760:	f7ff fd28 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 8003764:	0003      	movs	r3, r0
 8003766:	61bb      	str	r3, [r7, #24]
        break;
 8003768:	e00a      	b.n	8003780 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800376a:	2380      	movs	r3, #128	@ 0x80
 800376c:	021b      	lsls	r3, r3, #8
 800376e:	61bb      	str	r3, [r7, #24]
        break;
 8003770:	e006      	b.n	8003780 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8003772:	2300      	movs	r3, #0
 8003774:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003776:	231e      	movs	r3, #30
 8003778:	18fb      	adds	r3, r7, r3
 800377a:	2201      	movs	r2, #1
 800377c:	701a      	strb	r2, [r3, #0]
        break;
 800377e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d028      	beq.n	80037d8 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800378a:	4b25      	ldr	r3, [pc, #148]	@ (8003820 <UART_SetConfig+0x2f8>)
 800378c:	0052      	lsls	r2, r2, #1
 800378e:	5ad3      	ldrh	r3, [r2, r3]
 8003790:	0019      	movs	r1, r3
 8003792:	69b8      	ldr	r0, [r7, #24]
 8003794:	f7fc fcb8 	bl	8000108 <__udivsi3>
 8003798:	0003      	movs	r3, r0
 800379a:	001a      	movs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	085b      	lsrs	r3, r3, #1
 80037a2:	18d2      	adds	r2, r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	0019      	movs	r1, r3
 80037aa:	0010      	movs	r0, r2
 80037ac:	f7fc fcac 	bl	8000108 <__udivsi3>
 80037b0:	0003      	movs	r3, r0
 80037b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	2b0f      	cmp	r3, #15
 80037b8:	d90a      	bls.n	80037d0 <UART_SetConfig+0x2a8>
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	2380      	movs	r3, #128	@ 0x80
 80037be:	025b      	lsls	r3, r3, #9
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d205      	bcs.n	80037d0 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	60da      	str	r2, [r3, #12]
 80037ce:	e003      	b.n	80037d8 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80037d0:	231e      	movs	r3, #30
 80037d2:	18fb      	adds	r3, r7, r3
 80037d4:	2201      	movs	r2, #1
 80037d6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	226a      	movs	r2, #106	@ 0x6a
 80037dc:	2101      	movs	r1, #1
 80037de:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2268      	movs	r2, #104	@ 0x68
 80037e4:	2101      	movs	r1, #1
 80037e6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80037f4:	231e      	movs	r3, #30
 80037f6:	18fb      	adds	r3, r7, r3
 80037f8:	781b      	ldrb	r3, [r3, #0]
}
 80037fa:	0018      	movs	r0, r3
 80037fc:	46bd      	mov	sp, r7
 80037fe:	b008      	add	sp, #32
 8003800:	bd80      	pop	{r7, pc}
 8003802:	46c0      	nop			@ (mov r8, r8)
 8003804:	cfff69f3 	.word	0xcfff69f3
 8003808:	ffffcfff 	.word	0xffffcfff
 800380c:	11fff4ff 	.word	0x11fff4ff
 8003810:	40013800 	.word	0x40013800
 8003814:	40021000 	.word	0x40021000
 8003818:	40004400 	.word	0x40004400
 800381c:	02dc6c00 	.word	0x02dc6c00
 8003820:	0800404c 	.word	0x0800404c

08003824 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003830:	2208      	movs	r2, #8
 8003832:	4013      	ands	r3, r2
 8003834:	d00b      	beq.n	800384e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	4a4a      	ldr	r2, [pc, #296]	@ (8003968 <UART_AdvFeatureConfig+0x144>)
 800383e:	4013      	ands	r3, r2
 8003840:	0019      	movs	r1, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003852:	2201      	movs	r2, #1
 8003854:	4013      	ands	r3, r2
 8003856:	d00b      	beq.n	8003870 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	4a43      	ldr	r2, [pc, #268]	@ (800396c <UART_AdvFeatureConfig+0x148>)
 8003860:	4013      	ands	r3, r2
 8003862:	0019      	movs	r1, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003874:	2202      	movs	r2, #2
 8003876:	4013      	ands	r3, r2
 8003878:	d00b      	beq.n	8003892 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	4a3b      	ldr	r2, [pc, #236]	@ (8003970 <UART_AdvFeatureConfig+0x14c>)
 8003882:	4013      	ands	r3, r2
 8003884:	0019      	movs	r1, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	430a      	orrs	r2, r1
 8003890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003896:	2204      	movs	r2, #4
 8003898:	4013      	ands	r3, r2
 800389a:	d00b      	beq.n	80038b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	4a34      	ldr	r2, [pc, #208]	@ (8003974 <UART_AdvFeatureConfig+0x150>)
 80038a4:	4013      	ands	r3, r2
 80038a6:	0019      	movs	r1, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b8:	2210      	movs	r2, #16
 80038ba:	4013      	ands	r3, r2
 80038bc:	d00b      	beq.n	80038d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	4a2c      	ldr	r2, [pc, #176]	@ (8003978 <UART_AdvFeatureConfig+0x154>)
 80038c6:	4013      	ands	r3, r2
 80038c8:	0019      	movs	r1, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038da:	2220      	movs	r2, #32
 80038dc:	4013      	ands	r3, r2
 80038de:	d00b      	beq.n	80038f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	4a25      	ldr	r2, [pc, #148]	@ (800397c <UART_AdvFeatureConfig+0x158>)
 80038e8:	4013      	ands	r3, r2
 80038ea:	0019      	movs	r1, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038fc:	2240      	movs	r2, #64	@ 0x40
 80038fe:	4013      	ands	r3, r2
 8003900:	d01d      	beq.n	800393e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	4a1d      	ldr	r2, [pc, #116]	@ (8003980 <UART_AdvFeatureConfig+0x15c>)
 800390a:	4013      	ands	r3, r2
 800390c:	0019      	movs	r1, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800391e:	2380      	movs	r3, #128	@ 0x80
 8003920:	035b      	lsls	r3, r3, #13
 8003922:	429a      	cmp	r2, r3
 8003924:	d10b      	bne.n	800393e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	4a15      	ldr	r2, [pc, #84]	@ (8003984 <UART_AdvFeatureConfig+0x160>)
 800392e:	4013      	ands	r3, r2
 8003930:	0019      	movs	r1, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	430a      	orrs	r2, r1
 800393c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003942:	2280      	movs	r2, #128	@ 0x80
 8003944:	4013      	ands	r3, r2
 8003946:	d00b      	beq.n	8003960 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	4a0e      	ldr	r2, [pc, #56]	@ (8003988 <UART_AdvFeatureConfig+0x164>)
 8003950:	4013      	ands	r3, r2
 8003952:	0019      	movs	r1, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	430a      	orrs	r2, r1
 800395e:	605a      	str	r2, [r3, #4]
  }
}
 8003960:	46c0      	nop			@ (mov r8, r8)
 8003962:	46bd      	mov	sp, r7
 8003964:	b002      	add	sp, #8
 8003966:	bd80      	pop	{r7, pc}
 8003968:	ffff7fff 	.word	0xffff7fff
 800396c:	fffdffff 	.word	0xfffdffff
 8003970:	fffeffff 	.word	0xfffeffff
 8003974:	fffbffff 	.word	0xfffbffff
 8003978:	ffffefff 	.word	0xffffefff
 800397c:	ffffdfff 	.word	0xffffdfff
 8003980:	ffefffff 	.word	0xffefffff
 8003984:	ff9fffff 	.word	0xff9fffff
 8003988:	fff7ffff 	.word	0xfff7ffff

0800398c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b092      	sub	sp, #72	@ 0x48
 8003990:	af02      	add	r7, sp, #8
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2290      	movs	r2, #144	@ 0x90
 8003998:	2100      	movs	r1, #0
 800399a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800399c:	f7fe f8c8 	bl	8001b30 <HAL_GetTick>
 80039a0:	0003      	movs	r3, r0
 80039a2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2208      	movs	r2, #8
 80039ac:	4013      	ands	r3, r2
 80039ae:	2b08      	cmp	r3, #8
 80039b0:	d12d      	bne.n	8003a0e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039b4:	2280      	movs	r2, #128	@ 0x80
 80039b6:	0391      	lsls	r1, r2, #14
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	4a47      	ldr	r2, [pc, #284]	@ (8003ad8 <UART_CheckIdleState+0x14c>)
 80039bc:	9200      	str	r2, [sp, #0]
 80039be:	2200      	movs	r2, #0
 80039c0:	f000 f88e 	bl	8003ae0 <UART_WaitOnFlagUntilTimeout>
 80039c4:	1e03      	subs	r3, r0, #0
 80039c6:	d022      	beq.n	8003a0e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80039c8:	f3ef 8310 	mrs	r3, PRIMASK
 80039cc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80039ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80039d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039d2:	2301      	movs	r3, #1
 80039d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d8:	f383 8810 	msr	PRIMASK, r3
}
 80039dc:	46c0      	nop			@ (mov r8, r8)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2180      	movs	r1, #128	@ 0x80
 80039ea:	438a      	bics	r2, r1
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039f4:	f383 8810 	msr	PRIMASK, r3
}
 80039f8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2288      	movs	r2, #136	@ 0x88
 80039fe:	2120      	movs	r1, #32
 8003a00:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2284      	movs	r2, #132	@ 0x84
 8003a06:	2100      	movs	r1, #0
 8003a08:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e060      	b.n	8003ad0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2204      	movs	r2, #4
 8003a16:	4013      	ands	r3, r2
 8003a18:	2b04      	cmp	r3, #4
 8003a1a:	d146      	bne.n	8003aaa <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a1e:	2280      	movs	r2, #128	@ 0x80
 8003a20:	03d1      	lsls	r1, r2, #15
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	4a2c      	ldr	r2, [pc, #176]	@ (8003ad8 <UART_CheckIdleState+0x14c>)
 8003a26:	9200      	str	r2, [sp, #0]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f000 f859 	bl	8003ae0 <UART_WaitOnFlagUntilTimeout>
 8003a2e:	1e03      	subs	r3, r0, #0
 8003a30:	d03b      	beq.n	8003aaa <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003a32:	f3ef 8310 	mrs	r3, PRIMASK
 8003a36:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a38:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	f383 8810 	msr	PRIMASK, r3
}
 8003a46:	46c0      	nop			@ (mov r8, r8)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4922      	ldr	r1, [pc, #136]	@ (8003adc <UART_CheckIdleState+0x150>)
 8003a54:	400a      	ands	r2, r1
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	f383 8810 	msr	PRIMASK, r3
}
 8003a62:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003a64:	f3ef 8310 	mrs	r3, PRIMASK
 8003a68:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a6a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a6e:	2301      	movs	r3, #1
 8003a70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	f383 8810 	msr	PRIMASK, r3
}
 8003a78:	46c0      	nop			@ (mov r8, r8)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2101      	movs	r1, #1
 8003a86:	438a      	bics	r2, r1
 8003a88:	609a      	str	r2, [r3, #8]
 8003a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a8c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a8e:	6a3b      	ldr	r3, [r7, #32]
 8003a90:	f383 8810 	msr	PRIMASK, r3
}
 8003a94:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	228c      	movs	r2, #140	@ 0x8c
 8003a9a:	2120      	movs	r1, #32
 8003a9c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2284      	movs	r2, #132	@ 0x84
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e012      	b.n	8003ad0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2288      	movs	r2, #136	@ 0x88
 8003aae:	2120      	movs	r1, #32
 8003ab0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	228c      	movs	r2, #140	@ 0x8c
 8003ab6:	2120      	movs	r1, #32
 8003ab8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2284      	movs	r2, #132	@ 0x84
 8003aca:	2100      	movs	r1, #0
 8003acc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	b010      	add	sp, #64	@ 0x40
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	01ffffff 	.word	0x01ffffff
 8003adc:	fffffedf 	.word	0xfffffedf

08003ae0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	603b      	str	r3, [r7, #0]
 8003aec:	1dfb      	adds	r3, r7, #7
 8003aee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003af0:	e051      	b.n	8003b96 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	3301      	adds	r3, #1
 8003af6:	d04e      	beq.n	8003b96 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af8:	f7fe f81a 	bl	8001b30 <HAL_GetTick>
 8003afc:	0002      	movs	r2, r0
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d302      	bcc.n	8003b0e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e051      	b.n	8003bb6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2204      	movs	r2, #4
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	d03b      	beq.n	8003b96 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	2b80      	cmp	r3, #128	@ 0x80
 8003b22:	d038      	beq.n	8003b96 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	2b40      	cmp	r3, #64	@ 0x40
 8003b28:	d035      	beq.n	8003b96 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	69db      	ldr	r3, [r3, #28]
 8003b30:	2208      	movs	r2, #8
 8003b32:	4013      	ands	r3, r2
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d111      	bne.n	8003b5c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2208      	movs	r2, #8
 8003b3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	0018      	movs	r0, r3
 8003b44:	f000 f83c 	bl	8003bc0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2290      	movs	r2, #144	@ 0x90
 8003b4c:	2108      	movs	r1, #8
 8003b4e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2284      	movs	r2, #132	@ 0x84
 8003b54:	2100      	movs	r1, #0
 8003b56:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e02c      	b.n	8003bb6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	69da      	ldr	r2, [r3, #28]
 8003b62:	2380      	movs	r3, #128	@ 0x80
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	401a      	ands	r2, r3
 8003b68:	2380      	movs	r3, #128	@ 0x80
 8003b6a:	011b      	lsls	r3, r3, #4
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d112      	bne.n	8003b96 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2280      	movs	r2, #128	@ 0x80
 8003b76:	0112      	lsls	r2, r2, #4
 8003b78:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	f000 f81f 	bl	8003bc0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2290      	movs	r2, #144	@ 0x90
 8003b86:	2120      	movs	r1, #32
 8003b88:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2284      	movs	r2, #132	@ 0x84
 8003b8e:	2100      	movs	r1, #0
 8003b90:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e00f      	b.n	8003bb6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	425a      	negs	r2, r3
 8003ba6:	4153      	adcs	r3, r2
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	001a      	movs	r2, r3
 8003bac:	1dfb      	adds	r3, r7, #7
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d09e      	beq.n	8003af2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	b004      	add	sp, #16
 8003bbc:	bd80      	pop	{r7, pc}
	...

08003bc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08e      	sub	sp, #56	@ 0x38
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003bc8:	f3ef 8310 	mrs	r3, PRIMASK
 8003bcc:	617b      	str	r3, [r7, #20]
  return(result);
 8003bce:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003bd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	f383 8810 	msr	PRIMASK, r3
}
 8003bdc:	46c0      	nop			@ (mov r8, r8)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4926      	ldr	r1, [pc, #152]	@ (8003c84 <UART_EndRxTransfer+0xc4>)
 8003bea:	400a      	ands	r2, r1
 8003bec:	601a      	str	r2, [r3, #0]
 8003bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bf0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	f383 8810 	msr	PRIMASK, r3
}
 8003bf8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003bfa:	f3ef 8310 	mrs	r3, PRIMASK
 8003bfe:	623b      	str	r3, [r7, #32]
  return(result);
 8003c00:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003c02:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c04:	2301      	movs	r3, #1
 8003c06:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0a:	f383 8810 	msr	PRIMASK, r3
}
 8003c0e:	46c0      	nop			@ (mov r8, r8)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689a      	ldr	r2, [r3, #8]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	491b      	ldr	r1, [pc, #108]	@ (8003c88 <UART_EndRxTransfer+0xc8>)
 8003c1c:	400a      	ands	r2, r1
 8003c1e:	609a      	str	r2, [r3, #8]
 8003c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c22:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c26:	f383 8810 	msr	PRIMASK, r3
}
 8003c2a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d118      	bne.n	8003c66 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003c34:	f3ef 8310 	mrs	r3, PRIMASK
 8003c38:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c3a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c3e:	2301      	movs	r3, #1
 8003c40:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f383 8810 	msr	PRIMASK, r3
}
 8003c48:	46c0      	nop			@ (mov r8, r8)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2110      	movs	r1, #16
 8003c56:	438a      	bics	r2, r1
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	f383 8810 	msr	PRIMASK, r3
}
 8003c64:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	228c      	movs	r2, #140	@ 0x8c
 8003c6a:	2120      	movs	r1, #32
 8003c6c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003c7a:	46c0      	nop			@ (mov r8, r8)
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	b00e      	add	sp, #56	@ 0x38
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	46c0      	nop			@ (mov r8, r8)
 8003c84:	fffffedf 	.word	0xfffffedf
 8003c88:	effffffe 	.word	0xeffffffe

08003c8c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2284      	movs	r2, #132	@ 0x84
 8003c98:	5c9b      	ldrb	r3, [r3, r2]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d101      	bne.n	8003ca2 <HAL_UARTEx_DisableFifoMode+0x16>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	e027      	b.n	8003cf2 <HAL_UARTEx_DisableFifoMode+0x66>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2284      	movs	r2, #132	@ 0x84
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2288      	movs	r2, #136	@ 0x88
 8003cae:	2124      	movs	r1, #36	@ 0x24
 8003cb0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	438a      	bics	r2, r1
 8003cc8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	4a0b      	ldr	r2, [pc, #44]	@ (8003cfc <HAL_UARTEx_DisableFifoMode+0x70>)
 8003cce:	4013      	ands	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2288      	movs	r2, #136	@ 0x88
 8003ce4:	2120      	movs	r1, #32
 8003ce6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2284      	movs	r2, #132	@ 0x84
 8003cec:	2100      	movs	r1, #0
 8003cee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	b004      	add	sp, #16
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	46c0      	nop			@ (mov r8, r8)
 8003cfc:	dfffffff 	.word	0xdfffffff

08003d00 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2284      	movs	r2, #132	@ 0x84
 8003d0e:	5c9b      	ldrb	r3, [r3, r2]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d101      	bne.n	8003d18 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003d14:	2302      	movs	r3, #2
 8003d16:	e02e      	b.n	8003d76 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2284      	movs	r2, #132	@ 0x84
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2288      	movs	r2, #136	@ 0x88
 8003d24:	2124      	movs	r1, #36	@ 0x24
 8003d26:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	438a      	bics	r2, r1
 8003d3e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	08d9      	lsrs	r1, r3, #3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	430a      	orrs	r2, r1
 8003d52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	0018      	movs	r0, r3
 8003d58:	f000 f854 	bl	8003e04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2288      	movs	r2, #136	@ 0x88
 8003d68:	2120      	movs	r1, #32
 8003d6a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2284      	movs	r2, #132	@ 0x84
 8003d70:	2100      	movs	r1, #0
 8003d72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	0018      	movs	r0, r3
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	b004      	add	sp, #16
 8003d7c:	bd80      	pop	{r7, pc}
	...

08003d80 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2284      	movs	r2, #132	@ 0x84
 8003d8e:	5c9b      	ldrb	r3, [r3, r2]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d101      	bne.n	8003d98 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003d94:	2302      	movs	r3, #2
 8003d96:	e02f      	b.n	8003df8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2284      	movs	r2, #132	@ 0x84
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2288      	movs	r2, #136	@ 0x88
 8003da4:	2124      	movs	r1, #36	@ 0x24
 8003da6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2101      	movs	r1, #1
 8003dbc:	438a      	bics	r2, r1
 8003dbe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	4a0e      	ldr	r2, [pc, #56]	@ (8003e00 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003dc8:	4013      	ands	r3, r2
 8003dca:	0019      	movs	r1, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	0018      	movs	r0, r3
 8003dda:	f000 f813 	bl	8003e04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2288      	movs	r2, #136	@ 0x88
 8003dea:	2120      	movs	r1, #32
 8003dec:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2284      	movs	r2, #132	@ 0x84
 8003df2:	2100      	movs	r1, #0
 8003df4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	0018      	movs	r0, r3
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	b004      	add	sp, #16
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	f1ffffff 	.word	0xf1ffffff

08003e04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d108      	bne.n	8003e26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	226a      	movs	r2, #106	@ 0x6a
 8003e18:	2101      	movs	r1, #1
 8003e1a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2268      	movs	r2, #104	@ 0x68
 8003e20:	2101      	movs	r1, #1
 8003e22:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003e24:	e043      	b.n	8003eae <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003e26:	260f      	movs	r6, #15
 8003e28:	19bb      	adds	r3, r7, r6
 8003e2a:	2208      	movs	r2, #8
 8003e2c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003e2e:	200e      	movs	r0, #14
 8003e30:	183b      	adds	r3, r7, r0
 8003e32:	2208      	movs	r2, #8
 8003e34:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	0e5b      	lsrs	r3, r3, #25
 8003e3e:	b2da      	uxtb	r2, r3
 8003e40:	240d      	movs	r4, #13
 8003e42:	193b      	adds	r3, r7, r4
 8003e44:	2107      	movs	r1, #7
 8003e46:	400a      	ands	r2, r1
 8003e48:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	0f5b      	lsrs	r3, r3, #29
 8003e52:	b2da      	uxtb	r2, r3
 8003e54:	250c      	movs	r5, #12
 8003e56:	197b      	adds	r3, r7, r5
 8003e58:	2107      	movs	r1, #7
 8003e5a:	400a      	ands	r2, r1
 8003e5c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003e5e:	183b      	adds	r3, r7, r0
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	197a      	adds	r2, r7, r5
 8003e64:	7812      	ldrb	r2, [r2, #0]
 8003e66:	4914      	ldr	r1, [pc, #80]	@ (8003eb8 <UARTEx_SetNbDataToProcess+0xb4>)
 8003e68:	5c8a      	ldrb	r2, [r1, r2]
 8003e6a:	435a      	muls	r2, r3
 8003e6c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003e6e:	197b      	adds	r3, r7, r5
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	4a12      	ldr	r2, [pc, #72]	@ (8003ebc <UARTEx_SetNbDataToProcess+0xb8>)
 8003e74:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003e76:	0019      	movs	r1, r3
 8003e78:	f7fc f9d0 	bl	800021c <__divsi3>
 8003e7c:	0003      	movs	r3, r0
 8003e7e:	b299      	uxth	r1, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	226a      	movs	r2, #106	@ 0x6a
 8003e84:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e86:	19bb      	adds	r3, r7, r6
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	193a      	adds	r2, r7, r4
 8003e8c:	7812      	ldrb	r2, [r2, #0]
 8003e8e:	490a      	ldr	r1, [pc, #40]	@ (8003eb8 <UARTEx_SetNbDataToProcess+0xb4>)
 8003e90:	5c8a      	ldrb	r2, [r1, r2]
 8003e92:	435a      	muls	r2, r3
 8003e94:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003e96:	193b      	adds	r3, r7, r4
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	4a08      	ldr	r2, [pc, #32]	@ (8003ebc <UARTEx_SetNbDataToProcess+0xb8>)
 8003e9c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e9e:	0019      	movs	r1, r3
 8003ea0:	f7fc f9bc 	bl	800021c <__divsi3>
 8003ea4:	0003      	movs	r3, r0
 8003ea6:	b299      	uxth	r1, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2268      	movs	r2, #104	@ 0x68
 8003eac:	5299      	strh	r1, [r3, r2]
}
 8003eae:	46c0      	nop			@ (mov r8, r8)
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	b005      	add	sp, #20
 8003eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eb6:	46c0      	nop			@ (mov r8, r8)
 8003eb8:	08004064 	.word	0x08004064
 8003ebc:	0800406c 	.word	0x0800406c

08003ec0 <memset>:
 8003ec0:	0003      	movs	r3, r0
 8003ec2:	1882      	adds	r2, r0, r2
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d100      	bne.n	8003eca <memset+0xa>
 8003ec8:	4770      	bx	lr
 8003eca:	7019      	strb	r1, [r3, #0]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	e7f9      	b.n	8003ec4 <memset+0x4>

08003ed0 <__libc_init_array>:
 8003ed0:	b570      	push	{r4, r5, r6, lr}
 8003ed2:	2600      	movs	r6, #0
 8003ed4:	4c0c      	ldr	r4, [pc, #48]	@ (8003f08 <__libc_init_array+0x38>)
 8003ed6:	4d0d      	ldr	r5, [pc, #52]	@ (8003f0c <__libc_init_array+0x3c>)
 8003ed8:	1b64      	subs	r4, r4, r5
 8003eda:	10a4      	asrs	r4, r4, #2
 8003edc:	42a6      	cmp	r6, r4
 8003ede:	d109      	bne.n	8003ef4 <__libc_init_array+0x24>
 8003ee0:	2600      	movs	r6, #0
 8003ee2:	f000 f819 	bl	8003f18 <_init>
 8003ee6:	4c0a      	ldr	r4, [pc, #40]	@ (8003f10 <__libc_init_array+0x40>)
 8003ee8:	4d0a      	ldr	r5, [pc, #40]	@ (8003f14 <__libc_init_array+0x44>)
 8003eea:	1b64      	subs	r4, r4, r5
 8003eec:	10a4      	asrs	r4, r4, #2
 8003eee:	42a6      	cmp	r6, r4
 8003ef0:	d105      	bne.n	8003efe <__libc_init_array+0x2e>
 8003ef2:	bd70      	pop	{r4, r5, r6, pc}
 8003ef4:	00b3      	lsls	r3, r6, #2
 8003ef6:	58eb      	ldr	r3, [r5, r3]
 8003ef8:	4798      	blx	r3
 8003efa:	3601      	adds	r6, #1
 8003efc:	e7ee      	b.n	8003edc <__libc_init_array+0xc>
 8003efe:	00b3      	lsls	r3, r6, #2
 8003f00:	58eb      	ldr	r3, [r5, r3]
 8003f02:	4798      	blx	r3
 8003f04:	3601      	adds	r6, #1
 8003f06:	e7f2      	b.n	8003eee <__libc_init_array+0x1e>
 8003f08:	08004074 	.word	0x08004074
 8003f0c:	08004074 	.word	0x08004074
 8003f10:	08004078 	.word	0x08004078
 8003f14:	08004074 	.word	0x08004074

08003f18 <_init>:
 8003f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f1a:	46c0      	nop			@ (mov r8, r8)
 8003f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f1e:	bc08      	pop	{r3}
 8003f20:	469e      	mov	lr, r3
 8003f22:	4770      	bx	lr

08003f24 <_fini>:
 8003f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f26:	46c0      	nop			@ (mov r8, r8)
 8003f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f2a:	bc08      	pop	{r3}
 8003f2c:	469e      	mov	lr, r3
 8003f2e:	4770      	bx	lr
