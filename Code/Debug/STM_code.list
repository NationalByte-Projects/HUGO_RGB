
STM_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f2c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08003fec  08003fec  00004fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040b4  080040b4  0000605c  2**0
                  CONTENTS
  4 .ARM          00000000  080040b4  080040b4  0000605c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040b4  080040b4  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040b4  080040b4  000050b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080040b8  080040b8  000050b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080040bc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  2000005c  08004118  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  08004118  00006328  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c616  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e1e  00000000  00000000  0001269a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  000144b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007b3  00000000  00000000  00014eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014072  00000000  00000000  0001566b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce5d  00000000  00000000  000296dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007de3d  00000000  00000000  0003653a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4377  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002810  00000000  00000000  000b43bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000b6bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003fd4 	.word	0x08003fd4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08003fd4 	.word	0x08003fd4

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b08a      	sub	sp, #40	@ 0x28
 800040c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800040e:	f000 fb7c 	bl	8000b0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000412:	f000 f839 	bl	8000488 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000416:	f000 f951 	bl	80006bc <MX_GPIO_Init>
  MX_DMA_Init();
 800041a:	f000 f931 	bl	8000680 <MX_DMA_Init>
  MX_ADC1_Init();
 800041e:	f000 f87f 	bl	8000520 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000422:	f000 f8df 	bl	80005e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 1);
 8000426:	4912      	ldr	r1, [pc, #72]	@ (8000470 <main+0x68>)
 8000428:	4b12      	ldr	r3, [pc, #72]	@ (8000474 <main+0x6c>)
 800042a:	2201      	movs	r2, #1
 800042c:	0018      	movs	r0, r3
 800042e:	f000 fed7 	bl	80011e0 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if ((HAL_GetTick() - lastPrintTick) >= 1)
 8000432:	f000 fbdd 	bl	8000bf0 <HAL_GetTick>
 8000436:	0002      	movs	r2, r0
 8000438:	4b0f      	ldr	r3, [pc, #60]	@ (8000478 <main+0x70>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	429a      	cmp	r2, r3
 800043e:	d0f8      	beq.n	8000432 <main+0x2a>
	  {
		lastPrintTick = HAL_GetTick();
 8000440:	f000 fbd6 	bl	8000bf0 <HAL_GetTick>
 8000444:	0002      	movs	r2, r0
 8000446:	4b0c      	ldr	r3, [pc, #48]	@ (8000478 <main+0x70>)
 8000448:	601a      	str	r2, [r3, #0]
		char msg[32];
		int len = snprintf(msg, sizeof(msg), "ADC = %u\r\n", (unsigned)adc_dma_value);
 800044a:	4b0c      	ldr	r3, [pc, #48]	@ (800047c <main+0x74>)
 800044c:	881b      	ldrh	r3, [r3, #0]
 800044e:	b29b      	uxth	r3, r3
 8000450:	4a0b      	ldr	r2, [pc, #44]	@ (8000480 <main+0x78>)
 8000452:	1d38      	adds	r0, r7, #4
 8000454:	2120      	movs	r1, #32
 8000456:	f003 f90b 	bl	8003670 <sniprintf>
 800045a:	0003      	movs	r3, r0
 800045c:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_UART_Transmit(&huart1, (uint8_t*)msg, len, HAL_MAX_DELAY);
 800045e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000460:	b29a      	uxth	r2, r3
 8000462:	2301      	movs	r3, #1
 8000464:	425b      	negs	r3, r3
 8000466:	1d39      	adds	r1, r7, #4
 8000468:	4806      	ldr	r0, [pc, #24]	@ (8000484 <main+0x7c>)
 800046a:	f002 fb91 	bl	8002b90 <HAL_UART_Transmit>
	  if ((HAL_GetTick() - lastPrintTick) >= 1)
 800046e:	e7e0      	b.n	8000432 <main+0x2a>
 8000470:	200001d4 	.word	0x200001d4
 8000474:	20000078 	.word	0x20000078
 8000478:	200001d0 	.word	0x200001d0
 800047c:	200001cc 	.word	0x200001cc
 8000480:	08003fec 	.word	0x08003fec
 8000484:	20000138 	.word	0x20000138

08000488 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000488:	b590      	push	{r4, r7, lr}
 800048a:	b08d      	sub	sp, #52	@ 0x34
 800048c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800048e:	2414      	movs	r4, #20
 8000490:	193b      	adds	r3, r7, r4
 8000492:	0018      	movs	r0, r3
 8000494:	231c      	movs	r3, #28
 8000496:	001a      	movs	r2, r3
 8000498:	2100      	movs	r1, #0
 800049a:	f003 f91d 	bl	80036d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800049e:	003b      	movs	r3, r7
 80004a0:	0018      	movs	r0, r3
 80004a2:	2314      	movs	r3, #20
 80004a4:	001a      	movs	r2, r3
 80004a6:	2100      	movs	r1, #0
 80004a8:	f003 f916 	bl	80036d8 <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 80004ac:	4b1b      	ldr	r3, [pc, #108]	@ (800051c <SystemClock_Config+0x94>)
 80004ae:	681a      	ldr	r2, [r3, #0]
 80004b0:	4b1a      	ldr	r3, [pc, #104]	@ (800051c <SystemClock_Config+0x94>)
 80004b2:	2107      	movs	r1, #7
 80004b4:	438a      	bics	r2, r1
 80004b6:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004b8:	193b      	adds	r3, r7, r4
 80004ba:	2202      	movs	r2, #2
 80004bc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004be:	193b      	adds	r3, r7, r4
 80004c0:	2280      	movs	r2, #128	@ 0x80
 80004c2:	0052      	lsls	r2, r2, #1
 80004c4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 80004c6:	193b      	adds	r3, r7, r4
 80004c8:	2280      	movs	r2, #128	@ 0x80
 80004ca:	0152      	lsls	r2, r2, #5
 80004cc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ce:	193b      	adds	r3, r7, r4
 80004d0:	2240      	movs	r2, #64	@ 0x40
 80004d2:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d4:	193b      	adds	r3, r7, r4
 80004d6:	0018      	movs	r0, r3
 80004d8:	f001 febc 	bl	8002254 <HAL_RCC_OscConfig>
 80004dc:	1e03      	subs	r3, r0, #0
 80004de:	d001      	beq.n	80004e4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80004e0:	f000 f948 	bl	8000774 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004e4:	003b      	movs	r3, r7
 80004e6:	2207      	movs	r2, #7
 80004e8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004ea:	003b      	movs	r3, r7
 80004ec:	2200      	movs	r2, #0
 80004ee:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004f0:	003b      	movs	r3, r7
 80004f2:	2200      	movs	r2, #0
 80004f4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80004f6:	003b      	movs	r3, r7
 80004f8:	2200      	movs	r2, #0
 80004fa:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80004fc:	003b      	movs	r3, r7
 80004fe:	2200      	movs	r2, #0
 8000500:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000502:	003b      	movs	r3, r7
 8000504:	2100      	movs	r1, #0
 8000506:	0018      	movs	r0, r3
 8000508:	f002 f888 	bl	800261c <HAL_RCC_ClockConfig>
 800050c:	1e03      	subs	r3, r0, #0
 800050e:	d001      	beq.n	8000514 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000510:	f000 f930 	bl	8000774 <Error_Handler>
  }
}
 8000514:	46c0      	nop			@ (mov r8, r8)
 8000516:	46bd      	mov	sp, r7
 8000518:	b00d      	add	sp, #52	@ 0x34
 800051a:	bd90      	pop	{r4, r7, pc}
 800051c:	40022000 	.word	0x40022000

08000520 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	0018      	movs	r0, r3
 800052a:	230c      	movs	r3, #12
 800052c:	001a      	movs	r2, r3
 800052e:	2100      	movs	r1, #0
 8000530:	f003 f8d2 	bl	80036d8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000534:	4b29      	ldr	r3, [pc, #164]	@ (80005dc <MX_ADC1_Init+0xbc>)
 8000536:	4a2a      	ldr	r2, [pc, #168]	@ (80005e0 <MX_ADC1_Init+0xc0>)
 8000538:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800053a:	4b28      	ldr	r3, [pc, #160]	@ (80005dc <MX_ADC1_Init+0xbc>)
 800053c:	22c0      	movs	r2, #192	@ 0xc0
 800053e:	0612      	lsls	r2, r2, #24
 8000540:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000542:	4b26      	ldr	r3, [pc, #152]	@ (80005dc <MX_ADC1_Init+0xbc>)
 8000544:	2200      	movs	r2, #0
 8000546:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000548:	4b24      	ldr	r3, [pc, #144]	@ (80005dc <MX_ADC1_Init+0xbc>)
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 800054e:	4b23      	ldr	r3, [pc, #140]	@ (80005dc <MX_ADC1_Init+0xbc>)
 8000550:	2280      	movs	r2, #128	@ 0x80
 8000552:	0612      	lsls	r2, r2, #24
 8000554:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000556:	4b21      	ldr	r3, [pc, #132]	@ (80005dc <MX_ADC1_Init+0xbc>)
 8000558:	2204      	movs	r2, #4
 800055a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800055c:	4b1f      	ldr	r3, [pc, #124]	@ (80005dc <MX_ADC1_Init+0xbc>)
 800055e:	2200      	movs	r2, #0
 8000560:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000562:	4b1e      	ldr	r3, [pc, #120]	@ (80005dc <MX_ADC1_Init+0xbc>)
 8000564:	2200      	movs	r2, #0
 8000566:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000568:	4b1c      	ldr	r3, [pc, #112]	@ (80005dc <MX_ADC1_Init+0xbc>)
 800056a:	2201      	movs	r2, #1
 800056c:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800056e:	4b1b      	ldr	r3, [pc, #108]	@ (80005dc <MX_ADC1_Init+0xbc>)
 8000570:	2201      	movs	r2, #1
 8000572:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000574:	4b19      	ldr	r3, [pc, #100]	@ (80005dc <MX_ADC1_Init+0xbc>)
 8000576:	2200      	movs	r2, #0
 8000578:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800057a:	4b18      	ldr	r3, [pc, #96]	@ (80005dc <MX_ADC1_Init+0xbc>)
 800057c:	2200      	movs	r2, #0
 800057e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000580:	4b16      	ldr	r3, [pc, #88]	@ (80005dc <MX_ADC1_Init+0xbc>)
 8000582:	222c      	movs	r2, #44	@ 0x2c
 8000584:	2100      	movs	r1, #0
 8000586:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000588:	4b14      	ldr	r3, [pc, #80]	@ (80005dc <MX_ADC1_Init+0xbc>)
 800058a:	2200      	movs	r2, #0
 800058c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800058e:	4b13      	ldr	r3, [pc, #76]	@ (80005dc <MX_ADC1_Init+0xbc>)
 8000590:	2200      	movs	r2, #0
 8000592:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000594:	4b11      	ldr	r3, [pc, #68]	@ (80005dc <MX_ADC1_Init+0xbc>)
 8000596:	223c      	movs	r2, #60	@ 0x3c
 8000598:	2100      	movs	r1, #0
 800059a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800059c:	4b0f      	ldr	r3, [pc, #60]	@ (80005dc <MX_ADC1_Init+0xbc>)
 800059e:	2200      	movs	r2, #0
 80005a0:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005a2:	4b0e      	ldr	r3, [pc, #56]	@ (80005dc <MX_ADC1_Init+0xbc>)
 80005a4:	0018      	movs	r0, r3
 80005a6:	f000 fc75 	bl	8000e94 <HAL_ADC_Init>
 80005aa:	1e03      	subs	r3, r0, #0
 80005ac:	d001      	beq.n	80005b2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80005ae:	f000 f8e1 	bl	8000774 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2201      	movs	r2, #1
 80005b6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	2201      	movs	r2, #1
 80005bc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005be:	1d3a      	adds	r2, r7, #4
 80005c0:	4b06      	ldr	r3, [pc, #24]	@ (80005dc <MX_ADC1_Init+0xbc>)
 80005c2:	0011      	movs	r1, r2
 80005c4:	0018      	movs	r0, r3
 80005c6:	f000 fea9 	bl	800131c <HAL_ADC_ConfigChannel>
 80005ca:	1e03      	subs	r3, r0, #0
 80005cc:	d001      	beq.n	80005d2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80005ce:	f000 f8d1 	bl	8000774 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005d2:	46c0      	nop			@ (mov r8, r8)
 80005d4:	46bd      	mov	sp, r7
 80005d6:	b004      	add	sp, #16
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	46c0      	nop			@ (mov r8, r8)
 80005dc:	20000078 	.word	0x20000078
 80005e0:	40012400 	.word	0x40012400

080005e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005e8:	4b23      	ldr	r3, [pc, #140]	@ (8000678 <MX_USART1_UART_Init+0x94>)
 80005ea:	4a24      	ldr	r2, [pc, #144]	@ (800067c <MX_USART1_UART_Init+0x98>)
 80005ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005ee:	4b22      	ldr	r3, [pc, #136]	@ (8000678 <MX_USART1_UART_Init+0x94>)
 80005f0:	22e1      	movs	r2, #225	@ 0xe1
 80005f2:	0252      	lsls	r2, r2, #9
 80005f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005f6:	4b20      	ldr	r3, [pc, #128]	@ (8000678 <MX_USART1_UART_Init+0x94>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000678 <MX_USART1_UART_Init+0x94>)
 80005fe:	2200      	movs	r2, #0
 8000600:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000602:	4b1d      	ldr	r3, [pc, #116]	@ (8000678 <MX_USART1_UART_Init+0x94>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000608:	4b1b      	ldr	r3, [pc, #108]	@ (8000678 <MX_USART1_UART_Init+0x94>)
 800060a:	220c      	movs	r2, #12
 800060c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800060e:	4b1a      	ldr	r3, [pc, #104]	@ (8000678 <MX_USART1_UART_Init+0x94>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000614:	4b18      	ldr	r3, [pc, #96]	@ (8000678 <MX_USART1_UART_Init+0x94>)
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800061a:	4b17      	ldr	r3, [pc, #92]	@ (8000678 <MX_USART1_UART_Init+0x94>)
 800061c:	2200      	movs	r2, #0
 800061e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000620:	4b15      	ldr	r3, [pc, #84]	@ (8000678 <MX_USART1_UART_Init+0x94>)
 8000622:	2200      	movs	r2, #0
 8000624:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000626:	4b14      	ldr	r3, [pc, #80]	@ (8000678 <MX_USART1_UART_Init+0x94>)
 8000628:	2200      	movs	r2, #0
 800062a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800062c:	4b12      	ldr	r3, [pc, #72]	@ (8000678 <MX_USART1_UART_Init+0x94>)
 800062e:	0018      	movs	r0, r3
 8000630:	f002 fa58 	bl	8002ae4 <HAL_UART_Init>
 8000634:	1e03      	subs	r3, r0, #0
 8000636:	d001      	beq.n	800063c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000638:	f000 f89c 	bl	8000774 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800063c:	4b0e      	ldr	r3, [pc, #56]	@ (8000678 <MX_USART1_UART_Init+0x94>)
 800063e:	2100      	movs	r1, #0
 8000640:	0018      	movs	r0, r3
 8000642:	f002 ff35 	bl	80034b0 <HAL_UARTEx_SetTxFifoThreshold>
 8000646:	1e03      	subs	r3, r0, #0
 8000648:	d001      	beq.n	800064e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800064a:	f000 f893 	bl	8000774 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800064e:	4b0a      	ldr	r3, [pc, #40]	@ (8000678 <MX_USART1_UART_Init+0x94>)
 8000650:	2100      	movs	r1, #0
 8000652:	0018      	movs	r0, r3
 8000654:	f002 ff6c 	bl	8003530 <HAL_UARTEx_SetRxFifoThreshold>
 8000658:	1e03      	subs	r3, r0, #0
 800065a:	d001      	beq.n	8000660 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800065c:	f000 f88a 	bl	8000774 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000660:	4b05      	ldr	r3, [pc, #20]	@ (8000678 <MX_USART1_UART_Init+0x94>)
 8000662:	0018      	movs	r0, r3
 8000664:	f002 feea 	bl	800343c <HAL_UARTEx_DisableFifoMode>
 8000668:	1e03      	subs	r3, r0, #0
 800066a:	d001      	beq.n	8000670 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800066c:	f000 f882 	bl	8000774 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000670:	46c0      	nop			@ (mov r8, r8)
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	46c0      	nop			@ (mov r8, r8)
 8000678:	20000138 	.word	0x20000138
 800067c:	40013800 	.word	0x40013800

08000680 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000686:	4b0c      	ldr	r3, [pc, #48]	@ (80006b8 <MX_DMA_Init+0x38>)
 8000688:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800068a:	4b0b      	ldr	r3, [pc, #44]	@ (80006b8 <MX_DMA_Init+0x38>)
 800068c:	2101      	movs	r1, #1
 800068e:	430a      	orrs	r2, r1
 8000690:	639a      	str	r2, [r3, #56]	@ 0x38
 8000692:	4b09      	ldr	r3, [pc, #36]	@ (80006b8 <MX_DMA_Init+0x38>)
 8000694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000696:	2201      	movs	r2, #1
 8000698:	4013      	ands	r3, r2
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	2100      	movs	r1, #0
 80006a2:	2009      	movs	r0, #9
 80006a4:	f001 f9c8 	bl	8001a38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006a8:	2009      	movs	r0, #9
 80006aa:	f001 f9da 	bl	8001a62 <HAL_NVIC_EnableIRQ>

}
 80006ae:	46c0      	nop			@ (mov r8, r8)
 80006b0:	46bd      	mov	sp, r7
 80006b2:	b002      	add	sp, #8
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	46c0      	nop			@ (mov r8, r8)
 80006b8:	40021000 	.word	0x40021000

080006bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006bc:	b590      	push	{r4, r7, lr}
 80006be:	b089      	sub	sp, #36	@ 0x24
 80006c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	240c      	movs	r4, #12
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	0018      	movs	r0, r3
 80006c8:	2314      	movs	r3, #20
 80006ca:	001a      	movs	r2, r3
 80006cc:	2100      	movs	r1, #0
 80006ce:	f003 f803 	bl	80036d8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000740 <MX_GPIO_Init+0x84>)
 80006d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000740 <MX_GPIO_Init+0x84>)
 80006d8:	2101      	movs	r1, #1
 80006da:	430a      	orrs	r2, r1
 80006dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80006de:	4b18      	ldr	r3, [pc, #96]	@ (8000740 <MX_GPIO_Init+0x84>)
 80006e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006e2:	2201      	movs	r2, #1
 80006e4:	4013      	ands	r3, r2
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ea:	4b15      	ldr	r3, [pc, #84]	@ (8000740 <MX_GPIO_Init+0x84>)
 80006ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006ee:	4b14      	ldr	r3, [pc, #80]	@ (8000740 <MX_GPIO_Init+0x84>)
 80006f0:	2102      	movs	r1, #2
 80006f2:	430a      	orrs	r2, r1
 80006f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80006f6:	4b12      	ldr	r3, [pc, #72]	@ (8000740 <MX_GPIO_Init+0x84>)
 80006f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006fa:	2202      	movs	r2, #2
 80006fc:	4013      	ands	r3, r2
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, G_Pin|R_Pin|B_Pin, GPIO_PIN_SET);
 8000702:	23a0      	movs	r3, #160	@ 0xa0
 8000704:	05db      	lsls	r3, r3, #23
 8000706:	2201      	movs	r2, #1
 8000708:	2126      	movs	r1, #38	@ 0x26
 800070a:	0018      	movs	r0, r3
 800070c:	f001 fd84 	bl	8002218 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : G_Pin R_Pin B_Pin */
  GPIO_InitStruct.Pin = G_Pin|R_Pin|B_Pin;
 8000710:	0021      	movs	r1, r4
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2226      	movs	r2, #38	@ 0x26
 8000716:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000718:	187b      	adds	r3, r7, r1
 800071a:	2201      	movs	r2, #1
 800071c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	187b      	adds	r3, r7, r1
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000724:	187b      	adds	r3, r7, r1
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072a:	187a      	adds	r2, r7, r1
 800072c:	23a0      	movs	r3, #160	@ 0xa0
 800072e:	05db      	lsls	r3, r3, #23
 8000730:	0011      	movs	r1, r2
 8000732:	0018      	movs	r0, r3
 8000734:	f001 fc06 	bl	8001f44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000738:	46c0      	nop			@ (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	b009      	add	sp, #36	@ 0x24
 800073e:	bd90      	pop	{r4, r7, pc}
 8000740:	40021000 	.word	0x40021000

08000744 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  if (hadc->Instance == ADC1)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a05      	ldr	r2, [pc, #20]	@ (8000768 <HAL_ADC_ConvCpltCallback+0x24>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d103      	bne.n	800075e <HAL_ADC_ConvCpltCallback+0x1a>
  {
    /* update the latest sample */
    adc_dma_value = adc_buffer[0];
 8000756:	4b05      	ldr	r3, [pc, #20]	@ (800076c <HAL_ADC_ConvCpltCallback+0x28>)
 8000758:	881a      	ldrh	r2, [r3, #0]
 800075a:	4b05      	ldr	r3, [pc, #20]	@ (8000770 <HAL_ADC_ConvCpltCallback+0x2c>)
 800075c:	801a      	strh	r2, [r3, #0]
  }
}
 800075e:	46c0      	nop			@ (mov r8, r8)
 8000760:	46bd      	mov	sp, r7
 8000762:	b002      	add	sp, #8
 8000764:	bd80      	pop	{r7, pc}
 8000766:	46c0      	nop			@ (mov r8, r8)
 8000768:	40012400 	.word	0x40012400
 800076c:	200001d4 	.word	0x200001d4
 8000770:	200001cc 	.word	0x200001cc

08000774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000778:	b672      	cpsid	i
}
 800077a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800077c:	46c0      	nop			@ (mov r8, r8)
 800077e:	e7fd      	b.n	800077c <Error_Handler+0x8>

08000780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000786:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <HAL_MspInit+0x44>)
 8000788:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800078a:	4b0e      	ldr	r3, [pc, #56]	@ (80007c4 <HAL_MspInit+0x44>)
 800078c:	2101      	movs	r1, #1
 800078e:	430a      	orrs	r2, r1
 8000790:	641a      	str	r2, [r3, #64]	@ 0x40
 8000792:	4b0c      	ldr	r3, [pc, #48]	@ (80007c4 <HAL_MspInit+0x44>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000796:	2201      	movs	r2, #1
 8000798:	4013      	ands	r3, r2
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079e:	4b09      	ldr	r3, [pc, #36]	@ (80007c4 <HAL_MspInit+0x44>)
 80007a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007a2:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <HAL_MspInit+0x44>)
 80007a4:	2180      	movs	r1, #128	@ 0x80
 80007a6:	0549      	lsls	r1, r1, #21
 80007a8:	430a      	orrs	r2, r1
 80007aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80007ac:	4b05      	ldr	r3, [pc, #20]	@ (80007c4 <HAL_MspInit+0x44>)
 80007ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007b0:	2380      	movs	r3, #128	@ 0x80
 80007b2:	055b      	lsls	r3, r3, #21
 80007b4:	4013      	ands	r3, r2
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ba:	46c0      	nop			@ (mov r8, r8)
 80007bc:	46bd      	mov	sp, r7
 80007be:	b002      	add	sp, #8
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	46c0      	nop			@ (mov r8, r8)
 80007c4:	40021000 	.word	0x40021000

080007c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007c8:	b590      	push	{r4, r7, lr}
 80007ca:	b091      	sub	sp, #68	@ 0x44
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d0:	232c      	movs	r3, #44	@ 0x2c
 80007d2:	18fb      	adds	r3, r7, r3
 80007d4:	0018      	movs	r0, r3
 80007d6:	2314      	movs	r3, #20
 80007d8:	001a      	movs	r2, r3
 80007da:	2100      	movs	r1, #0
 80007dc:	f002 ff7c 	bl	80036d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007e0:	2410      	movs	r4, #16
 80007e2:	193b      	adds	r3, r7, r4
 80007e4:	0018      	movs	r0, r3
 80007e6:	231c      	movs	r3, #28
 80007e8:	001a      	movs	r2, r3
 80007ea:	2100      	movs	r1, #0
 80007ec:	f002 ff74 	bl	80036d8 <memset>
  if(hadc->Instance==ADC1)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a35      	ldr	r2, [pc, #212]	@ (80008cc <HAL_ADC_MspInit+0x104>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d163      	bne.n	80008c2 <HAL_ADC_MspInit+0xfa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007fa:	193b      	adds	r3, r7, r4
 80007fc:	2220      	movs	r2, #32
 80007fe:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000800:	193b      	adds	r3, r7, r4
 8000802:	2200      	movs	r2, #0
 8000804:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000806:	193b      	adds	r3, r7, r4
 8000808:	0018      	movs	r0, r3
 800080a:	f002 f87f 	bl	800290c <HAL_RCCEx_PeriphCLKConfig>
 800080e:	1e03      	subs	r3, r0, #0
 8000810:	d001      	beq.n	8000816 <HAL_ADC_MspInit+0x4e>
    {
      Error_Handler();
 8000812:	f7ff ffaf 	bl	8000774 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000816:	4b2e      	ldr	r3, [pc, #184]	@ (80008d0 <HAL_ADC_MspInit+0x108>)
 8000818:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800081a:	4b2d      	ldr	r3, [pc, #180]	@ (80008d0 <HAL_ADC_MspInit+0x108>)
 800081c:	2180      	movs	r1, #128	@ 0x80
 800081e:	0349      	lsls	r1, r1, #13
 8000820:	430a      	orrs	r2, r1
 8000822:	641a      	str	r2, [r3, #64]	@ 0x40
 8000824:	4b2a      	ldr	r3, [pc, #168]	@ (80008d0 <HAL_ADC_MspInit+0x108>)
 8000826:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000828:	2380      	movs	r3, #128	@ 0x80
 800082a:	035b      	lsls	r3, r3, #13
 800082c:	4013      	ands	r3, r2
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	4b27      	ldr	r3, [pc, #156]	@ (80008d0 <HAL_ADC_MspInit+0x108>)
 8000834:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000836:	4b26      	ldr	r3, [pc, #152]	@ (80008d0 <HAL_ADC_MspInit+0x108>)
 8000838:	2101      	movs	r1, #1
 800083a:	430a      	orrs	r2, r1
 800083c:	635a      	str	r2, [r3, #52]	@ 0x34
 800083e:	4b24      	ldr	r3, [pc, #144]	@ (80008d0 <HAL_ADC_MspInit+0x108>)
 8000840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000842:	2201      	movs	r2, #1
 8000844:	4013      	ands	r3, r2
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800084a:	212c      	movs	r1, #44	@ 0x2c
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2201      	movs	r2, #1
 8000850:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2203      	movs	r2, #3
 8000856:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085e:	187a      	adds	r2, r7, r1
 8000860:	23a0      	movs	r3, #160	@ 0xa0
 8000862:	05db      	lsls	r3, r3, #23
 8000864:	0011      	movs	r1, r2
 8000866:	0018      	movs	r0, r3
 8000868:	f001 fb6c 	bl	8001f44 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800086c:	4b19      	ldr	r3, [pc, #100]	@ (80008d4 <HAL_ADC_MspInit+0x10c>)
 800086e:	4a1a      	ldr	r2, [pc, #104]	@ (80008d8 <HAL_ADC_MspInit+0x110>)
 8000870:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000872:	4b18      	ldr	r3, [pc, #96]	@ (80008d4 <HAL_ADC_MspInit+0x10c>)
 8000874:	2205      	movs	r2, #5
 8000876:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000878:	4b16      	ldr	r3, [pc, #88]	@ (80008d4 <HAL_ADC_MspInit+0x10c>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800087e:	4b15      	ldr	r3, [pc, #84]	@ (80008d4 <HAL_ADC_MspInit+0x10c>)
 8000880:	2200      	movs	r2, #0
 8000882:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000884:	4b13      	ldr	r3, [pc, #76]	@ (80008d4 <HAL_ADC_MspInit+0x10c>)
 8000886:	2280      	movs	r2, #128	@ 0x80
 8000888:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800088a:	4b12      	ldr	r3, [pc, #72]	@ (80008d4 <HAL_ADC_MspInit+0x10c>)
 800088c:	2280      	movs	r2, #128	@ 0x80
 800088e:	0052      	lsls	r2, r2, #1
 8000890:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000892:	4b10      	ldr	r3, [pc, #64]	@ (80008d4 <HAL_ADC_MspInit+0x10c>)
 8000894:	2280      	movs	r2, #128	@ 0x80
 8000896:	00d2      	lsls	r2, r2, #3
 8000898:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800089a:	4b0e      	ldr	r3, [pc, #56]	@ (80008d4 <HAL_ADC_MspInit+0x10c>)
 800089c:	2220      	movs	r2, #32
 800089e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	@ (80008d4 <HAL_ADC_MspInit+0x10c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008a6:	4b0b      	ldr	r3, [pc, #44]	@ (80008d4 <HAL_ADC_MspInit+0x10c>)
 80008a8:	0018      	movs	r0, r3
 80008aa:	f001 f8f7 	bl	8001a9c <HAL_DMA_Init>
 80008ae:	1e03      	subs	r3, r0, #0
 80008b0:	d001      	beq.n	80008b6 <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 80008b2:	f7ff ff5f 	bl	8000774 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4a06      	ldr	r2, [pc, #24]	@ (80008d4 <HAL_ADC_MspInit+0x10c>)
 80008ba:	651a      	str	r2, [r3, #80]	@ 0x50
 80008bc:	4b05      	ldr	r3, [pc, #20]	@ (80008d4 <HAL_ADC_MspInit+0x10c>)
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80008c2:	46c0      	nop			@ (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b011      	add	sp, #68	@ 0x44
 80008c8:	bd90      	pop	{r4, r7, pc}
 80008ca:	46c0      	nop			@ (mov r8, r8)
 80008cc:	40012400 	.word	0x40012400
 80008d0:	40021000 	.word	0x40021000
 80008d4:	200000dc 	.word	0x200000dc
 80008d8:	40020008 	.word	0x40020008

080008dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b093      	sub	sp, #76	@ 0x4c
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e4:	2334      	movs	r3, #52	@ 0x34
 80008e6:	18fb      	adds	r3, r7, r3
 80008e8:	0018      	movs	r0, r3
 80008ea:	2314      	movs	r3, #20
 80008ec:	001a      	movs	r2, r3
 80008ee:	2100      	movs	r1, #0
 80008f0:	f002 fef2 	bl	80036d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008f4:	2418      	movs	r4, #24
 80008f6:	193b      	adds	r3, r7, r4
 80008f8:	0018      	movs	r0, r3
 80008fa:	231c      	movs	r3, #28
 80008fc:	001a      	movs	r2, r3
 80008fe:	2100      	movs	r1, #0
 8000900:	f002 feea 	bl	80036d8 <memset>
  if(huart->Instance==USART1)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a34      	ldr	r2, [pc, #208]	@ (80009dc <HAL_UART_MspInit+0x100>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d162      	bne.n	80009d4 <HAL_UART_MspInit+0xf8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800090e:	193b      	adds	r3, r7, r4
 8000910:	2201      	movs	r2, #1
 8000912:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000914:	193b      	adds	r3, r7, r4
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800091a:	193b      	adds	r3, r7, r4
 800091c:	0018      	movs	r0, r3
 800091e:	f001 fff5 	bl	800290c <HAL_RCCEx_PeriphCLKConfig>
 8000922:	1e03      	subs	r3, r0, #0
 8000924:	d001      	beq.n	800092a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000926:	f7ff ff25 	bl	8000774 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800092a:	4b2d      	ldr	r3, [pc, #180]	@ (80009e0 <HAL_UART_MspInit+0x104>)
 800092c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800092e:	4b2c      	ldr	r3, [pc, #176]	@ (80009e0 <HAL_UART_MspInit+0x104>)
 8000930:	2180      	movs	r1, #128	@ 0x80
 8000932:	01c9      	lsls	r1, r1, #7
 8000934:	430a      	orrs	r2, r1
 8000936:	641a      	str	r2, [r3, #64]	@ 0x40
 8000938:	4b29      	ldr	r3, [pc, #164]	@ (80009e0 <HAL_UART_MspInit+0x104>)
 800093a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800093c:	2380      	movs	r3, #128	@ 0x80
 800093e:	01db      	lsls	r3, r3, #7
 8000940:	4013      	ands	r3, r2
 8000942:	617b      	str	r3, [r7, #20]
 8000944:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	4b26      	ldr	r3, [pc, #152]	@ (80009e0 <HAL_UART_MspInit+0x104>)
 8000948:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800094a:	4b25      	ldr	r3, [pc, #148]	@ (80009e0 <HAL_UART_MspInit+0x104>)
 800094c:	2101      	movs	r1, #1
 800094e:	430a      	orrs	r2, r1
 8000950:	635a      	str	r2, [r3, #52]	@ 0x34
 8000952:	4b23      	ldr	r3, [pc, #140]	@ (80009e0 <HAL_UART_MspInit+0x104>)
 8000954:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000956:	2201      	movs	r2, #1
 8000958:	4013      	ands	r3, r2
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800095e:	4b20      	ldr	r3, [pc, #128]	@ (80009e0 <HAL_UART_MspInit+0x104>)
 8000960:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000962:	4b1f      	ldr	r3, [pc, #124]	@ (80009e0 <HAL_UART_MspInit+0x104>)
 8000964:	2102      	movs	r1, #2
 8000966:	430a      	orrs	r2, r1
 8000968:	635a      	str	r2, [r3, #52]	@ 0x34
 800096a:	4b1d      	ldr	r3, [pc, #116]	@ (80009e0 <HAL_UART_MspInit+0x104>)
 800096c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800096e:	2202      	movs	r2, #2
 8000970:	4013      	ands	r3, r2
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000976:	2134      	movs	r1, #52	@ 0x34
 8000978:	187b      	adds	r3, r7, r1
 800097a:	2280      	movs	r2, #128	@ 0x80
 800097c:	0052      	lsls	r2, r2, #1
 800097e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	000c      	movs	r4, r1
 8000982:	193b      	adds	r3, r7, r4
 8000984:	2202      	movs	r2, #2
 8000986:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	193b      	adds	r3, r7, r4
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	193b      	adds	r3, r7, r4
 8000990:	2200      	movs	r2, #0
 8000992:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF14_USART1;
 8000994:	193b      	adds	r3, r7, r4
 8000996:	220e      	movs	r2, #14
 8000998:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099a:	193a      	adds	r2, r7, r4
 800099c:	23a0      	movs	r3, #160	@ 0xa0
 800099e:	05db      	lsls	r3, r3, #23
 80009a0:	0011      	movs	r1, r2
 80009a2:	0018      	movs	r0, r3
 80009a4:	f001 face 	bl	8001f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009a8:	0021      	movs	r1, r4
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	2240      	movs	r2, #64	@ 0x40
 80009ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	2202      	movs	r2, #2
 80009b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	4a06      	ldr	r2, [pc, #24]	@ (80009e4 <HAL_UART_MspInit+0x108>)
 80009cc:	0019      	movs	r1, r3
 80009ce:	0010      	movs	r0, r2
 80009d0:	f001 fab8 	bl	8001f44 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80009d4:	46c0      	nop			@ (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	b013      	add	sp, #76	@ 0x4c
 80009da:	bd90      	pop	{r4, r7, pc}
 80009dc:	40013800 	.word	0x40013800
 80009e0:	40021000 	.word	0x40021000
 80009e4:	50000400 	.word	0x50000400

080009e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009ec:	46c0      	nop			@ (mov r8, r8)
 80009ee:	e7fd      	b.n	80009ec <NMI_Handler+0x4>

080009f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f4:	46c0      	nop			@ (mov r8, r8)
 80009f6:	e7fd      	b.n	80009f4 <HardFault_Handler+0x4>

080009f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009fc:	46c0      	nop			@ (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a06:	46c0      	nop			@ (mov r8, r8)
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a10:	f000 f8dc 	bl	8000bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a14:	46c0      	nop			@ (mov r8, r8)
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
	...

08000a1c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a20:	4b03      	ldr	r3, [pc, #12]	@ (8000a30 <DMA1_Channel1_IRQHandler+0x14>)
 8000a22:	0018      	movs	r0, r3
 8000a24:	f001 f94c 	bl	8001cc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a28:	46c0      	nop			@ (mov r8, r8)
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	46c0      	nop			@ (mov r8, r8)
 8000a30:	200000dc 	.word	0x200000dc

08000a34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a3c:	4a14      	ldr	r2, [pc, #80]	@ (8000a90 <_sbrk+0x5c>)
 8000a3e:	4b15      	ldr	r3, [pc, #84]	@ (8000a94 <_sbrk+0x60>)
 8000a40:	1ad3      	subs	r3, r2, r3
 8000a42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a48:	4b13      	ldr	r3, [pc, #76]	@ (8000a98 <_sbrk+0x64>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d102      	bne.n	8000a56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a50:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <_sbrk+0x64>)
 8000a52:	4a12      	ldr	r2, [pc, #72]	@ (8000a9c <_sbrk+0x68>)
 8000a54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a56:	4b10      	ldr	r3, [pc, #64]	@ (8000a98 <_sbrk+0x64>)
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	18d3      	adds	r3, r2, r3
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d207      	bcs.n	8000a74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a64:	f002 fe40 	bl	80036e8 <__errno>
 8000a68:	0003      	movs	r3, r0
 8000a6a:	220c      	movs	r2, #12
 8000a6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	425b      	negs	r3, r3
 8000a72:	e009      	b.n	8000a88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a74:	4b08      	ldr	r3, [pc, #32]	@ (8000a98 <_sbrk+0x64>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a7a:	4b07      	ldr	r3, [pc, #28]	@ (8000a98 <_sbrk+0x64>)
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	18d2      	adds	r2, r2, r3
 8000a82:	4b05      	ldr	r3, [pc, #20]	@ (8000a98 <_sbrk+0x64>)
 8000a84:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000a86:	68fb      	ldr	r3, [r7, #12]
}
 8000a88:	0018      	movs	r0, r3
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	b006      	add	sp, #24
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20001800 	.word	0x20001800
 8000a94:	00000400 	.word	0x00000400
 8000a98:	200001d8 	.word	0x200001d8
 8000a9c:	20000328 	.word	0x20000328

08000aa0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000aa4:	4b03      	ldr	r3, [pc, #12]	@ (8000ab4 <SystemInit+0x14>)
 8000aa6:	2280      	movs	r2, #128	@ 0x80
 8000aa8:	0512      	lsls	r2, r2, #20
 8000aaa:	609a      	str	r2, [r3, #8]
#endif
}
 8000aac:	46c0      	nop			@ (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ab8:	480d      	ldr	r0, [pc, #52]	@ (8000af0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000abc:	f7ff fff0 	bl	8000aa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ac0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ac2:	e003      	b.n	8000acc <LoopCopyDataInit>

08000ac4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8000af4 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000ac6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ac8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000aca:	3104      	adds	r1, #4

08000acc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000acc:	480a      	ldr	r0, [pc, #40]	@ (8000af8 <LoopForever+0xa>)
  ldr r3, =_edata
 8000ace:	4b0b      	ldr	r3, [pc, #44]	@ (8000afc <LoopForever+0xe>)
  adds r2, r0, r1
 8000ad0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000ad2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ad4:	d3f6      	bcc.n	8000ac4 <CopyDataInit>
  ldr r2, =_sbss
 8000ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b00 <LoopForever+0x12>)
  b LoopFillZerobss
 8000ad8:	e002      	b.n	8000ae0 <LoopFillZerobss>

08000ada <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  str  r3, [r2]
 8000adc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ade:	3204      	adds	r2, #4

08000ae0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000ae0:	4b08      	ldr	r3, [pc, #32]	@ (8000b04 <LoopForever+0x16>)
  cmp r2, r3
 8000ae2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ae4:	d3f9      	bcc.n	8000ada <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000ae6:	f002 fe05 	bl	80036f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aea:	f7ff fc8d 	bl	8000408 <main>

08000aee <LoopForever>:

LoopForever:
    b LoopForever
 8000aee:	e7fe      	b.n	8000aee <LoopForever>
  ldr   r0, =_estack
 8000af0:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000af4:	080040bc 	.word	0x080040bc
  ldr r0, =_sdata
 8000af8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000afc:	2000005c 	.word	0x2000005c
  ldr r2, =_sbss
 8000b00:	2000005c 	.word	0x2000005c
  ldr r3, = _ebss
 8000b04:	20000328 	.word	0x20000328

08000b08 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b08:	e7fe      	b.n	8000b08 <ADC1_IRQHandler>

08000b0a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b082      	sub	sp, #8
 8000b0e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b10:	1dfb      	adds	r3, r7, #7
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b16:	2003      	movs	r0, #3
 8000b18:	f000 f80e 	bl	8000b38 <HAL_InitTick>
 8000b1c:	1e03      	subs	r3, r0, #0
 8000b1e:	d003      	beq.n	8000b28 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000b20:	1dfb      	adds	r3, r7, #7
 8000b22:	2201      	movs	r2, #1
 8000b24:	701a      	strb	r2, [r3, #0]
 8000b26:	e001      	b.n	8000b2c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b28:	f7ff fe2a 	bl	8000780 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b2c:	1dfb      	adds	r3, r7, #7
 8000b2e:	781b      	ldrb	r3, [r3, #0]
}
 8000b30:	0018      	movs	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	b002      	add	sp, #8
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b38:	b590      	push	{r4, r7, lr}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b40:	230f      	movs	r3, #15
 8000b42:	18fb      	adds	r3, r7, r3
 8000b44:	2200      	movs	r2, #0
 8000b46:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000b48:	4b1d      	ldr	r3, [pc, #116]	@ (8000bc0 <HAL_InitTick+0x88>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d02b      	beq.n	8000ba8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000b50:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc4 <HAL_InitTick+0x8c>)
 8000b52:	681c      	ldr	r4, [r3, #0]
 8000b54:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc0 <HAL_InitTick+0x88>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	0019      	movs	r1, r3
 8000b5a:	23fa      	movs	r3, #250	@ 0xfa
 8000b5c:	0098      	lsls	r0, r3, #2
 8000b5e:	f7ff fadd 	bl	800011c <__udivsi3>
 8000b62:	0003      	movs	r3, r0
 8000b64:	0019      	movs	r1, r3
 8000b66:	0020      	movs	r0, r4
 8000b68:	f7ff fad8 	bl	800011c <__udivsi3>
 8000b6c:	0003      	movs	r3, r0
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f000 ff87 	bl	8001a82 <HAL_SYSTICK_Config>
 8000b74:	1e03      	subs	r3, r0, #0
 8000b76:	d112      	bne.n	8000b9e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2b03      	cmp	r3, #3
 8000b7c:	d80a      	bhi.n	8000b94 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	2301      	movs	r3, #1
 8000b82:	425b      	negs	r3, r3
 8000b84:	2200      	movs	r2, #0
 8000b86:	0018      	movs	r0, r3
 8000b88:	f000 ff56 	bl	8001a38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc8 <HAL_InitTick+0x90>)
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	e00d      	b.n	8000bb0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b94:	230f      	movs	r3, #15
 8000b96:	18fb      	adds	r3, r7, r3
 8000b98:	2201      	movs	r2, #1
 8000b9a:	701a      	strb	r2, [r3, #0]
 8000b9c:	e008      	b.n	8000bb0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b9e:	230f      	movs	r3, #15
 8000ba0:	18fb      	adds	r3, r7, r3
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	701a      	strb	r2, [r3, #0]
 8000ba6:	e003      	b.n	8000bb0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ba8:	230f      	movs	r3, #15
 8000baa:	18fb      	adds	r3, r7, r3
 8000bac:	2201      	movs	r2, #1
 8000bae:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000bb0:	230f      	movs	r3, #15
 8000bb2:	18fb      	adds	r3, r7, r3
 8000bb4:	781b      	ldrb	r3, [r3, #0]
}
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	b005      	add	sp, #20
 8000bbc:	bd90      	pop	{r4, r7, pc}
 8000bbe:	46c0      	nop			@ (mov r8, r8)
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	20000000 	.word	0x20000000
 8000bc8:	20000004 	.word	0x20000004

08000bcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bd0:	4b05      	ldr	r3, [pc, #20]	@ (8000be8 <HAL_IncTick+0x1c>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	001a      	movs	r2, r3
 8000bd6:	4b05      	ldr	r3, [pc, #20]	@ (8000bec <HAL_IncTick+0x20>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	18d2      	adds	r2, r2, r3
 8000bdc:	4b03      	ldr	r3, [pc, #12]	@ (8000bec <HAL_IncTick+0x20>)
 8000bde:	601a      	str	r2, [r3, #0]
}
 8000be0:	46c0      	nop			@ (mov r8, r8)
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	46c0      	nop			@ (mov r8, r8)
 8000be8:	20000008 	.word	0x20000008
 8000bec:	200001dc 	.word	0x200001dc

08000bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf4:	4b02      	ldr	r3, [pc, #8]	@ (8000c00 <HAL_GetTick+0x10>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
}
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	46c0      	nop			@ (mov r8, r8)
 8000c00:	200001dc 	.word	0x200001dc

08000c04 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a05      	ldr	r2, [pc, #20]	@ (8000c28 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000c14:	401a      	ands	r2, r3
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	431a      	orrs	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	601a      	str	r2, [r3, #0]
}
 8000c1e:	46c0      	nop			@ (mov r8, r8)
 8000c20:	46bd      	mov	sp, r7
 8000c22:	b002      	add	sp, #8
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	46c0      	nop			@ (mov r8, r8)
 8000c28:	ff3fffff 	.word	0xff3fffff

08000c2c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	23c0      	movs	r3, #192	@ 0xc0
 8000c3a:	041b      	lsls	r3, r3, #16
 8000c3c:	4013      	ands	r3, r2
}
 8000c3e:	0018      	movs	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	b002      	add	sp, #8
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b084      	sub	sp, #16
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	60f8      	str	r0, [r7, #12]
 8000c4e:	60b9      	str	r1, [r7, #8]
 8000c50:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	695b      	ldr	r3, [r3, #20]
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	2104      	movs	r1, #4
 8000c5a:	400a      	ands	r2, r1
 8000c5c:	2107      	movs	r1, #7
 8000c5e:	4091      	lsls	r1, r2
 8000c60:	000a      	movs	r2, r1
 8000c62:	43d2      	mvns	r2, r2
 8000c64:	401a      	ands	r2, r3
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	2104      	movs	r1, #4
 8000c6a:	400b      	ands	r3, r1
 8000c6c:	6879      	ldr	r1, [r7, #4]
 8000c6e:	4099      	lsls	r1, r3
 8000c70:	000b      	movs	r3, r1
 8000c72:	431a      	orrs	r2, r3
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000c78:	46c0      	nop			@ (mov r8, r8)
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	b004      	add	sp, #16
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	683a      	ldr	r2, [r7, #0]
 8000c90:	2104      	movs	r1, #4
 8000c92:	400a      	ands	r2, r1
 8000c94:	2107      	movs	r1, #7
 8000c96:	4091      	lsls	r1, r2
 8000c98:	000a      	movs	r2, r1
 8000c9a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	2104      	movs	r1, #4
 8000ca0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000ca2:	40da      	lsrs	r2, r3
 8000ca4:	0013      	movs	r3, r2
}
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	b002      	add	sp, #8
 8000cac:	bd80      	pop	{r7, pc}

08000cae <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	68da      	ldr	r2, [r3, #12]
 8000cba:	23c0      	movs	r3, #192	@ 0xc0
 8000cbc:	011b      	lsls	r3, r3, #4
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	d101      	bne.n	8000cc6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e000      	b.n	8000cc8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000cc6:	2300      	movs	r3, #0
}
 8000cc8:	0018      	movs	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	b002      	add	sp, #8
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ce0:	68ba      	ldr	r2, [r7, #8]
 8000ce2:	211f      	movs	r1, #31
 8000ce4:	400a      	ands	r2, r1
 8000ce6:	210f      	movs	r1, #15
 8000ce8:	4091      	lsls	r1, r2
 8000cea:	000a      	movs	r2, r1
 8000cec:	43d2      	mvns	r2, r2
 8000cee:	401a      	ands	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	0e9b      	lsrs	r3, r3, #26
 8000cf4:	210f      	movs	r1, #15
 8000cf6:	4019      	ands	r1, r3
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	201f      	movs	r0, #31
 8000cfc:	4003      	ands	r3, r0
 8000cfe:	4099      	lsls	r1, r3
 8000d00:	000b      	movs	r3, r1
 8000d02:	431a      	orrs	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000d08:	46c0      	nop			@ (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b004      	add	sp, #16
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	025b      	lsls	r3, r3, #9
 8000d22:	0a5b      	lsrs	r3, r3, #9
 8000d24:	431a      	orrs	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d2a:	46c0      	nop			@ (mov r8, r8)
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	b002      	add	sp, #8
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b082      	sub	sp, #8
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
 8000d3a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d40:	683a      	ldr	r2, [r7, #0]
 8000d42:	0252      	lsls	r2, r2, #9
 8000d44:	0a52      	lsrs	r2, r2, #9
 8000d46:	43d2      	mvns	r2, r2
 8000d48:	401a      	ands	r2, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d4e:	46c0      	nop			@ (mov r8, r8)
 8000d50:	46bd      	mov	sp, r7
 8000d52:	b002      	add	sp, #8
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	695b      	ldr	r3, [r3, #20]
 8000d68:	68ba      	ldr	r2, [r7, #8]
 8000d6a:	0212      	lsls	r2, r2, #8
 8000d6c:	43d2      	mvns	r2, r2
 8000d6e:	401a      	ands	r2, r3
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	021b      	lsls	r3, r3, #8
 8000d74:	6879      	ldr	r1, [r7, #4]
 8000d76:	400b      	ands	r3, r1
 8000d78:	4904      	ldr	r1, [pc, #16]	@ (8000d8c <LL_ADC_SetChannelSamplingTime+0x34>)
 8000d7a:	400b      	ands	r3, r1
 8000d7c:	431a      	orrs	r2, r3
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000d82:	46c0      	nop			@ (mov r8, r8)
 8000d84:	46bd      	mov	sp, r7
 8000d86:	b004      	add	sp, #16
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	46c0      	nop			@ (mov r8, r8)
 8000d8c:	7fffff00 	.word	0x7fffff00

08000d90 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	4a05      	ldr	r2, [pc, #20]	@ (8000db4 <LL_ADC_EnableInternalRegulator+0x24>)
 8000d9e:	4013      	ands	r3, r2
 8000da0:	2280      	movs	r2, #128	@ 0x80
 8000da2:	0552      	lsls	r2, r2, #21
 8000da4:	431a      	orrs	r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000daa:	46c0      	nop			@ (mov r8, r8)
 8000dac:	46bd      	mov	sp, r7
 8000dae:	b002      	add	sp, #8
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	46c0      	nop			@ (mov r8, r8)
 8000db4:	6fffffe8 	.word	0x6fffffe8

08000db8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	689a      	ldr	r2, [r3, #8]
 8000dc4:	2380      	movs	r3, #128	@ 0x80
 8000dc6:	055b      	lsls	r3, r3, #21
 8000dc8:	401a      	ands	r2, r3
 8000dca:	2380      	movs	r3, #128	@ 0x80
 8000dcc:	055b      	lsls	r3, r3, #21
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d101      	bne.n	8000dd6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e000      	b.n	8000dd8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000dd6:	2300      	movs	r3, #0
}
 8000dd8:	0018      	movs	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	b002      	add	sp, #8
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	4a04      	ldr	r2, [pc, #16]	@ (8000e00 <LL_ADC_Enable+0x20>)
 8000dee:	4013      	ands	r3, r2
 8000df0:	2201      	movs	r2, #1
 8000df2:	431a      	orrs	r2, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000df8:	46c0      	nop			@ (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	b002      	add	sp, #8
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	7fffffe8 	.word	0x7fffffe8

08000e04 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	4a04      	ldr	r2, [pc, #16]	@ (8000e24 <LL_ADC_Disable+0x20>)
 8000e12:	4013      	ands	r3, r2
 8000e14:	2202      	movs	r2, #2
 8000e16:	431a      	orrs	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000e1c:	46c0      	nop			@ (mov r8, r8)
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	b002      	add	sp, #8
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	7fffffe8 	.word	0x7fffffe8

08000e28 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	2201      	movs	r2, #1
 8000e36:	4013      	ands	r3, r2
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d101      	bne.n	8000e40 <LL_ADC_IsEnabled+0x18>
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	e000      	b.n	8000e42 <LL_ADC_IsEnabled+0x1a>
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	0018      	movs	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	b002      	add	sp, #8
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	4a04      	ldr	r2, [pc, #16]	@ (8000e6c <LL_ADC_REG_StartConversion+0x20>)
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	2204      	movs	r2, #4
 8000e5e:	431a      	orrs	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000e64:	46c0      	nop			@ (mov r8, r8)
 8000e66:	46bd      	mov	sp, r7
 8000e68:	b002      	add	sp, #8
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	7fffffe8 	.word	0x7fffffe8

08000e70 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	2204      	movs	r2, #4
 8000e7e:	4013      	ands	r3, r2
 8000e80:	2b04      	cmp	r3, #4
 8000e82:	d101      	bne.n	8000e88 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000e84:	2301      	movs	r3, #1
 8000e86:	e000      	b.n	8000e8a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	b002      	add	sp, #8
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b088      	sub	sp, #32
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e9c:	231f      	movs	r3, #31
 8000e9e:	18fb      	adds	r3, r7, r3
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d101      	bne.n	8000eba <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e17e      	b.n	80011b8 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d10a      	bne.n	8000ed8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f7ff fc7f 	bl	80007c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2254      	movs	r2, #84	@ 0x54
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	0018      	movs	r0, r3
 8000ede:	f7ff ff6b 	bl	8000db8 <LL_ADC_IsInternalRegulatorEnabled>
 8000ee2:	1e03      	subs	r3, r0, #0
 8000ee4:	d114      	bne.n	8000f10 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	0018      	movs	r0, r3
 8000eec:	f7ff ff50 	bl	8000d90 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000ef0:	4bb3      	ldr	r3, [pc, #716]	@ (80011c0 <HAL_ADC_Init+0x32c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	49b3      	ldr	r1, [pc, #716]	@ (80011c4 <HAL_ADC_Init+0x330>)
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f7ff f910 	bl	800011c <__udivsi3>
 8000efc:	0003      	movs	r3, r0
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000f02:	e002      	b.n	8000f0a <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d1f9      	bne.n	8000f04 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	0018      	movs	r0, r3
 8000f16:	f7ff ff4f 	bl	8000db8 <LL_ADC_IsInternalRegulatorEnabled>
 8000f1a:	1e03      	subs	r3, r0, #0
 8000f1c:	d10f      	bne.n	8000f3e <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f22:	2210      	movs	r2, #16
 8000f24:	431a      	orrs	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f2e:	2201      	movs	r2, #1
 8000f30:	431a      	orrs	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8000f36:	231f      	movs	r3, #31
 8000f38:	18fb      	adds	r3, r7, r3
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	0018      	movs	r0, r3
 8000f44:	f7ff ff94 	bl	8000e70 <LL_ADC_REG_IsConversionOngoing>
 8000f48:	0003      	movs	r3, r0
 8000f4a:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f50:	2210      	movs	r2, #16
 8000f52:	4013      	ands	r3, r2
 8000f54:	d000      	beq.n	8000f58 <HAL_ADC_Init+0xc4>
 8000f56:	e122      	b.n	800119e <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d000      	beq.n	8000f60 <HAL_ADC_Init+0xcc>
 8000f5e:	e11e      	b.n	800119e <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f64:	4a98      	ldr	r2, [pc, #608]	@ (80011c8 <HAL_ADC_Init+0x334>)
 8000f66:	4013      	ands	r3, r2
 8000f68:	2202      	movs	r2, #2
 8000f6a:	431a      	orrs	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	0018      	movs	r0, r3
 8000f76:	f7ff ff57 	bl	8000e28 <LL_ADC_IsEnabled>
 8000f7a:	1e03      	subs	r3, r0, #0
 8000f7c:	d000      	beq.n	8000f80 <HAL_ADC_Init+0xec>
 8000f7e:	e0ad      	b.n	80010dc <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	7e1b      	ldrb	r3, [r3, #24]
 8000f88:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000f8a:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	7e5b      	ldrb	r3, [r3, #25]
 8000f90:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000f92:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	7e9b      	ldrb	r3, [r3, #26]
 8000f98:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000f9a:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d002      	beq.n	8000faa <HAL_ADC_Init+0x116>
 8000fa4:	2380      	movs	r3, #128	@ 0x80
 8000fa6:	015b      	lsls	r3, r3, #5
 8000fa8:	e000      	b.n	8000fac <HAL_ADC_Init+0x118>
 8000faa:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000fac:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000fb2:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	691b      	ldr	r3, [r3, #16]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	da04      	bge.n	8000fc6 <HAL_ADC_Init+0x132>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	691b      	ldr	r3, [r3, #16]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	085b      	lsrs	r3, r3, #1
 8000fc4:	e001      	b.n	8000fca <HAL_ADC_Init+0x136>
 8000fc6:	2380      	movs	r3, #128	@ 0x80
 8000fc8:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8000fca:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	212c      	movs	r1, #44	@ 0x2c
 8000fd0:	5c5b      	ldrb	r3, [r3, r1]
 8000fd2:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000fd4:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2220      	movs	r2, #32
 8000fe0:	5c9b      	ldrb	r3, [r3, r2]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d115      	bne.n	8001012 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	7e9b      	ldrb	r3, [r3, #26]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d105      	bne.n	8000ffa <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	2280      	movs	r2, #128	@ 0x80
 8000ff2:	0252      	lsls	r2, r2, #9
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
 8000ff8:	e00b      	b.n	8001012 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ffe:	2220      	movs	r2, #32
 8001000:	431a      	orrs	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800100a:	2201      	movs	r2, #1
 800100c:	431a      	orrs	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001016:	2b00      	cmp	r3, #0
 8001018:	d00a      	beq.n	8001030 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800101e:	23e0      	movs	r3, #224	@ 0xe0
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001028:	4313      	orrs	r3, r2
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4313      	orrs	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	4a65      	ldr	r2, [pc, #404]	@ (80011cc <HAL_ADC_Init+0x338>)
 8001038:	4013      	ands	r3, r2
 800103a:	0019      	movs	r1, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	430a      	orrs	r2, r1
 8001044:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	0f9b      	lsrs	r3, r3, #30
 800104c:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001052:	4313      	orrs	r3, r2
 8001054:	697a      	ldr	r2, [r7, #20]
 8001056:	4313      	orrs	r3, r2
 8001058:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	223c      	movs	r2, #60	@ 0x3c
 800105e:	5c9b      	ldrb	r3, [r3, r2]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d111      	bne.n	8001088 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	0f9b      	lsrs	r3, r3, #30
 800106a:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001070:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001076:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800107c:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	4313      	orrs	r3, r2
 8001082:	2201      	movs	r2, #1
 8001084:	4313      	orrs	r3, r2
 8001086:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	691b      	ldr	r3, [r3, #16]
 800108e:	4a50      	ldr	r2, [pc, #320]	@ (80011d0 <HAL_ADC_Init+0x33c>)
 8001090:	4013      	ands	r3, r2
 8001092:	0019      	movs	r1, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	697a      	ldr	r2, [r7, #20]
 800109a:	430a      	orrs	r2, r1
 800109c:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	23c0      	movs	r3, #192	@ 0xc0
 80010a4:	061b      	lsls	r3, r3, #24
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d018      	beq.n	80010dc <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80010ae:	2380      	movs	r3, #128	@ 0x80
 80010b0:	05db      	lsls	r3, r3, #23
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d012      	beq.n	80010dc <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80010ba:	2380      	movs	r3, #128	@ 0x80
 80010bc:	061b      	lsls	r3, r3, #24
 80010be:	429a      	cmp	r2, r3
 80010c0:	d00c      	beq.n	80010dc <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80010c2:	4b44      	ldr	r3, [pc, #272]	@ (80011d4 <HAL_ADC_Init+0x340>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a44      	ldr	r2, [pc, #272]	@ (80011d8 <HAL_ADC_Init+0x344>)
 80010c8:	4013      	ands	r3, r2
 80010ca:	0019      	movs	r1, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685a      	ldr	r2, [r3, #4]
 80010d0:	23f0      	movs	r3, #240	@ 0xf0
 80010d2:	039b      	lsls	r3, r3, #14
 80010d4:	401a      	ands	r2, r3
 80010d6:	4b3f      	ldr	r3, [pc, #252]	@ (80011d4 <HAL_ADC_Init+0x340>)
 80010d8:	430a      	orrs	r2, r1
 80010da:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6818      	ldr	r0, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010e4:	001a      	movs	r2, r3
 80010e6:	2100      	movs	r1, #0
 80010e8:	f7ff fdad 	bl	8000c46 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6818      	ldr	r0, [r3, #0]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010f4:	4939      	ldr	r1, [pc, #228]	@ (80011dc <HAL_ADC_Init+0x348>)
 80010f6:	001a      	movs	r2, r3
 80010f8:	f7ff fda5 	bl	8000c46 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	691b      	ldr	r3, [r3, #16]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d109      	bne.n	8001118 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2110      	movs	r1, #16
 8001110:	4249      	negs	r1, r1
 8001112:	430a      	orrs	r2, r1
 8001114:	629a      	str	r2, [r3, #40]	@ 0x28
 8001116:	e018      	b.n	800114a <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	691a      	ldr	r2, [r3, #16]
 800111c:	2380      	movs	r3, #128	@ 0x80
 800111e:	039b      	lsls	r3, r3, #14
 8001120:	429a      	cmp	r2, r3
 8001122:	d112      	bne.n	800114a <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	3b01      	subs	r3, #1
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	221c      	movs	r2, #28
 8001134:	4013      	ands	r3, r2
 8001136:	2210      	movs	r2, #16
 8001138:	4252      	negs	r2, r2
 800113a:	409a      	lsls	r2, r3
 800113c:	0011      	movs	r1, r2
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	430a      	orrs	r2, r1
 8001148:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2100      	movs	r1, #0
 8001150:	0018      	movs	r0, r3
 8001152:	f7ff fd95 	bl	8000c80 <LL_ADC_GetSamplingTimeCommonChannels>
 8001156:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800115c:	429a      	cmp	r2, r3
 800115e:	d10b      	bne.n	8001178 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800116a:	2203      	movs	r2, #3
 800116c:	4393      	bics	r3, r2
 800116e:	2201      	movs	r2, #1
 8001170:	431a      	orrs	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001176:	e01c      	b.n	80011b2 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800117c:	2212      	movs	r2, #18
 800117e:	4393      	bics	r3, r2
 8001180:	2210      	movs	r2, #16
 8001182:	431a      	orrs	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800118c:	2201      	movs	r2, #1
 800118e:	431a      	orrs	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001194:	231f      	movs	r3, #31
 8001196:	18fb      	adds	r3, r7, r3
 8001198:	2201      	movs	r2, #1
 800119a:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800119c:	e009      	b.n	80011b2 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011a2:	2210      	movs	r2, #16
 80011a4:	431a      	orrs	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80011aa:	231f      	movs	r3, #31
 80011ac:	18fb      	adds	r3, r7, r3
 80011ae:	2201      	movs	r2, #1
 80011b0:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80011b2:	231f      	movs	r3, #31
 80011b4:	18fb      	adds	r3, r7, r3
 80011b6:	781b      	ldrb	r3, [r3, #0]
}
 80011b8:	0018      	movs	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	b008      	add	sp, #32
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000000 	.word	0x20000000
 80011c4:	00030d40 	.word	0x00030d40
 80011c8:	fffffefd 	.word	0xfffffefd
 80011cc:	ffde0201 	.word	0xffde0201
 80011d0:	1ffffc02 	.word	0x1ffffc02
 80011d4:	40012708 	.word	0x40012708
 80011d8:	ffc3ffff 	.word	0xffc3ffff
 80011dc:	7fffff04 	.word	0x7fffff04

080011e0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80011e0:	b5b0      	push	{r4, r5, r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	0018      	movs	r0, r3
 80011f2:	f7ff fe3d 	bl	8000e70 <LL_ADC_REG_IsConversionOngoing>
 80011f6:	1e03      	subs	r3, r0, #0
 80011f8:	d16c      	bne.n	80012d4 <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2254      	movs	r2, #84	@ 0x54
 80011fe:	5c9b      	ldrb	r3, [r3, r2]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d101      	bne.n	8001208 <HAL_ADC_Start_DMA+0x28>
 8001204:	2302      	movs	r3, #2
 8001206:	e06c      	b.n	80012e2 <HAL_ADC_Start_DMA+0x102>
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2254      	movs	r2, #84	@ 0x54
 800120c:	2101      	movs	r1, #1
 800120e:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	2201      	movs	r2, #1
 8001218:	4013      	ands	r3, r2
 800121a:	d113      	bne.n	8001244 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	0018      	movs	r0, r3
 8001222:	f7ff fe01 	bl	8000e28 <LL_ADC_IsEnabled>
 8001226:	1e03      	subs	r3, r0, #0
 8001228:	d004      	beq.n	8001234 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	0018      	movs	r0, r3
 8001230:	f7ff fde8 	bl	8000e04 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	68da      	ldr	r2, [r3, #12]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2101      	movs	r1, #1
 8001240:	430a      	orrs	r2, r1
 8001242:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001244:	2517      	movs	r5, #23
 8001246:	197c      	adds	r4, r7, r5
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	0018      	movs	r0, r3
 800124c:	f000 fa3c 	bl	80016c8 <ADC_Enable>
 8001250:	0003      	movs	r3, r0
 8001252:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001254:	002c      	movs	r4, r5
 8001256:	193b      	adds	r3, r7, r4
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d13e      	bne.n	80012dc <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001262:	4a22      	ldr	r2, [pc, #136]	@ (80012ec <HAL_ADC_Start_DMA+0x10c>)
 8001264:	4013      	ands	r3, r2
 8001266:	2280      	movs	r2, #128	@ 0x80
 8001268:	0052      	lsls	r2, r2, #1
 800126a:	431a      	orrs	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2200      	movs	r2, #0
 8001274:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800127a:	4a1d      	ldr	r2, [pc, #116]	@ (80012f0 <HAL_ADC_Start_DMA+0x110>)
 800127c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001282:	4a1c      	ldr	r2, [pc, #112]	@ (80012f4 <HAL_ADC_Start_DMA+0x114>)
 8001284:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800128a:	4a1b      	ldr	r2, [pc, #108]	@ (80012f8 <HAL_ADC_Start_DMA+0x118>)
 800128c:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	221c      	movs	r2, #28
 8001294:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2254      	movs	r2, #84	@ 0x54
 800129a:	2100      	movs	r1, #0
 800129c:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2110      	movs	r1, #16
 80012aa:	430a      	orrs	r2, r1
 80012ac:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	3340      	adds	r3, #64	@ 0x40
 80012b8:	0019      	movs	r1, r3
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	193c      	adds	r4, r7, r4
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f000 fc76 	bl	8001bb0 <HAL_DMA_Start_IT>
 80012c4:	0003      	movs	r3, r0
 80012c6:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	0018      	movs	r0, r3
 80012ce:	f7ff fdbd 	bl	8000e4c <LL_ADC_REG_StartConversion>
 80012d2:	e003      	b.n	80012dc <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80012d4:	2317      	movs	r3, #23
 80012d6:	18fb      	adds	r3, r7, r3
 80012d8:	2202      	movs	r2, #2
 80012da:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80012dc:	2317      	movs	r3, #23
 80012de:	18fb      	adds	r3, r7, r3
 80012e0:	781b      	ldrb	r3, [r3, #0]
}
 80012e2:	0018      	movs	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	b006      	add	sp, #24
 80012e8:	bdb0      	pop	{r4, r5, r7, pc}
 80012ea:	46c0      	nop			@ (mov r8, r8)
 80012ec:	fffff0fe 	.word	0xfffff0fe
 80012f0:	080017c5 	.word	0x080017c5
 80012f4:	0800188d 	.word	0x0800188d
 80012f8:	080018ab 	.word	0x080018ab

080012fc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001304:	46c0      	nop			@ (mov r8, r8)
 8001306:	46bd      	mov	sp, r7
 8001308:	b002      	add	sp, #8
 800130a:	bd80      	pop	{r7, pc}

0800130c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001314:	46c0      	nop			@ (mov r8, r8)
 8001316:	46bd      	mov	sp, r7
 8001318:	b002      	add	sp, #8
 800131a:	bd80      	pop	{r7, pc}

0800131c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001326:	2317      	movs	r3, #23
 8001328:	18fb      	adds	r3, r7, r3
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2254      	movs	r2, #84	@ 0x54
 8001336:	5c9b      	ldrb	r3, [r3, r2]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d101      	bne.n	8001340 <HAL_ADC_ConfigChannel+0x24>
 800133c:	2302      	movs	r3, #2
 800133e:	e1be      	b.n	80016be <HAL_ADC_ConfigChannel+0x3a2>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2254      	movs	r2, #84	@ 0x54
 8001344:	2101      	movs	r1, #1
 8001346:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	0018      	movs	r0, r3
 800134e:	f7ff fd8f 	bl	8000e70 <LL_ADC_REG_IsConversionOngoing>
 8001352:	1e03      	subs	r3, r0, #0
 8001354:	d000      	beq.n	8001358 <HAL_ADC_ConfigChannel+0x3c>
 8001356:	e1a1      	b.n	800169c <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b02      	cmp	r3, #2
 800135e:	d100      	bne.n	8001362 <HAL_ADC_ConfigChannel+0x46>
 8001360:	e152      	b.n	8001608 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691a      	ldr	r2, [r3, #16]
 8001366:	2380      	movs	r3, #128	@ 0x80
 8001368:	061b      	lsls	r3, r3, #24
 800136a:	429a      	cmp	r2, r3
 800136c:	d004      	beq.n	8001378 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001372:	4ac2      	ldr	r2, [pc, #776]	@ (800167c <HAL_ADC_ConfigChannel+0x360>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d108      	bne.n	800138a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	0019      	movs	r1, r3
 8001382:	0010      	movs	r0, r2
 8001384:	f7ff fcc4 	bl	8000d10 <LL_ADC_REG_SetSequencerChAdd>
 8001388:	e0ed      	b.n	8001566 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	211f      	movs	r1, #31
 8001394:	400b      	ands	r3, r1
 8001396:	210f      	movs	r1, #15
 8001398:	4099      	lsls	r1, r3
 800139a:	000b      	movs	r3, r1
 800139c:	43db      	mvns	r3, r3
 800139e:	4013      	ands	r3, r2
 80013a0:	0019      	movs	r1, r3
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	025b      	lsls	r3, r3, #9
 80013a8:	0a5b      	lsrs	r3, r3, #9
 80013aa:	d105      	bne.n	80013b8 <HAL_ADC_ConfigChannel+0x9c>
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	0e9b      	lsrs	r3, r3, #26
 80013b2:	221f      	movs	r2, #31
 80013b4:	4013      	ands	r3, r2
 80013b6:	e0bc      	b.n	8001532 <HAL_ADC_ConfigChannel+0x216>
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2201      	movs	r2, #1
 80013be:	4013      	ands	r3, r2
 80013c0:	d000      	beq.n	80013c4 <HAL_ADC_ConfigChannel+0xa8>
 80013c2:	e0b5      	b.n	8001530 <HAL_ADC_ConfigChannel+0x214>
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2202      	movs	r2, #2
 80013ca:	4013      	ands	r3, r2
 80013cc:	d000      	beq.n	80013d0 <HAL_ADC_ConfigChannel+0xb4>
 80013ce:	e0ad      	b.n	800152c <HAL_ADC_ConfigChannel+0x210>
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2204      	movs	r2, #4
 80013d6:	4013      	ands	r3, r2
 80013d8:	d000      	beq.n	80013dc <HAL_ADC_ConfigChannel+0xc0>
 80013da:	e0a5      	b.n	8001528 <HAL_ADC_ConfigChannel+0x20c>
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2208      	movs	r2, #8
 80013e2:	4013      	ands	r3, r2
 80013e4:	d000      	beq.n	80013e8 <HAL_ADC_ConfigChannel+0xcc>
 80013e6:	e09d      	b.n	8001524 <HAL_ADC_ConfigChannel+0x208>
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2210      	movs	r2, #16
 80013ee:	4013      	ands	r3, r2
 80013f0:	d000      	beq.n	80013f4 <HAL_ADC_ConfigChannel+0xd8>
 80013f2:	e095      	b.n	8001520 <HAL_ADC_ConfigChannel+0x204>
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2220      	movs	r2, #32
 80013fa:	4013      	ands	r3, r2
 80013fc:	d000      	beq.n	8001400 <HAL_ADC_ConfigChannel+0xe4>
 80013fe:	e08d      	b.n	800151c <HAL_ADC_ConfigChannel+0x200>
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2240      	movs	r2, #64	@ 0x40
 8001406:	4013      	ands	r3, r2
 8001408:	d000      	beq.n	800140c <HAL_ADC_ConfigChannel+0xf0>
 800140a:	e085      	b.n	8001518 <HAL_ADC_ConfigChannel+0x1fc>
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2280      	movs	r2, #128	@ 0x80
 8001412:	4013      	ands	r3, r2
 8001414:	d000      	beq.n	8001418 <HAL_ADC_ConfigChannel+0xfc>
 8001416:	e07d      	b.n	8001514 <HAL_ADC_ConfigChannel+0x1f8>
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	2380      	movs	r3, #128	@ 0x80
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	4013      	ands	r3, r2
 8001422:	d000      	beq.n	8001426 <HAL_ADC_ConfigChannel+0x10a>
 8001424:	e074      	b.n	8001510 <HAL_ADC_ConfigChannel+0x1f4>
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	2380      	movs	r3, #128	@ 0x80
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4013      	ands	r3, r2
 8001430:	d000      	beq.n	8001434 <HAL_ADC_ConfigChannel+0x118>
 8001432:	e06b      	b.n	800150c <HAL_ADC_ConfigChannel+0x1f0>
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	2380      	movs	r3, #128	@ 0x80
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	4013      	ands	r3, r2
 800143e:	d000      	beq.n	8001442 <HAL_ADC_ConfigChannel+0x126>
 8001440:	e062      	b.n	8001508 <HAL_ADC_ConfigChannel+0x1ec>
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	2380      	movs	r3, #128	@ 0x80
 8001448:	011b      	lsls	r3, r3, #4
 800144a:	4013      	ands	r3, r2
 800144c:	d000      	beq.n	8001450 <HAL_ADC_ConfigChannel+0x134>
 800144e:	e059      	b.n	8001504 <HAL_ADC_ConfigChannel+0x1e8>
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	2380      	movs	r3, #128	@ 0x80
 8001456:	015b      	lsls	r3, r3, #5
 8001458:	4013      	ands	r3, r2
 800145a:	d151      	bne.n	8001500 <HAL_ADC_ConfigChannel+0x1e4>
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	2380      	movs	r3, #128	@ 0x80
 8001462:	019b      	lsls	r3, r3, #6
 8001464:	4013      	ands	r3, r2
 8001466:	d149      	bne.n	80014fc <HAL_ADC_ConfigChannel+0x1e0>
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	2380      	movs	r3, #128	@ 0x80
 800146e:	01db      	lsls	r3, r3, #7
 8001470:	4013      	ands	r3, r2
 8001472:	d141      	bne.n	80014f8 <HAL_ADC_ConfigChannel+0x1dc>
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	2380      	movs	r3, #128	@ 0x80
 800147a:	021b      	lsls	r3, r3, #8
 800147c:	4013      	ands	r3, r2
 800147e:	d139      	bne.n	80014f4 <HAL_ADC_ConfigChannel+0x1d8>
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	2380      	movs	r3, #128	@ 0x80
 8001486:	025b      	lsls	r3, r3, #9
 8001488:	4013      	ands	r3, r2
 800148a:	d131      	bne.n	80014f0 <HAL_ADC_ConfigChannel+0x1d4>
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	2380      	movs	r3, #128	@ 0x80
 8001492:	029b      	lsls	r3, r3, #10
 8001494:	4013      	ands	r3, r2
 8001496:	d129      	bne.n	80014ec <HAL_ADC_ConfigChannel+0x1d0>
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	2380      	movs	r3, #128	@ 0x80
 800149e:	02db      	lsls	r3, r3, #11
 80014a0:	4013      	ands	r3, r2
 80014a2:	d121      	bne.n	80014e8 <HAL_ADC_ConfigChannel+0x1cc>
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	2380      	movs	r3, #128	@ 0x80
 80014aa:	031b      	lsls	r3, r3, #12
 80014ac:	4013      	ands	r3, r2
 80014ae:	d119      	bne.n	80014e4 <HAL_ADC_ConfigChannel+0x1c8>
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	2380      	movs	r3, #128	@ 0x80
 80014b6:	035b      	lsls	r3, r3, #13
 80014b8:	4013      	ands	r3, r2
 80014ba:	d111      	bne.n	80014e0 <HAL_ADC_ConfigChannel+0x1c4>
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	2380      	movs	r3, #128	@ 0x80
 80014c2:	039b      	lsls	r3, r3, #14
 80014c4:	4013      	ands	r3, r2
 80014c6:	d109      	bne.n	80014dc <HAL_ADC_ConfigChannel+0x1c0>
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	2380      	movs	r3, #128	@ 0x80
 80014ce:	03db      	lsls	r3, r3, #15
 80014d0:	4013      	ands	r3, r2
 80014d2:	d001      	beq.n	80014d8 <HAL_ADC_ConfigChannel+0x1bc>
 80014d4:	2316      	movs	r3, #22
 80014d6:	e02c      	b.n	8001532 <HAL_ADC_ConfigChannel+0x216>
 80014d8:	2300      	movs	r3, #0
 80014da:	e02a      	b.n	8001532 <HAL_ADC_ConfigChannel+0x216>
 80014dc:	2315      	movs	r3, #21
 80014de:	e028      	b.n	8001532 <HAL_ADC_ConfigChannel+0x216>
 80014e0:	2314      	movs	r3, #20
 80014e2:	e026      	b.n	8001532 <HAL_ADC_ConfigChannel+0x216>
 80014e4:	2313      	movs	r3, #19
 80014e6:	e024      	b.n	8001532 <HAL_ADC_ConfigChannel+0x216>
 80014e8:	2312      	movs	r3, #18
 80014ea:	e022      	b.n	8001532 <HAL_ADC_ConfigChannel+0x216>
 80014ec:	2311      	movs	r3, #17
 80014ee:	e020      	b.n	8001532 <HAL_ADC_ConfigChannel+0x216>
 80014f0:	2310      	movs	r3, #16
 80014f2:	e01e      	b.n	8001532 <HAL_ADC_ConfigChannel+0x216>
 80014f4:	230f      	movs	r3, #15
 80014f6:	e01c      	b.n	8001532 <HAL_ADC_ConfigChannel+0x216>
 80014f8:	230e      	movs	r3, #14
 80014fa:	e01a      	b.n	8001532 <HAL_ADC_ConfigChannel+0x216>
 80014fc:	230d      	movs	r3, #13
 80014fe:	e018      	b.n	8001532 <HAL_ADC_ConfigChannel+0x216>
 8001500:	230c      	movs	r3, #12
 8001502:	e016      	b.n	8001532 <HAL_ADC_ConfigChannel+0x216>
 8001504:	230b      	movs	r3, #11
 8001506:	e014      	b.n	8001532 <HAL_ADC_ConfigChannel+0x216>
 8001508:	230a      	movs	r3, #10
 800150a:	e012      	b.n	8001532 <HAL_ADC_ConfigChannel+0x216>
 800150c:	2309      	movs	r3, #9
 800150e:	e010      	b.n	8001532 <HAL_ADC_ConfigChannel+0x216>
 8001510:	2308      	movs	r3, #8
 8001512:	e00e      	b.n	8001532 <HAL_ADC_ConfigChannel+0x216>
 8001514:	2307      	movs	r3, #7
 8001516:	e00c      	b.n	8001532 <HAL_ADC_ConfigChannel+0x216>
 8001518:	2306      	movs	r3, #6
 800151a:	e00a      	b.n	8001532 <HAL_ADC_ConfigChannel+0x216>
 800151c:	2305      	movs	r3, #5
 800151e:	e008      	b.n	8001532 <HAL_ADC_ConfigChannel+0x216>
 8001520:	2304      	movs	r3, #4
 8001522:	e006      	b.n	8001532 <HAL_ADC_ConfigChannel+0x216>
 8001524:	2303      	movs	r3, #3
 8001526:	e004      	b.n	8001532 <HAL_ADC_ConfigChannel+0x216>
 8001528:	2302      	movs	r3, #2
 800152a:	e002      	b.n	8001532 <HAL_ADC_ConfigChannel+0x216>
 800152c:	2301      	movs	r3, #1
 800152e:	e000      	b.n	8001532 <HAL_ADC_ConfigChannel+0x216>
 8001530:	2300      	movs	r3, #0
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	6852      	ldr	r2, [r2, #4]
 8001536:	201f      	movs	r0, #31
 8001538:	4002      	ands	r2, r0
 800153a:	4093      	lsls	r3, r2
 800153c:	000a      	movs	r2, r1
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	089b      	lsrs	r3, r3, #2
 800154a:	1c5a      	adds	r2, r3, #1
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	69db      	ldr	r3, [r3, #28]
 8001550:	429a      	cmp	r2, r3
 8001552:	d808      	bhi.n	8001566 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6818      	ldr	r0, [r3, #0]
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	6859      	ldr	r1, [r3, #4]
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	001a      	movs	r2, r3
 8001562:	f7ff fbb5 	bl	8000cd0 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6818      	ldr	r0, [r3, #0]
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	6819      	ldr	r1, [r3, #0]
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	001a      	movs	r2, r3
 8001574:	f7ff fbf0 	bl	8000d58 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	db00      	blt.n	8001582 <HAL_ADC_ConfigChannel+0x266>
 8001580:	e096      	b.n	80016b0 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001582:	4b3f      	ldr	r3, [pc, #252]	@ (8001680 <HAL_ADC_ConfigChannel+0x364>)
 8001584:	0018      	movs	r0, r3
 8001586:	f7ff fb51 	bl	8000c2c <LL_ADC_GetCommonPathInternalCh>
 800158a:	0003      	movs	r3, r0
 800158c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a3c      	ldr	r2, [pc, #240]	@ (8001684 <HAL_ADC_ConfigChannel+0x368>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d123      	bne.n	80015e0 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	2380      	movs	r3, #128	@ 0x80
 800159c:	041b      	lsls	r3, r3, #16
 800159e:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80015a0:	d11e      	bne.n	80015e0 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	2280      	movs	r2, #128	@ 0x80
 80015a6:	0412      	lsls	r2, r2, #16
 80015a8:	4313      	orrs	r3, r2
 80015aa:	4a35      	ldr	r2, [pc, #212]	@ (8001680 <HAL_ADC_ConfigChannel+0x364>)
 80015ac:	0019      	movs	r1, r3
 80015ae:	0010      	movs	r0, r2
 80015b0:	f7ff fb28 	bl	8000c04 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 80015b4:	4b34      	ldr	r3, [pc, #208]	@ (8001688 <HAL_ADC_ConfigChannel+0x36c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4934      	ldr	r1, [pc, #208]	@ (800168c <HAL_ADC_ConfigChannel+0x370>)
 80015ba:	0018      	movs	r0, r3
 80015bc:	f7fe fdae 	bl	800011c <__udivsi3>
 80015c0:	0003      	movs	r3, r0
 80015c2:	001a      	movs	r2, r3
 80015c4:	0013      	movs	r3, r2
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	189b      	adds	r3, r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	3301      	adds	r3, #1
 80015ce:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80015d0:	e002      	b.n	80015d8 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	3b01      	subs	r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f9      	bne.n	80015d2 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80015de:	e067      	b.n	80016b0 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a2a      	ldr	r2, [pc, #168]	@ (8001690 <HAL_ADC_ConfigChannel+0x374>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d162      	bne.n	80016b0 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	2380      	movs	r3, #128	@ 0x80
 80015ee:	03db      	lsls	r3, r3, #15
 80015f0:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80015f2:	d15d      	bne.n	80016b0 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	2280      	movs	r2, #128	@ 0x80
 80015f8:	03d2      	lsls	r2, r2, #15
 80015fa:	4313      	orrs	r3, r2
 80015fc:	4a20      	ldr	r2, [pc, #128]	@ (8001680 <HAL_ADC_ConfigChannel+0x364>)
 80015fe:	0019      	movs	r1, r3
 8001600:	0010      	movs	r0, r2
 8001602:	f7ff faff 	bl	8000c04 <LL_ADC_SetCommonPathInternalCh>
 8001606:	e053      	b.n	80016b0 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691a      	ldr	r2, [r3, #16]
 800160c:	2380      	movs	r3, #128	@ 0x80
 800160e:	061b      	lsls	r3, r3, #24
 8001610:	429a      	cmp	r2, r3
 8001612:	d004      	beq.n	800161e <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001618:	4a18      	ldr	r2, [pc, #96]	@ (800167c <HAL_ADC_ConfigChannel+0x360>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d107      	bne.n	800162e <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	0019      	movs	r1, r3
 8001628:	0010      	movs	r0, r2
 800162a:	f7ff fb82 	bl	8000d32 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	da3c      	bge.n	80016b0 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001636:	4b12      	ldr	r3, [pc, #72]	@ (8001680 <HAL_ADC_ConfigChannel+0x364>)
 8001638:	0018      	movs	r0, r3
 800163a:	f7ff faf7 	bl	8000c2c <LL_ADC_GetCommonPathInternalCh>
 800163e:	0003      	movs	r3, r0
 8001640:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a0f      	ldr	r2, [pc, #60]	@ (8001684 <HAL_ADC_ConfigChannel+0x368>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d108      	bne.n	800165e <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	4a11      	ldr	r2, [pc, #68]	@ (8001694 <HAL_ADC_ConfigChannel+0x378>)
 8001650:	4013      	ands	r3, r2
 8001652:	4a0b      	ldr	r2, [pc, #44]	@ (8001680 <HAL_ADC_ConfigChannel+0x364>)
 8001654:	0019      	movs	r1, r3
 8001656:	0010      	movs	r0, r2
 8001658:	f7ff fad4 	bl	8000c04 <LL_ADC_SetCommonPathInternalCh>
 800165c:	e028      	b.n	80016b0 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a0b      	ldr	r2, [pc, #44]	@ (8001690 <HAL_ADC_ConfigChannel+0x374>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d123      	bne.n	80016b0 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	4a0b      	ldr	r2, [pc, #44]	@ (8001698 <HAL_ADC_ConfigChannel+0x37c>)
 800166c:	4013      	ands	r3, r2
 800166e:	4a04      	ldr	r2, [pc, #16]	@ (8001680 <HAL_ADC_ConfigChannel+0x364>)
 8001670:	0019      	movs	r1, r3
 8001672:	0010      	movs	r0, r2
 8001674:	f7ff fac6 	bl	8000c04 <LL_ADC_SetCommonPathInternalCh>
 8001678:	e01a      	b.n	80016b0 <HAL_ADC_ConfigChannel+0x394>
 800167a:	46c0      	nop			@ (mov r8, r8)
 800167c:	80000004 	.word	0x80000004
 8001680:	40012708 	.word	0x40012708
 8001684:	a4000200 	.word	0xa4000200
 8001688:	20000000 	.word	0x20000000
 800168c:	00030d40 	.word	0x00030d40
 8001690:	a8000400 	.word	0xa8000400
 8001694:	ff7fffff 	.word	0xff7fffff
 8001698:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a0:	2220      	movs	r2, #32
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80016a8:	2317      	movs	r3, #23
 80016aa:	18fb      	adds	r3, r7, r3
 80016ac:	2201      	movs	r2, #1
 80016ae:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2254      	movs	r2, #84	@ 0x54
 80016b4:	2100      	movs	r1, #0
 80016b6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80016b8:	2317      	movs	r3, #23
 80016ba:	18fb      	adds	r3, r7, r3
 80016bc:	781b      	ldrb	r3, [r3, #0]
}
 80016be:	0018      	movs	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	b006      	add	sp, #24
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	46c0      	nop			@ (mov r8, r8)

080016c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	0018      	movs	r0, r3
 80016da:	f7ff fba5 	bl	8000e28 <LL_ADC_IsEnabled>
 80016de:	1e03      	subs	r3, r0, #0
 80016e0:	d162      	bne.n	80017a8 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	4a32      	ldr	r2, [pc, #200]	@ (80017b4 <ADC_Enable+0xec>)
 80016ea:	4013      	ands	r3, r2
 80016ec:	d00d      	beq.n	800170a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f2:	2210      	movs	r2, #16
 80016f4:	431a      	orrs	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016fe:	2201      	movs	r2, #1
 8001700:	431a      	orrs	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e04f      	b.n	80017aa <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	0018      	movs	r0, r3
 8001710:	f7ff fb66 	bl	8000de0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001714:	4b28      	ldr	r3, [pc, #160]	@ (80017b8 <ADC_Enable+0xf0>)
 8001716:	0018      	movs	r0, r3
 8001718:	f7ff fa88 	bl	8000c2c <LL_ADC_GetCommonPathInternalCh>
 800171c:	0002      	movs	r2, r0
 800171e:	2380      	movs	r3, #128	@ 0x80
 8001720:	041b      	lsls	r3, r3, #16
 8001722:	4013      	ands	r3, r2
 8001724:	d00f      	beq.n	8001746 <ADC_Enable+0x7e>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001726:	4b25      	ldr	r3, [pc, #148]	@ (80017bc <ADC_Enable+0xf4>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4925      	ldr	r1, [pc, #148]	@ (80017c0 <ADC_Enable+0xf8>)
 800172c:	0018      	movs	r0, r3
 800172e:	f7fe fcf5 	bl	800011c <__udivsi3>
 8001732:	0003      	movs	r3, r0
 8001734:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001736:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001738:	e002      	b.n	8001740 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	3b01      	subs	r3, #1
 800173e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1f9      	bne.n	800173a <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	7e5b      	ldrb	r3, [r3, #25]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d02c      	beq.n	80017a8 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800174e:	f7ff fa4f 	bl	8000bf0 <HAL_GetTick>
 8001752:	0003      	movs	r3, r0
 8001754:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001756:	e020      	b.n	800179a <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	0018      	movs	r0, r3
 800175e:	f7ff fb63 	bl	8000e28 <LL_ADC_IsEnabled>
 8001762:	1e03      	subs	r3, r0, #0
 8001764:	d104      	bne.n	8001770 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	0018      	movs	r0, r3
 800176c:	f7ff fb38 	bl	8000de0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001770:	f7ff fa3e 	bl	8000bf0 <HAL_GetTick>
 8001774:	0002      	movs	r2, r0
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d90d      	bls.n	800179a <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001782:	2210      	movs	r2, #16
 8001784:	431a      	orrs	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800178e:	2201      	movs	r2, #1
 8001790:	431a      	orrs	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e007      	b.n	80017aa <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2201      	movs	r2, #1
 80017a2:	4013      	ands	r3, r2
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d1d7      	bne.n	8001758 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	0018      	movs	r0, r3
 80017ac:	46bd      	mov	sp, r7
 80017ae:	b004      	add	sp, #16
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	46c0      	nop			@ (mov r8, r8)
 80017b4:	80000017 	.word	0x80000017
 80017b8:	40012708 	.word	0x40012708
 80017bc:	20000000 	.word	0x20000000
 80017c0:	00030d40 	.word	0x00030d40

080017c4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017d0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d6:	2250      	movs	r2, #80	@ 0x50
 80017d8:	4013      	ands	r3, r2
 80017da:	d141      	bne.n	8001860 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e0:	2280      	movs	r2, #128	@ 0x80
 80017e2:	0092      	lsls	r2, r2, #2
 80017e4:	431a      	orrs	r2, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	0018      	movs	r0, r3
 80017f0:	f7ff fa5d 	bl	8000cae <LL_ADC_REG_IsTriggerSourceSWStart>
 80017f4:	1e03      	subs	r3, r0, #0
 80017f6:	d02e      	beq.n	8001856 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	7e9b      	ldrb	r3, [r3, #26]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d12a      	bne.n	8001856 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2208      	movs	r2, #8
 8001808:	4013      	ands	r3, r2
 800180a:	2b08      	cmp	r3, #8
 800180c:	d123      	bne.n	8001856 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	0018      	movs	r0, r3
 8001814:	f7ff fb2c 	bl	8000e70 <LL_ADC_REG_IsConversionOngoing>
 8001818:	1e03      	subs	r3, r0, #0
 800181a:	d110      	bne.n	800183e <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	210c      	movs	r1, #12
 8001828:	438a      	bics	r2, r1
 800182a:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001830:	4a15      	ldr	r2, [pc, #84]	@ (8001888 <ADC_DMAConvCplt+0xc4>)
 8001832:	4013      	ands	r3, r2
 8001834:	2201      	movs	r2, #1
 8001836:	431a      	orrs	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	659a      	str	r2, [r3, #88]	@ 0x58
 800183c:	e00b      	b.n	8001856 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001842:	2220      	movs	r2, #32
 8001844:	431a      	orrs	r2, r3
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800184e:	2201      	movs	r2, #1
 8001850:	431a      	orrs	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	0018      	movs	r0, r3
 800185a:	f7fe ff73 	bl	8000744 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800185e:	e00f      	b.n	8001880 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001864:	2210      	movs	r2, #16
 8001866:	4013      	ands	r3, r2
 8001868:	d004      	beq.n	8001874 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	0018      	movs	r0, r3
 800186e:	f7ff fd4d 	bl	800130c <HAL_ADC_ErrorCallback>
}
 8001872:	e005      	b.n	8001880 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	0010      	movs	r0, r2
 800187e:	4798      	blx	r3
}
 8001880:	46c0      	nop			@ (mov r8, r8)
 8001882:	46bd      	mov	sp, r7
 8001884:	b004      	add	sp, #16
 8001886:	bd80      	pop	{r7, pc}
 8001888:	fffffefe 	.word	0xfffffefe

0800188c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001898:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	0018      	movs	r0, r3
 800189e:	f7ff fd2d 	bl	80012fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018a2:	46c0      	nop			@ (mov r8, r8)
 80018a4:	46bd      	mov	sp, r7
 80018a6:	b004      	add	sp, #16
 80018a8:	bd80      	pop	{r7, pc}

080018aa <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b084      	sub	sp, #16
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018bc:	2240      	movs	r2, #64	@ 0x40
 80018be:	431a      	orrs	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018c8:	2204      	movs	r2, #4
 80018ca:	431a      	orrs	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	0018      	movs	r0, r3
 80018d4:	f7ff fd1a 	bl	800130c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018d8:	46c0      	nop			@ (mov r8, r8)
 80018da:	46bd      	mov	sp, r7
 80018dc:	b004      	add	sp, #16
 80018de:	bd80      	pop	{r7, pc}

080018e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	0002      	movs	r2, r0
 80018e8:	1dfb      	adds	r3, r7, #7
 80018ea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018ec:	1dfb      	adds	r3, r7, #7
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80018f2:	d809      	bhi.n	8001908 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018f4:	1dfb      	adds	r3, r7, #7
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	001a      	movs	r2, r3
 80018fa:	231f      	movs	r3, #31
 80018fc:	401a      	ands	r2, r3
 80018fe:	4b04      	ldr	r3, [pc, #16]	@ (8001910 <__NVIC_EnableIRQ+0x30>)
 8001900:	2101      	movs	r1, #1
 8001902:	4091      	lsls	r1, r2
 8001904:	000a      	movs	r2, r1
 8001906:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001908:	46c0      	nop			@ (mov r8, r8)
 800190a:	46bd      	mov	sp, r7
 800190c:	b002      	add	sp, #8
 800190e:	bd80      	pop	{r7, pc}
 8001910:	e000e100 	.word	0xe000e100

08001914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001914:	b590      	push	{r4, r7, lr}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	0002      	movs	r2, r0
 800191c:	6039      	str	r1, [r7, #0]
 800191e:	1dfb      	adds	r3, r7, #7
 8001920:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001922:	1dfb      	adds	r3, r7, #7
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b7f      	cmp	r3, #127	@ 0x7f
 8001928:	d828      	bhi.n	800197c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800192a:	4a2f      	ldr	r2, [pc, #188]	@ (80019e8 <__NVIC_SetPriority+0xd4>)
 800192c:	1dfb      	adds	r3, r7, #7
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	b25b      	sxtb	r3, r3
 8001932:	089b      	lsrs	r3, r3, #2
 8001934:	33c0      	adds	r3, #192	@ 0xc0
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	589b      	ldr	r3, [r3, r2]
 800193a:	1dfa      	adds	r2, r7, #7
 800193c:	7812      	ldrb	r2, [r2, #0]
 800193e:	0011      	movs	r1, r2
 8001940:	2203      	movs	r2, #3
 8001942:	400a      	ands	r2, r1
 8001944:	00d2      	lsls	r2, r2, #3
 8001946:	21ff      	movs	r1, #255	@ 0xff
 8001948:	4091      	lsls	r1, r2
 800194a:	000a      	movs	r2, r1
 800194c:	43d2      	mvns	r2, r2
 800194e:	401a      	ands	r2, r3
 8001950:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	019b      	lsls	r3, r3, #6
 8001956:	22ff      	movs	r2, #255	@ 0xff
 8001958:	401a      	ands	r2, r3
 800195a:	1dfb      	adds	r3, r7, #7
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	0018      	movs	r0, r3
 8001960:	2303      	movs	r3, #3
 8001962:	4003      	ands	r3, r0
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001968:	481f      	ldr	r0, [pc, #124]	@ (80019e8 <__NVIC_SetPriority+0xd4>)
 800196a:	1dfb      	adds	r3, r7, #7
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	b25b      	sxtb	r3, r3
 8001970:	089b      	lsrs	r3, r3, #2
 8001972:	430a      	orrs	r2, r1
 8001974:	33c0      	adds	r3, #192	@ 0xc0
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800197a:	e031      	b.n	80019e0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800197c:	4a1b      	ldr	r2, [pc, #108]	@ (80019ec <__NVIC_SetPriority+0xd8>)
 800197e:	1dfb      	adds	r3, r7, #7
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	0019      	movs	r1, r3
 8001984:	230f      	movs	r3, #15
 8001986:	400b      	ands	r3, r1
 8001988:	3b08      	subs	r3, #8
 800198a:	089b      	lsrs	r3, r3, #2
 800198c:	3306      	adds	r3, #6
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	18d3      	adds	r3, r2, r3
 8001992:	3304      	adds	r3, #4
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	1dfa      	adds	r2, r7, #7
 8001998:	7812      	ldrb	r2, [r2, #0]
 800199a:	0011      	movs	r1, r2
 800199c:	2203      	movs	r2, #3
 800199e:	400a      	ands	r2, r1
 80019a0:	00d2      	lsls	r2, r2, #3
 80019a2:	21ff      	movs	r1, #255	@ 0xff
 80019a4:	4091      	lsls	r1, r2
 80019a6:	000a      	movs	r2, r1
 80019a8:	43d2      	mvns	r2, r2
 80019aa:	401a      	ands	r2, r3
 80019ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	019b      	lsls	r3, r3, #6
 80019b2:	22ff      	movs	r2, #255	@ 0xff
 80019b4:	401a      	ands	r2, r3
 80019b6:	1dfb      	adds	r3, r7, #7
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	0018      	movs	r0, r3
 80019bc:	2303      	movs	r3, #3
 80019be:	4003      	ands	r3, r0
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019c4:	4809      	ldr	r0, [pc, #36]	@ (80019ec <__NVIC_SetPriority+0xd8>)
 80019c6:	1dfb      	adds	r3, r7, #7
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	001c      	movs	r4, r3
 80019cc:	230f      	movs	r3, #15
 80019ce:	4023      	ands	r3, r4
 80019d0:	3b08      	subs	r3, #8
 80019d2:	089b      	lsrs	r3, r3, #2
 80019d4:	430a      	orrs	r2, r1
 80019d6:	3306      	adds	r3, #6
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	18c3      	adds	r3, r0, r3
 80019dc:	3304      	adds	r3, #4
 80019de:	601a      	str	r2, [r3, #0]
}
 80019e0:	46c0      	nop			@ (mov r8, r8)
 80019e2:	46bd      	mov	sp, r7
 80019e4:	b003      	add	sp, #12
 80019e6:	bd90      	pop	{r4, r7, pc}
 80019e8:	e000e100 	.word	0xe000e100
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	1e5a      	subs	r2, r3, #1
 80019fc:	2380      	movs	r3, #128	@ 0x80
 80019fe:	045b      	lsls	r3, r3, #17
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d301      	bcc.n	8001a08 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a04:	2301      	movs	r3, #1
 8001a06:	e010      	b.n	8001a2a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a08:	4b0a      	ldr	r3, [pc, #40]	@ (8001a34 <SysTick_Config+0x44>)
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	3a01      	subs	r2, #1
 8001a0e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a10:	2301      	movs	r3, #1
 8001a12:	425b      	negs	r3, r3
 8001a14:	2103      	movs	r1, #3
 8001a16:	0018      	movs	r0, r3
 8001a18:	f7ff ff7c 	bl	8001914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a1c:	4b05      	ldr	r3, [pc, #20]	@ (8001a34 <SysTick_Config+0x44>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a22:	4b04      	ldr	r3, [pc, #16]	@ (8001a34 <SysTick_Config+0x44>)
 8001a24:	2207      	movs	r2, #7
 8001a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	b002      	add	sp, #8
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	46c0      	nop			@ (mov r8, r8)
 8001a34:	e000e010 	.word	0xe000e010

08001a38 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607a      	str	r2, [r7, #4]
 8001a42:	210f      	movs	r1, #15
 8001a44:	187b      	adds	r3, r7, r1
 8001a46:	1c02      	adds	r2, r0, #0
 8001a48:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	187b      	adds	r3, r7, r1
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	b25b      	sxtb	r3, r3
 8001a52:	0011      	movs	r1, r2
 8001a54:	0018      	movs	r0, r3
 8001a56:	f7ff ff5d 	bl	8001914 <__NVIC_SetPriority>
}
 8001a5a:	46c0      	nop			@ (mov r8, r8)
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	b004      	add	sp, #16
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	0002      	movs	r2, r0
 8001a6a:	1dfb      	adds	r3, r7, #7
 8001a6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a6e:	1dfb      	adds	r3, r7, #7
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	b25b      	sxtb	r3, r3
 8001a74:	0018      	movs	r0, r3
 8001a76:	f7ff ff33 	bl	80018e0 <__NVIC_EnableIRQ>
}
 8001a7a:	46c0      	nop			@ (mov r8, r8)
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	b002      	add	sp, #8
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f7ff ffaf 	bl	80019f0 <SysTick_Config>
 8001a92:	0003      	movs	r3, r0
}
 8001a94:	0018      	movs	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	b002      	add	sp, #8
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e077      	b.n	8001b9e <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a3d      	ldr	r2, [pc, #244]	@ (8001ba8 <HAL_DMA_Init+0x10c>)
 8001ab4:	4694      	mov	ip, r2
 8001ab6:	4463      	add	r3, ip
 8001ab8:	2114      	movs	r1, #20
 8001aba:	0018      	movs	r0, r3
 8001abc:	f7fe fb2e 	bl	800011c <__udivsi3>
 8001ac0:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8001ac2:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2225      	movs	r2, #37	@ 0x25
 8001acc:	2102      	movs	r1, #2
 8001ace:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4934      	ldr	r1, [pc, #208]	@ (8001bac <HAL_DMA_Init+0x110>)
 8001adc:	400a      	ands	r2, r1
 8001ade:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6819      	ldr	r1, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689a      	ldr	r2, [r3, #8]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	431a      	orrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	431a      	orrs	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	431a      	orrs	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f000 f9c3 	bl	8001ea4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	2380      	movs	r3, #128	@ 0x80
 8001b24:	01db      	lsls	r3, r3, #7
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d102      	bne.n	8001b30 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b38:	21ff      	movs	r1, #255	@ 0xff
 8001b3a:	400a      	ands	r2, r1
 8001b3c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001b46:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d011      	beq.n	8001b74 <HAL_DMA_Init+0xd8>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b04      	cmp	r3, #4
 8001b56:	d80d      	bhi.n	8001b74 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	f000 f9ce 	bl	8001efc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	e008      	b.n	8001b86 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2225      	movs	r2, #37	@ 0x25
 8001b90:	2101      	movs	r1, #1
 8001b92:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2224      	movs	r2, #36	@ 0x24
 8001b98:	2100      	movs	r1, #0
 8001b9a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	b002      	add	sp, #8
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	46c0      	nop			@ (mov r8, r8)
 8001ba8:	bffdfff8 	.word	0xbffdfff8
 8001bac:	ffff800f 	.word	0xffff800f

08001bb0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
 8001bbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bbe:	2317      	movs	r3, #23
 8001bc0:	18fb      	adds	r3, r7, r3
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2224      	movs	r2, #36	@ 0x24
 8001bca:	5c9b      	ldrb	r3, [r3, r2]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d101      	bne.n	8001bd4 <HAL_DMA_Start_IT+0x24>
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	e070      	b.n	8001cb6 <HAL_DMA_Start_IT+0x106>
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2224      	movs	r2, #36	@ 0x24
 8001bd8:	2101      	movs	r1, #1
 8001bda:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2225      	movs	r2, #37	@ 0x25
 8001be0:	5c9b      	ldrb	r3, [r3, r2]
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d157      	bne.n	8001c98 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2225      	movs	r2, #37	@ 0x25
 8001bec:	2102      	movs	r1, #2
 8001bee:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2101      	movs	r1, #1
 8001c02:	438a      	bics	r2, r1
 8001c04:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	68b9      	ldr	r1, [r7, #8]
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	f000 f909 	bl	8001e24 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d008      	beq.n	8001c2c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	210e      	movs	r1, #14
 8001c26:	430a      	orrs	r2, r1
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	e00f      	b.n	8001c4c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2104      	movs	r1, #4
 8001c38:	438a      	bics	r2, r1
 8001c3a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	210a      	movs	r1, #10
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	2380      	movs	r3, #128	@ 0x80
 8001c54:	025b      	lsls	r3, r3, #9
 8001c56:	4013      	ands	r3, r2
 8001c58:	d008      	beq.n	8001c6c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c64:	2180      	movs	r1, #128	@ 0x80
 8001c66:	0049      	lsls	r1, r1, #1
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d008      	beq.n	8001c86 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c7e:	2180      	movs	r1, #128	@ 0x80
 8001c80:	0049      	lsls	r1, r1, #1
 8001c82:	430a      	orrs	r2, r1
 8001c84:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2101      	movs	r1, #1
 8001c92:	430a      	orrs	r2, r1
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	e007      	b.n	8001ca8 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2224      	movs	r2, #36	@ 0x24
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001ca0:	2317      	movs	r3, #23
 8001ca2:	18fb      	adds	r3, r7, r3
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2224      	movs	r2, #36	@ 0x24
 8001cac:	2100      	movs	r1, #0
 8001cae:	5499      	strb	r1, [r3, r2]

  return status;
 8001cb0:	2317      	movs	r3, #23
 8001cb2:	18fb      	adds	r3, r7, r3
 8001cb4:	781b      	ldrb	r3, [r3, #0]
}
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	b006      	add	sp, #24
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8001cc8:	4b55      	ldr	r3, [pc, #340]	@ (8001e20 <HAL_DMA_IRQHandler+0x160>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cda:	221c      	movs	r2, #28
 8001cdc:	4013      	ands	r3, r2
 8001cde:	2204      	movs	r2, #4
 8001ce0:	409a      	lsls	r2, r3
 8001ce2:	0013      	movs	r3, r2
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	d027      	beq.n	8001d3a <HAL_DMA_IRQHandler+0x7a>
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	2204      	movs	r2, #4
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d023      	beq.n	8001d3a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2220      	movs	r2, #32
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d107      	bne.n	8001d0e <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2104      	movs	r1, #4
 8001d0a:	438a      	bics	r2, r1
 8001d0c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8001d0e:	4b44      	ldr	r3, [pc, #272]	@ (8001e20 <HAL_DMA_IRQHandler+0x160>)
 8001d10:	6859      	ldr	r1, [r3, #4]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d16:	221c      	movs	r2, #28
 8001d18:	4013      	ands	r3, r2
 8001d1a:	2204      	movs	r2, #4
 8001d1c:	409a      	lsls	r2, r3
 8001d1e:	4b40      	ldr	r3, [pc, #256]	@ (8001e20 <HAL_DMA_IRQHandler+0x160>)
 8001d20:	430a      	orrs	r2, r1
 8001d22:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d100      	bne.n	8001d2e <HAL_DMA_IRQHandler+0x6e>
 8001d2c:	e073      	b.n	8001e16 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	0010      	movs	r0, r2
 8001d36:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001d38:	e06d      	b.n	8001e16 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3e:	221c      	movs	r2, #28
 8001d40:	4013      	ands	r3, r2
 8001d42:	2202      	movs	r2, #2
 8001d44:	409a      	lsls	r2, r3
 8001d46:	0013      	movs	r3, r2
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d02e      	beq.n	8001dac <HAL_DMA_IRQHandler+0xec>
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	2202      	movs	r2, #2
 8001d52:	4013      	ands	r3, r2
 8001d54:	d02a      	beq.n	8001dac <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2220      	movs	r2, #32
 8001d5e:	4013      	ands	r3, r2
 8001d60:	d10b      	bne.n	8001d7a <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	210a      	movs	r1, #10
 8001d6e:	438a      	bics	r2, r1
 8001d70:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2225      	movs	r2, #37	@ 0x25
 8001d76:	2101      	movs	r1, #1
 8001d78:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8001d7a:	4b29      	ldr	r3, [pc, #164]	@ (8001e20 <HAL_DMA_IRQHandler+0x160>)
 8001d7c:	6859      	ldr	r1, [r3, #4]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d82:	221c      	movs	r2, #28
 8001d84:	4013      	ands	r3, r2
 8001d86:	2202      	movs	r2, #2
 8001d88:	409a      	lsls	r2, r3
 8001d8a:	4b25      	ldr	r3, [pc, #148]	@ (8001e20 <HAL_DMA_IRQHandler+0x160>)
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2224      	movs	r2, #36	@ 0x24
 8001d94:	2100      	movs	r1, #0
 8001d96:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d03a      	beq.n	8001e16 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	0010      	movs	r0, r2
 8001da8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001daa:	e034      	b.n	8001e16 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db0:	221c      	movs	r2, #28
 8001db2:	4013      	ands	r3, r2
 8001db4:	2208      	movs	r2, #8
 8001db6:	409a      	lsls	r2, r3
 8001db8:	0013      	movs	r3, r2
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d02b      	beq.n	8001e18 <HAL_DMA_IRQHandler+0x158>
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	2208      	movs	r2, #8
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d027      	beq.n	8001e18 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	210e      	movs	r1, #14
 8001dd4:	438a      	bics	r2, r1
 8001dd6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8001dd8:	4b11      	ldr	r3, [pc, #68]	@ (8001e20 <HAL_DMA_IRQHandler+0x160>)
 8001dda:	6859      	ldr	r1, [r3, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de0:	221c      	movs	r2, #28
 8001de2:	4013      	ands	r3, r2
 8001de4:	2201      	movs	r2, #1
 8001de6:	409a      	lsls	r2, r3
 8001de8:	4b0d      	ldr	r3, [pc, #52]	@ (8001e20 <HAL_DMA_IRQHandler+0x160>)
 8001dea:	430a      	orrs	r2, r1
 8001dec:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2225      	movs	r2, #37	@ 0x25
 8001df8:	2101      	movs	r1, #1
 8001dfa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2224      	movs	r2, #36	@ 0x24
 8001e00:	2100      	movs	r1, #0
 8001e02:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d005      	beq.n	8001e18 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	0010      	movs	r0, r2
 8001e14:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001e16:	46c0      	nop			@ (mov r8, r8)
 8001e18:	46c0      	nop			@ (mov r8, r8)
}
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	b004      	add	sp, #16
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40020000 	.word	0x40020000

08001e24 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
 8001e30:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001e3a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d004      	beq.n	8001e4e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001e4c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8001e4e:	4b14      	ldr	r3, [pc, #80]	@ (8001ea0 <DMA_SetConfig+0x7c>)
 8001e50:	6859      	ldr	r1, [r3, #4]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e56:	221c      	movs	r2, #28
 8001e58:	4013      	ands	r3, r2
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	409a      	lsls	r2, r3
 8001e5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ea0 <DMA_SetConfig+0x7c>)
 8001e60:	430a      	orrs	r2, r1
 8001e62:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	2b10      	cmp	r3, #16
 8001e72:	d108      	bne.n	8001e86 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68ba      	ldr	r2, [r7, #8]
 8001e82:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e84:	e007      	b.n	8001e96 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	60da      	str	r2, [r3, #12]
}
 8001e96:	46c0      	nop			@ (mov r8, r8)
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	b004      	add	sp, #16
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	46c0      	nop			@ (mov r8, r8)
 8001ea0:	40020000 	.word	0x40020000

08001ea4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	001a      	movs	r2, r3
 8001eb2:	23ff      	movs	r3, #255	@ 0xff
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	3b08      	subs	r3, #8
 8001eb8:	2114      	movs	r1, #20
 8001eba:	0018      	movs	r0, r3
 8001ebc:	f7fe f92e 	bl	800011c <__udivsi3>
 8001ec0:	0003      	movs	r3, r0
 8001ec2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec8:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8001eca:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001ecc:	4694      	mov	ip, r2
 8001ece:	4463      	add	r3, ip
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	001a      	movs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a07      	ldr	r2, [pc, #28]	@ (8001ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001edc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	221c      	movs	r2, #28
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	409a      	lsls	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001eec:	46c0      	nop			@ (mov r8, r8)
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	b004      	add	sp, #16
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	10008200 	.word	0x10008200
 8001ef8:	40020880 	.word	0x40020880

08001efc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	22ff      	movs	r2, #255	@ 0xff
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	4a0a      	ldr	r2, [pc, #40]	@ (8001f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001f12:	4694      	mov	ip, r2
 8001f14:	4463      	add	r3, ip
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	001a      	movs	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a07      	ldr	r2, [pc, #28]	@ (8001f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001f22:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	2203      	movs	r2, #3
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	409a      	lsls	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8001f34:	46c0      	nop			@ (mov r8, r8)
 8001f36:	46bd      	mov	sp, r7
 8001f38:	b004      	add	sp, #16
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	1000823f 	.word	0x1000823f
 8001f40:	40020940 	.word	0x40020940

08001f44 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001f52:	e14d      	b.n	80021f0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2101      	movs	r1, #1
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4091      	lsls	r1, r2
 8001f5e:	000a      	movs	r2, r1
 8001f60:	4013      	ands	r3, r2
 8001f62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d100      	bne.n	8001f6c <HAL_GPIO_Init+0x28>
 8001f6a:	e13e      	b.n	80021ea <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d003      	beq.n	8001f7c <HAL_GPIO_Init+0x38>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	2b12      	cmp	r3, #18
 8001f7a:	d125      	bne.n	8001fc8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	08da      	lsrs	r2, r3, #3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3208      	adds	r2, #8
 8001f84:	0092      	lsls	r2, r2, #2
 8001f86:	58d3      	ldr	r3, [r2, r3]
 8001f88:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	2207      	movs	r2, #7
 8001f8e:	4013      	ands	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	220f      	movs	r2, #15
 8001f94:	409a      	lsls	r2, r3
 8001f96:	0013      	movs	r3, r2
 8001f98:	43da      	mvns	r2, r3
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	220f      	movs	r2, #15
 8001fa6:	401a      	ands	r2, r3
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	2107      	movs	r1, #7
 8001fac:	400b      	ands	r3, r1
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	409a      	lsls	r2, r3
 8001fb2:	0013      	movs	r3, r2
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	08da      	lsrs	r2, r3, #3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3208      	adds	r2, #8
 8001fc2:	0092      	lsls	r2, r2, #2
 8001fc4:	6979      	ldr	r1, [r7, #20]
 8001fc6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	2203      	movs	r2, #3
 8001fd4:	409a      	lsls	r2, r3
 8001fd6:	0013      	movs	r3, r2
 8001fd8:	43da      	mvns	r2, r3
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2203      	movs	r2, #3
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	409a      	lsls	r2, r3
 8001fee:	0013      	movs	r3, r2
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d00b      	beq.n	800201c <HAL_GPIO_Init+0xd8>
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	2b02      	cmp	r3, #2
 800200a:	d007      	beq.n	800201c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002010:	2b11      	cmp	r3, #17
 8002012:	d003      	beq.n	800201c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b12      	cmp	r3, #18
 800201a:	d130      	bne.n	800207e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	2203      	movs	r2, #3
 8002028:	409a      	lsls	r2, r3
 800202a:	0013      	movs	r3, r2
 800202c:	43da      	mvns	r2, r3
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	4013      	ands	r3, r2
 8002032:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	68da      	ldr	r2, [r3, #12]
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	409a      	lsls	r2, r3
 800203e:	0013      	movs	r3, r2
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	4313      	orrs	r3, r2
 8002044:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002052:	2201      	movs	r2, #1
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	409a      	lsls	r2, r3
 8002058:	0013      	movs	r3, r2
 800205a:	43da      	mvns	r2, r3
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	4013      	ands	r3, r2
 8002060:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	091b      	lsrs	r3, r3, #4
 8002068:	2201      	movs	r2, #1
 800206a:	401a      	ands	r2, r3
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	409a      	lsls	r2, r3
 8002070:	0013      	movs	r3, r2
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	4313      	orrs	r3, r2
 8002076:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b03      	cmp	r3, #3
 8002084:	d017      	beq.n	80020b6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	2203      	movs	r2, #3
 8002092:	409a      	lsls	r2, r3
 8002094:	0013      	movs	r3, r2
 8002096:	43da      	mvns	r2, r3
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	4013      	ands	r3, r2
 800209c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	689a      	ldr	r2, [r3, #8]
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	409a      	lsls	r2, r3
 80020a8:	0013      	movs	r3, r2
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	2380      	movs	r3, #128	@ 0x80
 80020bc:	055b      	lsls	r3, r3, #21
 80020be:	4013      	ands	r3, r2
 80020c0:	d100      	bne.n	80020c4 <HAL_GPIO_Init+0x180>
 80020c2:	e092      	b.n	80021ea <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80020c4:	4a50      	ldr	r2, [pc, #320]	@ (8002208 <HAL_GPIO_Init+0x2c4>)
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	089b      	lsrs	r3, r3, #2
 80020ca:	3318      	adds	r3, #24
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	589b      	ldr	r3, [r3, r2]
 80020d0:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	2203      	movs	r2, #3
 80020d6:	4013      	ands	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	220f      	movs	r2, #15
 80020dc:	409a      	lsls	r2, r3
 80020de:	0013      	movs	r3, r2
 80020e0:	43da      	mvns	r2, r3
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	4013      	ands	r3, r2
 80020e6:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	23a0      	movs	r3, #160	@ 0xa0
 80020ec:	05db      	lsls	r3, r3, #23
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d013      	beq.n	800211a <HAL_GPIO_Init+0x1d6>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a45      	ldr	r2, [pc, #276]	@ (800220c <HAL_GPIO_Init+0x2c8>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d00d      	beq.n	8002116 <HAL_GPIO_Init+0x1d2>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a44      	ldr	r2, [pc, #272]	@ (8002210 <HAL_GPIO_Init+0x2cc>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d007      	beq.n	8002112 <HAL_GPIO_Init+0x1ce>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a43      	ldr	r2, [pc, #268]	@ (8002214 <HAL_GPIO_Init+0x2d0>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d101      	bne.n	800210e <HAL_GPIO_Init+0x1ca>
 800210a:	2305      	movs	r3, #5
 800210c:	e006      	b.n	800211c <HAL_GPIO_Init+0x1d8>
 800210e:	2306      	movs	r3, #6
 8002110:	e004      	b.n	800211c <HAL_GPIO_Init+0x1d8>
 8002112:	2302      	movs	r3, #2
 8002114:	e002      	b.n	800211c <HAL_GPIO_Init+0x1d8>
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <HAL_GPIO_Init+0x1d8>
 800211a:	2300      	movs	r3, #0
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	2103      	movs	r1, #3
 8002120:	400a      	ands	r2, r1
 8002122:	00d2      	lsls	r2, r2, #3
 8002124:	4093      	lsls	r3, r2
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	4313      	orrs	r3, r2
 800212a:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800212c:	4936      	ldr	r1, [pc, #216]	@ (8002208 <HAL_GPIO_Init+0x2c4>)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	089b      	lsrs	r3, r3, #2
 8002132:	3318      	adds	r3, #24
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 800213a:	4a33      	ldr	r2, [pc, #204]	@ (8002208 <HAL_GPIO_Init+0x2c4>)
 800213c:	2380      	movs	r3, #128	@ 0x80
 800213e:	58d3      	ldr	r3, [r2, r3]
 8002140:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	43da      	mvns	r2, r3
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	4013      	ands	r3, r2
 800214a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	2380      	movs	r3, #128	@ 0x80
 8002152:	025b      	lsls	r3, r3, #9
 8002154:	4013      	ands	r3, r2
 8002156:	d003      	beq.n	8002160 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	4313      	orrs	r3, r2
 800215e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002160:	4929      	ldr	r1, [pc, #164]	@ (8002208 <HAL_GPIO_Init+0x2c4>)
 8002162:	2280      	movs	r2, #128	@ 0x80
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8002168:	4a27      	ldr	r2, [pc, #156]	@ (8002208 <HAL_GPIO_Init+0x2c4>)
 800216a:	2384      	movs	r3, #132	@ 0x84
 800216c:	58d3      	ldr	r3, [r2, r3]
 800216e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	43da      	mvns	r2, r3
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	4013      	ands	r3, r2
 8002178:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	2380      	movs	r3, #128	@ 0x80
 8002180:	029b      	lsls	r3, r3, #10
 8002182:	4013      	ands	r3, r2
 8002184:	d003      	beq.n	800218e <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4313      	orrs	r3, r2
 800218c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800218e:	491e      	ldr	r1, [pc, #120]	@ (8002208 <HAL_GPIO_Init+0x2c4>)
 8002190:	2284      	movs	r2, #132	@ 0x84
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002196:	4b1c      	ldr	r3, [pc, #112]	@ (8002208 <HAL_GPIO_Init+0x2c4>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	43da      	mvns	r2, r3
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	4013      	ands	r3, r2
 80021a4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	2380      	movs	r3, #128	@ 0x80
 80021ac:	035b      	lsls	r3, r3, #13
 80021ae:	4013      	ands	r3, r2
 80021b0:	d003      	beq.n	80021ba <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80021ba:	4b13      	ldr	r3, [pc, #76]	@ (8002208 <HAL_GPIO_Init+0x2c4>)
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80021c0:	4b11      	ldr	r3, [pc, #68]	@ (8002208 <HAL_GPIO_Init+0x2c4>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	43da      	mvns	r2, r3
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	4013      	ands	r3, r2
 80021ce:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	2380      	movs	r3, #128	@ 0x80
 80021d6:	039b      	lsls	r3, r3, #14
 80021d8:	4013      	ands	r3, r2
 80021da:	d003      	beq.n	80021e4 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80021e4:	4b08      	ldr	r3, [pc, #32]	@ (8002208 <HAL_GPIO_Init+0x2c4>)
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	3301      	adds	r3, #1
 80021ee:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	40da      	lsrs	r2, r3
 80021f8:	1e13      	subs	r3, r2, #0
 80021fa:	d000      	beq.n	80021fe <HAL_GPIO_Init+0x2ba>
 80021fc:	e6aa      	b.n	8001f54 <HAL_GPIO_Init+0x10>
  }
}
 80021fe:	46c0      	nop			@ (mov r8, r8)
 8002200:	46c0      	nop			@ (mov r8, r8)
 8002202:	46bd      	mov	sp, r7
 8002204:	b006      	add	sp, #24
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40021800 	.word	0x40021800
 800220c:	50000400 	.word	0x50000400
 8002210:	50000800 	.word	0x50000800
 8002214:	50001400 	.word	0x50001400

08002218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	0008      	movs	r0, r1
 8002222:	0011      	movs	r1, r2
 8002224:	1cbb      	adds	r3, r7, #2
 8002226:	1c02      	adds	r2, r0, #0
 8002228:	801a      	strh	r2, [r3, #0]
 800222a:	1c7b      	adds	r3, r7, #1
 800222c:	1c0a      	adds	r2, r1, #0
 800222e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002230:	1c7b      	adds	r3, r7, #1
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d004      	beq.n	8002242 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002238:	1cbb      	adds	r3, r7, #2
 800223a:	881a      	ldrh	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002240:	e003      	b.n	800224a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002242:	1cbb      	adds	r3, r7, #2
 8002244:	881a      	ldrh	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800224a:	46c0      	nop			@ (mov r8, r8)
 800224c:	46bd      	mov	sp, r7
 800224e:	b002      	add	sp, #8
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e1d0      	b.n	8002608 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2201      	movs	r2, #1
 800226c:	4013      	ands	r3, r2
 800226e:	d100      	bne.n	8002272 <HAL_RCC_OscConfig+0x1e>
 8002270:	e069      	b.n	8002346 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002272:	4bc8      	ldr	r3, [pc, #800]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	2238      	movs	r2, #56	@ 0x38
 8002278:	4013      	ands	r3, r2
 800227a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	2b08      	cmp	r3, #8
 8002280:	d105      	bne.n	800228e <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d15d      	bne.n	8002346 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e1bc      	b.n	8002608 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	2380      	movs	r3, #128	@ 0x80
 8002294:	025b      	lsls	r3, r3, #9
 8002296:	429a      	cmp	r2, r3
 8002298:	d107      	bne.n	80022aa <HAL_RCC_OscConfig+0x56>
 800229a:	4bbe      	ldr	r3, [pc, #760]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	4bbd      	ldr	r3, [pc, #756]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 80022a0:	2180      	movs	r1, #128	@ 0x80
 80022a2:	0249      	lsls	r1, r1, #9
 80022a4:	430a      	orrs	r2, r1
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	e020      	b.n	80022ec <HAL_RCC_OscConfig+0x98>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	23a0      	movs	r3, #160	@ 0xa0
 80022b0:	02db      	lsls	r3, r3, #11
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d10e      	bne.n	80022d4 <HAL_RCC_OscConfig+0x80>
 80022b6:	4bb7      	ldr	r3, [pc, #732]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	4bb6      	ldr	r3, [pc, #728]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 80022bc:	2180      	movs	r1, #128	@ 0x80
 80022be:	02c9      	lsls	r1, r1, #11
 80022c0:	430a      	orrs	r2, r1
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	4bb3      	ldr	r3, [pc, #716]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	4bb2      	ldr	r3, [pc, #712]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 80022ca:	2180      	movs	r1, #128	@ 0x80
 80022cc:	0249      	lsls	r1, r1, #9
 80022ce:	430a      	orrs	r2, r1
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	e00b      	b.n	80022ec <HAL_RCC_OscConfig+0x98>
 80022d4:	4baf      	ldr	r3, [pc, #700]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	4bae      	ldr	r3, [pc, #696]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 80022da:	49af      	ldr	r1, [pc, #700]	@ (8002598 <HAL_RCC_OscConfig+0x344>)
 80022dc:	400a      	ands	r2, r1
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	4bac      	ldr	r3, [pc, #688]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	4bab      	ldr	r3, [pc, #684]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 80022e6:	49ad      	ldr	r1, [pc, #692]	@ (800259c <HAL_RCC_OscConfig+0x348>)
 80022e8:	400a      	ands	r2, r1
 80022ea:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d014      	beq.n	800231e <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f4:	f7fe fc7c 	bl	8000bf0 <HAL_GetTick>
 80022f8:	0003      	movs	r3, r0
 80022fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80022fe:	f7fe fc77 	bl	8000bf0 <HAL_GetTick>
 8002302:	0002      	movs	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b64      	cmp	r3, #100	@ 0x64
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e17b      	b.n	8002608 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002310:	4ba0      	ldr	r3, [pc, #640]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	2380      	movs	r3, #128	@ 0x80
 8002316:	029b      	lsls	r3, r3, #10
 8002318:	4013      	ands	r3, r2
 800231a:	d0f0      	beq.n	80022fe <HAL_RCC_OscConfig+0xaa>
 800231c:	e013      	b.n	8002346 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231e:	f7fe fc67 	bl	8000bf0 <HAL_GetTick>
 8002322:	0003      	movs	r3, r0
 8002324:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002328:	f7fe fc62 	bl	8000bf0 <HAL_GetTick>
 800232c:	0002      	movs	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b64      	cmp	r3, #100	@ 0x64
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e166      	b.n	8002608 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800233a:	4b96      	ldr	r3, [pc, #600]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	2380      	movs	r3, #128	@ 0x80
 8002340:	029b      	lsls	r3, r3, #10
 8002342:	4013      	ands	r3, r2
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2202      	movs	r2, #2
 800234c:	4013      	ands	r3, r2
 800234e:	d100      	bne.n	8002352 <HAL_RCC_OscConfig+0xfe>
 8002350:	e086      	b.n	8002460 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002352:	4b90      	ldr	r3, [pc, #576]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	2238      	movs	r2, #56	@ 0x38
 8002358:	4013      	ands	r3, r2
 800235a:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d12f      	bne.n	80023c2 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e14c      	b.n	8002608 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236e:	4b89      	ldr	r3, [pc, #548]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	4a8b      	ldr	r2, [pc, #556]	@ (80025a0 <HAL_RCC_OscConfig+0x34c>)
 8002374:	4013      	ands	r3, r2
 8002376:	0019      	movs	r1, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	695b      	ldr	r3, [r3, #20]
 800237c:	021a      	lsls	r2, r3, #8
 800237e:	4b85      	ldr	r3, [pc, #532]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 8002380:	430a      	orrs	r2, r1
 8002382:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d112      	bne.n	80023b0 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800238a:	4b82      	ldr	r3, [pc, #520]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a85      	ldr	r2, [pc, #532]	@ (80025a4 <HAL_RCC_OscConfig+0x350>)
 8002390:	4013      	ands	r3, r2
 8002392:	0019      	movs	r1, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691a      	ldr	r2, [r3, #16]
 8002398:	4b7e      	ldr	r3, [pc, #504]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 800239a:	430a      	orrs	r2, r1
 800239c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800239e:	4b7d      	ldr	r3, [pc, #500]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	0adb      	lsrs	r3, r3, #11
 80023a4:	2207      	movs	r2, #7
 80023a6:	4013      	ands	r3, r2
 80023a8:	4a7f      	ldr	r2, [pc, #508]	@ (80025a8 <HAL_RCC_OscConfig+0x354>)
 80023aa:	40da      	lsrs	r2, r3
 80023ac:	4b7f      	ldr	r3, [pc, #508]	@ (80025ac <HAL_RCC_OscConfig+0x358>)
 80023ae:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80023b0:	4b7f      	ldr	r3, [pc, #508]	@ (80025b0 <HAL_RCC_OscConfig+0x35c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	0018      	movs	r0, r3
 80023b6:	f7fe fbbf 	bl	8000b38 <HAL_InitTick>
 80023ba:	1e03      	subs	r3, r0, #0
 80023bc:	d050      	beq.n	8002460 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e122      	b.n	8002608 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d030      	beq.n	800242c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80023ca:	4b72      	ldr	r3, [pc, #456]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a75      	ldr	r2, [pc, #468]	@ (80025a4 <HAL_RCC_OscConfig+0x350>)
 80023d0:	4013      	ands	r3, r2
 80023d2:	0019      	movs	r1, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691a      	ldr	r2, [r3, #16]
 80023d8:	4b6e      	ldr	r3, [pc, #440]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 80023da:	430a      	orrs	r2, r1
 80023dc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80023de:	4b6d      	ldr	r3, [pc, #436]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	4b6c      	ldr	r3, [pc, #432]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 80023e4:	2180      	movs	r1, #128	@ 0x80
 80023e6:	0049      	lsls	r1, r1, #1
 80023e8:	430a      	orrs	r2, r1
 80023ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ec:	f7fe fc00 	bl	8000bf0 <HAL_GetTick>
 80023f0:	0003      	movs	r3, r0
 80023f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80023f6:	f7fe fbfb 	bl	8000bf0 <HAL_GetTick>
 80023fa:	0002      	movs	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e0ff      	b.n	8002608 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002408:	4b62      	ldr	r3, [pc, #392]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	2380      	movs	r3, #128	@ 0x80
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	4013      	ands	r3, r2
 8002412:	d0f0      	beq.n	80023f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002414:	4b5f      	ldr	r3, [pc, #380]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	4a61      	ldr	r2, [pc, #388]	@ (80025a0 <HAL_RCC_OscConfig+0x34c>)
 800241a:	4013      	ands	r3, r2
 800241c:	0019      	movs	r1, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	021a      	lsls	r2, r3, #8
 8002424:	4b5b      	ldr	r3, [pc, #364]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 8002426:	430a      	orrs	r2, r1
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	e019      	b.n	8002460 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 800242c:	4b59      	ldr	r3, [pc, #356]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	4b58      	ldr	r3, [pc, #352]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 8002432:	4960      	ldr	r1, [pc, #384]	@ (80025b4 <HAL_RCC_OscConfig+0x360>)
 8002434:	400a      	ands	r2, r1
 8002436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002438:	f7fe fbda 	bl	8000bf0 <HAL_GetTick>
 800243c:	0003      	movs	r3, r0
 800243e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002442:	f7fe fbd5 	bl	8000bf0 <HAL_GetTick>
 8002446:	0002      	movs	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e0d9      	b.n	8002608 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002454:	4b4f      	ldr	r3, [pc, #316]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	2380      	movs	r3, #128	@ 0x80
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	4013      	ands	r3, r2
 800245e:	d1f0      	bne.n	8002442 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2208      	movs	r2, #8
 8002466:	4013      	ands	r3, r2
 8002468:	d042      	beq.n	80024f0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800246a:	4b4a      	ldr	r3, [pc, #296]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	2238      	movs	r2, #56	@ 0x38
 8002470:	4013      	ands	r3, r2
 8002472:	2b18      	cmp	r3, #24
 8002474:	d105      	bne.n	8002482 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d138      	bne.n	80024f0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e0c2      	b.n	8002608 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d019      	beq.n	80024be <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800248a:	4b42      	ldr	r3, [pc, #264]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 800248c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800248e:	4b41      	ldr	r3, [pc, #260]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 8002490:	2101      	movs	r1, #1
 8002492:	430a      	orrs	r2, r1
 8002494:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002496:	f7fe fbab 	bl	8000bf0 <HAL_GetTick>
 800249a:	0003      	movs	r3, r0
 800249c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80024a0:	f7fe fba6 	bl	8000bf0 <HAL_GetTick>
 80024a4:	0002      	movs	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e0aa      	b.n	8002608 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80024b2:	4b38      	ldr	r3, [pc, #224]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 80024b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024b6:	2202      	movs	r2, #2
 80024b8:	4013      	ands	r3, r2
 80024ba:	d0f1      	beq.n	80024a0 <HAL_RCC_OscConfig+0x24c>
 80024bc:	e018      	b.n	80024f0 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80024be:	4b35      	ldr	r3, [pc, #212]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 80024c0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80024c2:	4b34      	ldr	r3, [pc, #208]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 80024c4:	2101      	movs	r1, #1
 80024c6:	438a      	bics	r2, r1
 80024c8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ca:	f7fe fb91 	bl	8000bf0 <HAL_GetTick>
 80024ce:	0003      	movs	r3, r0
 80024d0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80024d4:	f7fe fb8c 	bl	8000bf0 <HAL_GetTick>
 80024d8:	0002      	movs	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e090      	b.n	8002608 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80024e6:	4b2b      	ldr	r3, [pc, #172]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 80024e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024ea:	2202      	movs	r2, #2
 80024ec:	4013      	ands	r3, r2
 80024ee:	d1f1      	bne.n	80024d4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2204      	movs	r2, #4
 80024f6:	4013      	ands	r3, r2
 80024f8:	d100      	bne.n	80024fc <HAL_RCC_OscConfig+0x2a8>
 80024fa:	e084      	b.n	8002606 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024fc:	230f      	movs	r3, #15
 80024fe:	18fb      	adds	r3, r7, r3
 8002500:	2200      	movs	r2, #0
 8002502:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002504:	4b23      	ldr	r3, [pc, #140]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	2238      	movs	r2, #56	@ 0x38
 800250a:	4013      	ands	r3, r2
 800250c:	2b20      	cmp	r3, #32
 800250e:	d106      	bne.n	800251e <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d000      	beq.n	800251a <HAL_RCC_OscConfig+0x2c6>
 8002518:	e075      	b.n	8002606 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e074      	b.n	8002608 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d106      	bne.n	8002534 <HAL_RCC_OscConfig+0x2e0>
 8002526:	4b1b      	ldr	r3, [pc, #108]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 8002528:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800252a:	4b1a      	ldr	r3, [pc, #104]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 800252c:	2101      	movs	r1, #1
 800252e:	430a      	orrs	r2, r1
 8002530:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002532:	e01c      	b.n	800256e <HAL_RCC_OscConfig+0x31a>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	2b05      	cmp	r3, #5
 800253a:	d10c      	bne.n	8002556 <HAL_RCC_OscConfig+0x302>
 800253c:	4b15      	ldr	r3, [pc, #84]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 800253e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002540:	4b14      	ldr	r3, [pc, #80]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 8002542:	2104      	movs	r1, #4
 8002544:	430a      	orrs	r2, r1
 8002546:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002548:	4b12      	ldr	r3, [pc, #72]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 800254a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800254c:	4b11      	ldr	r3, [pc, #68]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 800254e:	2101      	movs	r1, #1
 8002550:	430a      	orrs	r2, r1
 8002552:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002554:	e00b      	b.n	800256e <HAL_RCC_OscConfig+0x31a>
 8002556:	4b0f      	ldr	r3, [pc, #60]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 8002558:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800255a:	4b0e      	ldr	r3, [pc, #56]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 800255c:	2101      	movs	r1, #1
 800255e:	438a      	bics	r2, r1
 8002560:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002562:	4b0c      	ldr	r3, [pc, #48]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 8002564:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002566:	4b0b      	ldr	r3, [pc, #44]	@ (8002594 <HAL_RCC_OscConfig+0x340>)
 8002568:	2104      	movs	r1, #4
 800256a:	438a      	bics	r2, r1
 800256c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d028      	beq.n	80025c8 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002576:	f7fe fb3b 	bl	8000bf0 <HAL_GetTick>
 800257a:	0003      	movs	r3, r0
 800257c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800257e:	e01d      	b.n	80025bc <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002580:	f7fe fb36 	bl	8000bf0 <HAL_GetTick>
 8002584:	0002      	movs	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	4a0b      	ldr	r2, [pc, #44]	@ (80025b8 <HAL_RCC_OscConfig+0x364>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d915      	bls.n	80025bc <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e039      	b.n	8002608 <HAL_RCC_OscConfig+0x3b4>
 8002594:	40021000 	.word	0x40021000
 8002598:	fffeffff 	.word	0xfffeffff
 800259c:	fffbffff 	.word	0xfffbffff
 80025a0:	ffff80ff 	.word	0xffff80ff
 80025a4:	ffffc7ff 	.word	0xffffc7ff
 80025a8:	02dc6c00 	.word	0x02dc6c00
 80025ac:	20000000 	.word	0x20000000
 80025b0:	20000004 	.word	0x20000004
 80025b4:	fffffeff 	.word	0xfffffeff
 80025b8:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80025bc:	4b14      	ldr	r3, [pc, #80]	@ (8002610 <HAL_RCC_OscConfig+0x3bc>)
 80025be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c0:	2202      	movs	r2, #2
 80025c2:	4013      	ands	r3, r2
 80025c4:	d0dc      	beq.n	8002580 <HAL_RCC_OscConfig+0x32c>
 80025c6:	e013      	b.n	80025f0 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c8:	f7fe fb12 	bl	8000bf0 <HAL_GetTick>
 80025cc:	0003      	movs	r3, r0
 80025ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80025d0:	e009      	b.n	80025e6 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d2:	f7fe fb0d 	bl	8000bf0 <HAL_GetTick>
 80025d6:	0002      	movs	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002614 <HAL_RCC_OscConfig+0x3c0>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e010      	b.n	8002608 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80025e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002610 <HAL_RCC_OscConfig+0x3bc>)
 80025e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ea:	2202      	movs	r2, #2
 80025ec:	4013      	ands	r3, r2
 80025ee:	d1f0      	bne.n	80025d2 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80025f0:	230f      	movs	r3, #15
 80025f2:	18fb      	adds	r3, r7, r3
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d105      	bne.n	8002606 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80025fa:	4b05      	ldr	r3, [pc, #20]	@ (8002610 <HAL_RCC_OscConfig+0x3bc>)
 80025fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025fe:	4b04      	ldr	r3, [pc, #16]	@ (8002610 <HAL_RCC_OscConfig+0x3bc>)
 8002600:	4905      	ldr	r1, [pc, #20]	@ (8002618 <HAL_RCC_OscConfig+0x3c4>)
 8002602:	400a      	ands	r2, r1
 8002604:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	0018      	movs	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	b006      	add	sp, #24
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40021000 	.word	0x40021000
 8002614:	00001388 	.word	0x00001388
 8002618:	efffffff 	.word	0xefffffff

0800261c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e0df      	b.n	80027f0 <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002630:	4b71      	ldr	r3, [pc, #452]	@ (80027f8 <HAL_RCC_ClockConfig+0x1dc>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2207      	movs	r2, #7
 8002636:	4013      	ands	r3, r2
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d91e      	bls.n	800267c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263e:	4b6e      	ldr	r3, [pc, #440]	@ (80027f8 <HAL_RCC_ClockConfig+0x1dc>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2207      	movs	r2, #7
 8002644:	4393      	bics	r3, r2
 8002646:	0019      	movs	r1, r3
 8002648:	4b6b      	ldr	r3, [pc, #428]	@ (80027f8 <HAL_RCC_ClockConfig+0x1dc>)
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002650:	f7fe face 	bl	8000bf0 <HAL_GetTick>
 8002654:	0003      	movs	r3, r0
 8002656:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002658:	e009      	b.n	800266e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800265a:	f7fe fac9 	bl	8000bf0 <HAL_GetTick>
 800265e:	0002      	movs	r2, r0
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	4a65      	ldr	r2, [pc, #404]	@ (80027fc <HAL_RCC_ClockConfig+0x1e0>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d901      	bls.n	800266e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e0c0      	b.n	80027f0 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800266e:	4b62      	ldr	r3, [pc, #392]	@ (80027f8 <HAL_RCC_ClockConfig+0x1dc>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2207      	movs	r2, #7
 8002674:	4013      	ands	r3, r2
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	429a      	cmp	r2, r3
 800267a:	d1ee      	bne.n	800265a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2202      	movs	r2, #2
 8002682:	4013      	ands	r3, r2
 8002684:	d017      	beq.n	80026b6 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2204      	movs	r2, #4
 800268c:	4013      	ands	r3, r2
 800268e:	d008      	beq.n	80026a2 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002690:	4b5b      	ldr	r3, [pc, #364]	@ (8002800 <HAL_RCC_ClockConfig+0x1e4>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	4a5b      	ldr	r2, [pc, #364]	@ (8002804 <HAL_RCC_ClockConfig+0x1e8>)
 8002696:	401a      	ands	r2, r3
 8002698:	4b59      	ldr	r3, [pc, #356]	@ (8002800 <HAL_RCC_ClockConfig+0x1e4>)
 800269a:	21b0      	movs	r1, #176	@ 0xb0
 800269c:	0109      	lsls	r1, r1, #4
 800269e:	430a      	orrs	r2, r1
 80026a0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a2:	4b57      	ldr	r3, [pc, #348]	@ (8002800 <HAL_RCC_ClockConfig+0x1e4>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	4a58      	ldr	r2, [pc, #352]	@ (8002808 <HAL_RCC_ClockConfig+0x1ec>)
 80026a8:	4013      	ands	r3, r2
 80026aa:	0019      	movs	r1, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68da      	ldr	r2, [r3, #12]
 80026b0:	4b53      	ldr	r3, [pc, #332]	@ (8002800 <HAL_RCC_ClockConfig+0x1e4>)
 80026b2:	430a      	orrs	r2, r1
 80026b4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2201      	movs	r2, #1
 80026bc:	4013      	ands	r3, r2
 80026be:	d04b      	beq.n	8002758 <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d107      	bne.n	80026d8 <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026c8:	4b4d      	ldr	r3, [pc, #308]	@ (8002800 <HAL_RCC_ClockConfig+0x1e4>)
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	2380      	movs	r3, #128	@ 0x80
 80026ce:	029b      	lsls	r3, r3, #10
 80026d0:	4013      	ands	r3, r2
 80026d2:	d11f      	bne.n	8002714 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e08b      	b.n	80027f0 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d107      	bne.n	80026f0 <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026e0:	4b47      	ldr	r3, [pc, #284]	@ (8002800 <HAL_RCC_ClockConfig+0x1e4>)
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	2380      	movs	r3, #128	@ 0x80
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	4013      	ands	r3, r2
 80026ea:	d113      	bne.n	8002714 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e07f      	b.n	80027f0 <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b03      	cmp	r3, #3
 80026f6:	d106      	bne.n	8002706 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80026f8:	4b41      	ldr	r3, [pc, #260]	@ (8002800 <HAL_RCC_ClockConfig+0x1e4>)
 80026fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026fc:	2202      	movs	r2, #2
 80026fe:	4013      	ands	r3, r2
 8002700:	d108      	bne.n	8002714 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e074      	b.n	80027f0 <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002706:	4b3e      	ldr	r3, [pc, #248]	@ (8002800 <HAL_RCC_ClockConfig+0x1e4>)
 8002708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800270a:	2202      	movs	r2, #2
 800270c:	4013      	ands	r3, r2
 800270e:	d101      	bne.n	8002714 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e06d      	b.n	80027f0 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002714:	4b3a      	ldr	r3, [pc, #232]	@ (8002800 <HAL_RCC_ClockConfig+0x1e4>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	2207      	movs	r2, #7
 800271a:	4393      	bics	r3, r2
 800271c:	0019      	movs	r1, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	4b37      	ldr	r3, [pc, #220]	@ (8002800 <HAL_RCC_ClockConfig+0x1e4>)
 8002724:	430a      	orrs	r2, r1
 8002726:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002728:	f7fe fa62 	bl	8000bf0 <HAL_GetTick>
 800272c:	0003      	movs	r3, r0
 800272e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002730:	e009      	b.n	8002746 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002732:	f7fe fa5d 	bl	8000bf0 <HAL_GetTick>
 8002736:	0002      	movs	r2, r0
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	4a2f      	ldr	r2, [pc, #188]	@ (80027fc <HAL_RCC_ClockConfig+0x1e0>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e054      	b.n	80027f0 <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002746:	4b2e      	ldr	r3, [pc, #184]	@ (8002800 <HAL_RCC_ClockConfig+0x1e4>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	2238      	movs	r2, #56	@ 0x38
 800274c:	401a      	ands	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	429a      	cmp	r2, r3
 8002756:	d1ec      	bne.n	8002732 <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002758:	4b27      	ldr	r3, [pc, #156]	@ (80027f8 <HAL_RCC_ClockConfig+0x1dc>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2207      	movs	r2, #7
 800275e:	4013      	ands	r3, r2
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	429a      	cmp	r2, r3
 8002764:	d21e      	bcs.n	80027a4 <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002766:	4b24      	ldr	r3, [pc, #144]	@ (80027f8 <HAL_RCC_ClockConfig+0x1dc>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2207      	movs	r2, #7
 800276c:	4393      	bics	r3, r2
 800276e:	0019      	movs	r1, r3
 8002770:	4b21      	ldr	r3, [pc, #132]	@ (80027f8 <HAL_RCC_ClockConfig+0x1dc>)
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002778:	f7fe fa3a 	bl	8000bf0 <HAL_GetTick>
 800277c:	0003      	movs	r3, r0
 800277e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002780:	e009      	b.n	8002796 <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002782:	f7fe fa35 	bl	8000bf0 <HAL_GetTick>
 8002786:	0002      	movs	r2, r0
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	4a1b      	ldr	r2, [pc, #108]	@ (80027fc <HAL_RCC_ClockConfig+0x1e0>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e02c      	b.n	80027f0 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002796:	4b18      	ldr	r3, [pc, #96]	@ (80027f8 <HAL_RCC_ClockConfig+0x1dc>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2207      	movs	r2, #7
 800279c:	4013      	ands	r3, r2
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d1ee      	bne.n	8002782 <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2204      	movs	r2, #4
 80027aa:	4013      	ands	r3, r2
 80027ac:	d009      	beq.n	80027c2 <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80027ae:	4b14      	ldr	r3, [pc, #80]	@ (8002800 <HAL_RCC_ClockConfig+0x1e4>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	4a16      	ldr	r2, [pc, #88]	@ (800280c <HAL_RCC_ClockConfig+0x1f0>)
 80027b4:	4013      	ands	r3, r2
 80027b6:	0019      	movs	r1, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691a      	ldr	r2, [r3, #16]
 80027bc:	4b10      	ldr	r3, [pc, #64]	@ (8002800 <HAL_RCC_ClockConfig+0x1e4>)
 80027be:	430a      	orrs	r2, r1
 80027c0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80027c2:	f000 f82b 	bl	800281c <HAL_RCC_GetSysClockFreq>
 80027c6:	0001      	movs	r1, r0
 80027c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002800 <HAL_RCC_ClockConfig+0x1e4>)
 80027ca:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80027cc:	0a1b      	lsrs	r3, r3, #8
 80027ce:	220f      	movs	r2, #15
 80027d0:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80027d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002810 <HAL_RCC_ClockConfig+0x1f4>)
 80027d4:	0092      	lsls	r2, r2, #2
 80027d6:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80027d8:	221f      	movs	r2, #31
 80027da:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80027dc:	000a      	movs	r2, r1
 80027de:	40da      	lsrs	r2, r3
 80027e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002814 <HAL_RCC_ClockConfig+0x1f8>)
 80027e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80027e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002818 <HAL_RCC_ClockConfig+0x1fc>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	0018      	movs	r0, r3
 80027ea:	f7fe f9a5 	bl	8000b38 <HAL_InitTick>
 80027ee:	0003      	movs	r3, r0
}
 80027f0:	0018      	movs	r0, r3
 80027f2:	46bd      	mov	sp, r7
 80027f4:	b004      	add	sp, #16
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40022000 	.word	0x40022000
 80027fc:	00001388 	.word	0x00001388
 8002800:	40021000 	.word	0x40021000
 8002804:	ffff84ff 	.word	0xffff84ff
 8002808:	fffff0ff 	.word	0xfffff0ff
 800280c:	ffff8fff 	.word	0xffff8fff
 8002810:	08003ff8 	.word	0x08003ff8
 8002814:	20000000 	.word	0x20000000
 8002818:	20000004 	.word	0x20000004

0800281c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002822:	4b1c      	ldr	r3, [pc, #112]	@ (8002894 <HAL_RCC_GetSysClockFreq+0x78>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	2238      	movs	r2, #56	@ 0x38
 8002828:	4013      	ands	r3, r2
 800282a:	d10f      	bne.n	800284c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800282c:	4b19      	ldr	r3, [pc, #100]	@ (8002894 <HAL_RCC_GetSysClockFreq+0x78>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	0adb      	lsrs	r3, r3, #11
 8002832:	2207      	movs	r2, #7
 8002834:	4013      	ands	r3, r2
 8002836:	2201      	movs	r2, #1
 8002838:	409a      	lsls	r2, r3
 800283a:	0013      	movs	r3, r2
 800283c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800283e:	6839      	ldr	r1, [r7, #0]
 8002840:	4815      	ldr	r0, [pc, #84]	@ (8002898 <HAL_RCC_GetSysClockFreq+0x7c>)
 8002842:	f7fd fc6b 	bl	800011c <__udivsi3>
 8002846:	0003      	movs	r3, r0
 8002848:	607b      	str	r3, [r7, #4]
 800284a:	e01e      	b.n	800288a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800284c:	4b11      	ldr	r3, [pc, #68]	@ (8002894 <HAL_RCC_GetSysClockFreq+0x78>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	2238      	movs	r2, #56	@ 0x38
 8002852:	4013      	ands	r3, r2
 8002854:	2b08      	cmp	r3, #8
 8002856:	d102      	bne.n	800285e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002858:	4b10      	ldr	r3, [pc, #64]	@ (800289c <HAL_RCC_GetSysClockFreq+0x80>)
 800285a:	607b      	str	r3, [r7, #4]
 800285c:	e015      	b.n	800288a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800285e:	4b0d      	ldr	r3, [pc, #52]	@ (8002894 <HAL_RCC_GetSysClockFreq+0x78>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	2238      	movs	r2, #56	@ 0x38
 8002864:	4013      	ands	r3, r2
 8002866:	2b20      	cmp	r3, #32
 8002868:	d103      	bne.n	8002872 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800286a:	2380      	movs	r3, #128	@ 0x80
 800286c:	021b      	lsls	r3, r3, #8
 800286e:	607b      	str	r3, [r7, #4]
 8002870:	e00b      	b.n	800288a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002872:	4b08      	ldr	r3, [pc, #32]	@ (8002894 <HAL_RCC_GetSysClockFreq+0x78>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	2238      	movs	r2, #56	@ 0x38
 8002878:	4013      	ands	r3, r2
 800287a:	2b18      	cmp	r3, #24
 800287c:	d103      	bne.n	8002886 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800287e:	23fa      	movs	r3, #250	@ 0xfa
 8002880:	01db      	lsls	r3, r3, #7
 8002882:	607b      	str	r3, [r7, #4]
 8002884:	e001      	b.n	800288a <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8002886:	2300      	movs	r3, #0
 8002888:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 800288a:	687b      	ldr	r3, [r7, #4]
}
 800288c:	0018      	movs	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	b002      	add	sp, #8
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40021000 	.word	0x40021000
 8002898:	02dc6c00 	.word	0x02dc6c00
 800289c:	007a1200 	.word	0x007a1200

080028a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80028a4:	f7ff ffba 	bl	800281c <HAL_RCC_GetSysClockFreq>
 80028a8:	0001      	movs	r1, r0
 80028aa:	4b09      	ldr	r3, [pc, #36]	@ (80028d0 <HAL_RCC_GetHCLKFreq+0x30>)
 80028ac:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80028ae:	0a1b      	lsrs	r3, r3, #8
 80028b0:	220f      	movs	r2, #15
 80028b2:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80028b4:	4b07      	ldr	r3, [pc, #28]	@ (80028d4 <HAL_RCC_GetHCLKFreq+0x34>)
 80028b6:	0092      	lsls	r2, r2, #2
 80028b8:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80028ba:	221f      	movs	r2, #31
 80028bc:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80028be:	000a      	movs	r2, r1
 80028c0:	40da      	lsrs	r2, r3
 80028c2:	4b05      	ldr	r3, [pc, #20]	@ (80028d8 <HAL_RCC_GetHCLKFreq+0x38>)
 80028c4:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 80028c6:	4b04      	ldr	r3, [pc, #16]	@ (80028d8 <HAL_RCC_GetHCLKFreq+0x38>)
 80028c8:	681b      	ldr	r3, [r3, #0]
}
 80028ca:	0018      	movs	r0, r3
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40021000 	.word	0x40021000
 80028d4:	08003ff8 	.word	0x08003ff8
 80028d8:	20000000 	.word	0x20000000

080028dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 80028e0:	f7ff ffde 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 80028e4:	0001      	movs	r1, r0
 80028e6:	4b07      	ldr	r3, [pc, #28]	@ (8002904 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	0b1b      	lsrs	r3, r3, #12
 80028ec:	2207      	movs	r2, #7
 80028ee:	401a      	ands	r2, r3
 80028f0:	4b05      	ldr	r3, [pc, #20]	@ (8002908 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80028f2:	0092      	lsls	r2, r2, #2
 80028f4:	58d3      	ldr	r3, [r2, r3]
 80028f6:	221f      	movs	r2, #31
 80028f8:	4013      	ands	r3, r2
 80028fa:	40d9      	lsrs	r1, r3
 80028fc:	000b      	movs	r3, r1
}
 80028fe:	0018      	movs	r0, r3
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40021000 	.word	0x40021000
 8002908:	08004038 	.word	0x08004038

0800290c <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002914:	2313      	movs	r3, #19
 8002916:	18fb      	adds	r3, r7, r3
 8002918:	2200      	movs	r2, #0
 800291a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800291c:	2312      	movs	r3, #18
 800291e:	18fb      	adds	r3, r7, r3
 8002920:	2200      	movs	r2, #0
 8002922:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2240      	movs	r2, #64	@ 0x40
 800292a:	4013      	ands	r3, r2
 800292c:	d100      	bne.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x24>
 800292e:	e079      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002930:	2011      	movs	r0, #17
 8002932:	183b      	adds	r3, r7, r0
 8002934:	2200      	movs	r2, #0
 8002936:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002938:	4b63      	ldr	r3, [pc, #396]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800293a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800293c:	2380      	movs	r3, #128	@ 0x80
 800293e:	055b      	lsls	r3, r3, #21
 8002940:	4013      	ands	r3, r2
 8002942:	d110      	bne.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002944:	4b60      	ldr	r3, [pc, #384]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002946:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002948:	4b5f      	ldr	r3, [pc, #380]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800294a:	2180      	movs	r1, #128	@ 0x80
 800294c:	0549      	lsls	r1, r1, #21
 800294e:	430a      	orrs	r2, r1
 8002950:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002952:	4b5d      	ldr	r3, [pc, #372]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002954:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002956:	2380      	movs	r3, #128	@ 0x80
 8002958:	055b      	lsls	r3, r3, #21
 800295a:	4013      	ands	r3, r2
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002960:	183b      	adds	r3, r7, r0
 8002962:	2201      	movs	r2, #1
 8002964:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8002966:	4b58      	ldr	r3, [pc, #352]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002968:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800296a:	23c0      	movs	r3, #192	@ 0xc0
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4013      	ands	r3, r2
 8002970:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d019      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	429a      	cmp	r2, r3
 8002980:	d014      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8002982:	4b51      	ldr	r3, [pc, #324]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002986:	4a51      	ldr	r2, [pc, #324]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002988:	4013      	ands	r3, r2
 800298a:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800298c:	4b4e      	ldr	r3, [pc, #312]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800298e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002990:	4b4d      	ldr	r3, [pc, #308]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002992:	2180      	movs	r1, #128	@ 0x80
 8002994:	0249      	lsls	r1, r1, #9
 8002996:	430a      	orrs	r2, r1
 8002998:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 800299a:	4b4b      	ldr	r3, [pc, #300]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800299c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800299e:	4b4a      	ldr	r3, [pc, #296]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80029a0:	494b      	ldr	r1, [pc, #300]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80029a2:	400a      	ands	r2, r1
 80029a4:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 80029a6:	4b48      	ldr	r3, [pc, #288]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	2201      	movs	r2, #1
 80029b0:	4013      	ands	r3, r2
 80029b2:	d016      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b4:	f7fe f91c 	bl	8000bf0 <HAL_GetTick>
 80029b8:	0003      	movs	r3, r0
 80029ba:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80029bc:	e00c      	b.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029be:	f7fe f917 	bl	8000bf0 <HAL_GetTick>
 80029c2:	0002      	movs	r2, r0
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	4a42      	ldr	r2, [pc, #264]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d904      	bls.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 80029ce:	2313      	movs	r3, #19
 80029d0:	18fb      	adds	r3, r7, r3
 80029d2:	2203      	movs	r2, #3
 80029d4:	701a      	strb	r2, [r3, #0]
          break;
 80029d6:	e004      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80029d8:	4b3b      	ldr	r3, [pc, #236]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80029da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029dc:	2202      	movs	r2, #2
 80029de:	4013      	ands	r3, r2
 80029e0:	d0ed      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 80029e2:	2313      	movs	r3, #19
 80029e4:	18fb      	adds	r3, r7, r3
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10a      	bne.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029ec:	4b36      	ldr	r3, [pc, #216]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80029ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f0:	4a36      	ldr	r2, [pc, #216]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80029f2:	4013      	ands	r3, r2
 80029f4:	0019      	movs	r1, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	699a      	ldr	r2, [r3, #24]
 80029fa:	4b33      	ldr	r3, [pc, #204]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80029fc:	430a      	orrs	r2, r1
 80029fe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a00:	e005      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a02:	2312      	movs	r3, #18
 8002a04:	18fb      	adds	r3, r7, r3
 8002a06:	2213      	movs	r2, #19
 8002a08:	18ba      	adds	r2, r7, r2
 8002a0a:	7812      	ldrb	r2, [r2, #0]
 8002a0c:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a0e:	2311      	movs	r3, #17
 8002a10:	18fb      	adds	r3, r7, r3
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d105      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a18:	4b2b      	ldr	r3, [pc, #172]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002a1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a1c:	4b2a      	ldr	r3, [pc, #168]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002a1e:	492e      	ldr	r1, [pc, #184]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a20:	400a      	ands	r2, r1
 8002a22:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d009      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a2e:	4b26      	ldr	r3, [pc, #152]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a32:	2203      	movs	r2, #3
 8002a34:	4393      	bics	r3, r2
 8002a36:	0019      	movs	r1, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	4b22      	ldr	r3, [pc, #136]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2202      	movs	r2, #2
 8002a48:	4013      	ands	r3, r2
 8002a4a:	d009      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a4c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a50:	4a22      	ldr	r2, [pc, #136]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a52:	4013      	ands	r3, r2
 8002a54:	0019      	movs	r1, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2220      	movs	r2, #32
 8002a66:	4013      	ands	r3, r2
 8002a68:	d008      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a6a:	4b17      	ldr	r3, [pc, #92]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	0899      	lsrs	r1, r3, #2
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	695a      	ldr	r2, [r3, #20]
 8002a76:	4b14      	ldr	r3, [pc, #80]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2204      	movs	r2, #4
 8002a82:	4013      	ands	r3, r2
 8002a84:	d009      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002a86:	4b10      	ldr	r3, [pc, #64]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a8a:	4a15      	ldr	r2, [pc, #84]	@ (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	0019      	movs	r1, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	691a      	ldr	r2, [r3, #16]
 8002a94:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002a96:	430a      	orrs	r2, r1
 8002a98:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2280      	movs	r2, #128	@ 0x80
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	d009      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002aa4:	4b08      	ldr	r3, [pc, #32]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	22e0      	movs	r2, #224	@ 0xe0
 8002aaa:	4393      	bics	r3, r2
 8002aac:	0019      	movs	r1, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	4b05      	ldr	r3, [pc, #20]	@ (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002ab8:	2312      	movs	r3, #18
 8002aba:	18fb      	adds	r3, r7, r3
 8002abc:	781b      	ldrb	r3, [r3, #0]
}
 8002abe:	0018      	movs	r0, r3
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	b006      	add	sp, #24
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	46c0      	nop			@ (mov r8, r8)
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	fffffcff 	.word	0xfffffcff
 8002ad0:	fffeffff 	.word	0xfffeffff
 8002ad4:	00001388 	.word	0x00001388
 8002ad8:	efffffff 	.word	0xefffffff
 8002adc:	ffffcfff 	.word	0xffffcfff
 8002ae0:	ffff3fff 	.word	0xffff3fff

08002ae4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e046      	b.n	8002b84 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2288      	movs	r2, #136	@ 0x88
 8002afa:	589b      	ldr	r3, [r3, r2]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d107      	bne.n	8002b10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2284      	movs	r2, #132	@ 0x84
 8002b04:	2100      	movs	r1, #0
 8002b06:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f7fd fee6 	bl	80008dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2288      	movs	r2, #136	@ 0x88
 8002b14:	2124      	movs	r1, #36	@ 0x24
 8002b16:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2101      	movs	r1, #1
 8002b24:	438a      	bics	r2, r1
 8002b26:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	0018      	movs	r0, r3
 8002b34:	f000 fa4e 	bl	8002fd4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f000 f8cc 	bl	8002cd8 <UART_SetConfig>
 8002b40:	0003      	movs	r3, r0
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e01c      	b.n	8002b84 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	490d      	ldr	r1, [pc, #52]	@ (8002b8c <HAL_UART_Init+0xa8>)
 8002b56:	400a      	ands	r2, r1
 8002b58:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	212a      	movs	r1, #42	@ 0x2a
 8002b66:	438a      	bics	r2, r1
 8002b68:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2101      	movs	r1, #1
 8002b76:	430a      	orrs	r2, r1
 8002b78:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f000 fadd 	bl	800313c <UART_CheckIdleState>
 8002b82:	0003      	movs	r3, r0
}
 8002b84:	0018      	movs	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b002      	add	sp, #8
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	ffffb7ff 	.word	0xffffb7ff

08002b90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b08a      	sub	sp, #40	@ 0x28
 8002b94:	af02      	add	r7, sp, #8
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	603b      	str	r3, [r7, #0]
 8002b9c:	1dbb      	adds	r3, r7, #6
 8002b9e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2288      	movs	r2, #136	@ 0x88
 8002ba4:	589b      	ldr	r3, [r3, r2]
 8002ba6:	2b20      	cmp	r3, #32
 8002ba8:	d000      	beq.n	8002bac <HAL_UART_Transmit+0x1c>
 8002baa:	e090      	b.n	8002cce <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_UART_Transmit+0x2a>
 8002bb2:	1dbb      	adds	r3, r7, #6
 8002bb4:	881b      	ldrh	r3, [r3, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e088      	b.n	8002cd0 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	2380      	movs	r3, #128	@ 0x80
 8002bc4:	015b      	lsls	r3, r3, #5
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d109      	bne.n	8002bde <HAL_UART_Transmit+0x4e>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d105      	bne.n	8002bde <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d001      	beq.n	8002bde <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e078      	b.n	8002cd0 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2290      	movs	r2, #144	@ 0x90
 8002be2:	2100      	movs	r1, #0
 8002be4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2288      	movs	r2, #136	@ 0x88
 8002bea:	2121      	movs	r1, #33	@ 0x21
 8002bec:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bee:	f7fd ffff 	bl	8000bf0 <HAL_GetTick>
 8002bf2:	0003      	movs	r3, r0
 8002bf4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	1dba      	adds	r2, r7, #6
 8002bfa:	2154      	movs	r1, #84	@ 0x54
 8002bfc:	8812      	ldrh	r2, [r2, #0]
 8002bfe:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	1dba      	adds	r2, r7, #6
 8002c04:	2156      	movs	r1, #86	@ 0x56
 8002c06:	8812      	ldrh	r2, [r2, #0]
 8002c08:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	689a      	ldr	r2, [r3, #8]
 8002c0e:	2380      	movs	r3, #128	@ 0x80
 8002c10:	015b      	lsls	r3, r3, #5
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d108      	bne.n	8002c28 <HAL_UART_Transmit+0x98>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d104      	bne.n	8002c28 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	61bb      	str	r3, [r7, #24]
 8002c26:	e003      	b.n	8002c30 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c30:	e030      	b.n	8002c94 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	0013      	movs	r3, r2
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	2180      	movs	r1, #128	@ 0x80
 8002c40:	f000 fb26 	bl	8003290 <UART_WaitOnFlagUntilTimeout>
 8002c44:	1e03      	subs	r3, r0, #0
 8002c46:	d005      	beq.n	8002c54 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2288      	movs	r2, #136	@ 0x88
 8002c4c:	2120      	movs	r1, #32
 8002c4e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e03d      	b.n	8002cd0 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10b      	bne.n	8002c72 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	001a      	movs	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	05d2      	lsls	r2, r2, #23
 8002c66:	0dd2      	lsrs	r2, r2, #23
 8002c68:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	3302      	adds	r3, #2
 8002c6e:	61bb      	str	r3, [r7, #24]
 8002c70:	e007      	b.n	8002c82 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	781a      	ldrb	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2256      	movs	r2, #86	@ 0x56
 8002c86:	5a9b      	ldrh	r3, [r3, r2]
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	b299      	uxth	r1, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2256      	movs	r2, #86	@ 0x56
 8002c92:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2256      	movs	r2, #86	@ 0x56
 8002c98:	5a9b      	ldrh	r3, [r3, r2]
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1c8      	bne.n	8002c32 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	0013      	movs	r3, r2
 8002caa:	2200      	movs	r2, #0
 8002cac:	2140      	movs	r1, #64	@ 0x40
 8002cae:	f000 faef 	bl	8003290 <UART_WaitOnFlagUntilTimeout>
 8002cb2:	1e03      	subs	r3, r0, #0
 8002cb4:	d005      	beq.n	8002cc2 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2288      	movs	r2, #136	@ 0x88
 8002cba:	2120      	movs	r1, #32
 8002cbc:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e006      	b.n	8002cd0 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2288      	movs	r2, #136	@ 0x88
 8002cc6:	2120      	movs	r1, #32
 8002cc8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	e000      	b.n	8002cd0 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002cce:	2302      	movs	r3, #2
  }
}
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	b008      	add	sp, #32
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b088      	sub	sp, #32
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ce0:	231e      	movs	r3, #30
 8002ce2:	18fb      	adds	r3, r7, r3
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	69db      	ldr	r3, [r3, #28]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4aab      	ldr	r2, [pc, #684]	@ (8002fb4 <UART_SetConfig+0x2dc>)
 8002d08:	4013      	ands	r3, r2
 8002d0a:	0019      	movs	r1, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	4aa6      	ldr	r2, [pc, #664]	@ (8002fb8 <UART_SetConfig+0x2e0>)
 8002d1e:	4013      	ands	r3, r2
 8002d20:	0019      	movs	r1, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	4a9d      	ldr	r2, [pc, #628]	@ (8002fbc <UART_SetConfig+0x2e4>)
 8002d46:	4013      	ands	r3, r2
 8002d48:	0019      	movs	r1, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d5a:	220f      	movs	r2, #15
 8002d5c:	4393      	bics	r3, r2
 8002d5e:	0019      	movs	r1, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a93      	ldr	r2, [pc, #588]	@ (8002fc0 <UART_SetConfig+0x2e8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d127      	bne.n	8002dc6 <UART_SetConfig+0xee>
 8002d76:	4b93      	ldr	r3, [pc, #588]	@ (8002fc4 <UART_SetConfig+0x2ec>)
 8002d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d7a:	2203      	movs	r2, #3
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	2b03      	cmp	r3, #3
 8002d80:	d017      	beq.n	8002db2 <UART_SetConfig+0xda>
 8002d82:	d81b      	bhi.n	8002dbc <UART_SetConfig+0xe4>
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d00a      	beq.n	8002d9e <UART_SetConfig+0xc6>
 8002d88:	d818      	bhi.n	8002dbc <UART_SetConfig+0xe4>
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d002      	beq.n	8002d94 <UART_SetConfig+0xbc>
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d00a      	beq.n	8002da8 <UART_SetConfig+0xd0>
 8002d92:	e013      	b.n	8002dbc <UART_SetConfig+0xe4>
 8002d94:	231f      	movs	r3, #31
 8002d96:	18fb      	adds	r3, r7, r3
 8002d98:	2200      	movs	r2, #0
 8002d9a:	701a      	strb	r2, [r3, #0]
 8002d9c:	e021      	b.n	8002de2 <UART_SetConfig+0x10a>
 8002d9e:	231f      	movs	r3, #31
 8002da0:	18fb      	adds	r3, r7, r3
 8002da2:	2202      	movs	r2, #2
 8002da4:	701a      	strb	r2, [r3, #0]
 8002da6:	e01c      	b.n	8002de2 <UART_SetConfig+0x10a>
 8002da8:	231f      	movs	r3, #31
 8002daa:	18fb      	adds	r3, r7, r3
 8002dac:	2204      	movs	r2, #4
 8002dae:	701a      	strb	r2, [r3, #0]
 8002db0:	e017      	b.n	8002de2 <UART_SetConfig+0x10a>
 8002db2:	231f      	movs	r3, #31
 8002db4:	18fb      	adds	r3, r7, r3
 8002db6:	2208      	movs	r2, #8
 8002db8:	701a      	strb	r2, [r3, #0]
 8002dba:	e012      	b.n	8002de2 <UART_SetConfig+0x10a>
 8002dbc:	231f      	movs	r3, #31
 8002dbe:	18fb      	adds	r3, r7, r3
 8002dc0:	2210      	movs	r2, #16
 8002dc2:	701a      	strb	r2, [r3, #0]
 8002dc4:	e00d      	b.n	8002de2 <UART_SetConfig+0x10a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a7f      	ldr	r2, [pc, #508]	@ (8002fc8 <UART_SetConfig+0x2f0>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d104      	bne.n	8002dda <UART_SetConfig+0x102>
 8002dd0:	231f      	movs	r3, #31
 8002dd2:	18fb      	adds	r3, r7, r3
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	701a      	strb	r2, [r3, #0]
 8002dd8:	e003      	b.n	8002de2 <UART_SetConfig+0x10a>
 8002dda:	231f      	movs	r3, #31
 8002ddc:	18fb      	adds	r3, r7, r3
 8002dde:	2210      	movs	r2, #16
 8002de0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69da      	ldr	r2, [r3, #28]
 8002de6:	2380      	movs	r3, #128	@ 0x80
 8002de8:	021b      	lsls	r3, r3, #8
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d000      	beq.n	8002df0 <UART_SetConfig+0x118>
 8002dee:	e06f      	b.n	8002ed0 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8002df0:	231f      	movs	r3, #31
 8002df2:	18fb      	adds	r3, r7, r3
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d01f      	beq.n	8002e3a <UART_SetConfig+0x162>
 8002dfa:	dc22      	bgt.n	8002e42 <UART_SetConfig+0x16a>
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d017      	beq.n	8002e30 <UART_SetConfig+0x158>
 8002e00:	dc1f      	bgt.n	8002e42 <UART_SetConfig+0x16a>
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d002      	beq.n	8002e0c <UART_SetConfig+0x134>
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d005      	beq.n	8002e16 <UART_SetConfig+0x13e>
 8002e0a:	e01a      	b.n	8002e42 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e0c:	f7ff fd66 	bl	80028dc <HAL_RCC_GetPCLK1Freq>
 8002e10:	0003      	movs	r3, r0
 8002e12:	61bb      	str	r3, [r7, #24]
        break;
 8002e14:	e01c      	b.n	8002e50 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002e16:	4b6b      	ldr	r3, [pc, #428]	@ (8002fc4 <UART_SetConfig+0x2ec>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	095b      	lsrs	r3, r3, #5
 8002e1c:	2207      	movs	r2, #7
 8002e1e:	4013      	ands	r3, r2
 8002e20:	3301      	adds	r3, #1
 8002e22:	0019      	movs	r1, r3
 8002e24:	4869      	ldr	r0, [pc, #420]	@ (8002fcc <UART_SetConfig+0x2f4>)
 8002e26:	f7fd f979 	bl	800011c <__udivsi3>
 8002e2a:	0003      	movs	r3, r0
 8002e2c:	61bb      	str	r3, [r7, #24]
        break;
 8002e2e:	e00f      	b.n	8002e50 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e30:	f7ff fcf4 	bl	800281c <HAL_RCC_GetSysClockFreq>
 8002e34:	0003      	movs	r3, r0
 8002e36:	61bb      	str	r3, [r7, #24]
        break;
 8002e38:	e00a      	b.n	8002e50 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e3a:	2380      	movs	r3, #128	@ 0x80
 8002e3c:	021b      	lsls	r3, r3, #8
 8002e3e:	61bb      	str	r3, [r7, #24]
        break;
 8002e40:	e006      	b.n	8002e50 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e46:	231e      	movs	r3, #30
 8002e48:	18fb      	adds	r3, r7, r3
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	701a      	strb	r2, [r3, #0]
        break;
 8002e4e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d100      	bne.n	8002e58 <UART_SetConfig+0x180>
 8002e56:	e097      	b.n	8002f88 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e5c:	4b5c      	ldr	r3, [pc, #368]	@ (8002fd0 <UART_SetConfig+0x2f8>)
 8002e5e:	0052      	lsls	r2, r2, #1
 8002e60:	5ad3      	ldrh	r3, [r2, r3]
 8002e62:	0019      	movs	r1, r3
 8002e64:	69b8      	ldr	r0, [r7, #24]
 8002e66:	f7fd f959 	bl	800011c <__udivsi3>
 8002e6a:	0003      	movs	r3, r0
 8002e6c:	005a      	lsls	r2, r3, #1
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	085b      	lsrs	r3, r3, #1
 8002e74:	18d2      	adds	r2, r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	0019      	movs	r1, r3
 8002e7c:	0010      	movs	r0, r2
 8002e7e:	f7fd f94d 	bl	800011c <__udivsi3>
 8002e82:	0003      	movs	r3, r0
 8002e84:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	2b0f      	cmp	r3, #15
 8002e8a:	d91c      	bls.n	8002ec6 <UART_SetConfig+0x1ee>
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	2380      	movs	r3, #128	@ 0x80
 8002e90:	025b      	lsls	r3, r3, #9
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d217      	bcs.n	8002ec6 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	200e      	movs	r0, #14
 8002e9c:	183b      	adds	r3, r7, r0
 8002e9e:	210f      	movs	r1, #15
 8002ea0:	438a      	bics	r2, r1
 8002ea2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	085b      	lsrs	r3, r3, #1
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	2207      	movs	r2, #7
 8002eac:	4013      	ands	r3, r2
 8002eae:	b299      	uxth	r1, r3
 8002eb0:	183b      	adds	r3, r7, r0
 8002eb2:	183a      	adds	r2, r7, r0
 8002eb4:	8812      	ldrh	r2, [r2, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	183a      	adds	r2, r7, r0
 8002ec0:	8812      	ldrh	r2, [r2, #0]
 8002ec2:	60da      	str	r2, [r3, #12]
 8002ec4:	e060      	b.n	8002f88 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002ec6:	231e      	movs	r3, #30
 8002ec8:	18fb      	adds	r3, r7, r3
 8002eca:	2201      	movs	r2, #1
 8002ecc:	701a      	strb	r2, [r3, #0]
 8002ece:	e05b      	b.n	8002f88 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ed0:	231f      	movs	r3, #31
 8002ed2:	18fb      	adds	r3, r7, r3
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	2b08      	cmp	r3, #8
 8002ed8:	d01f      	beq.n	8002f1a <UART_SetConfig+0x242>
 8002eda:	dc22      	bgt.n	8002f22 <UART_SetConfig+0x24a>
 8002edc:	2b04      	cmp	r3, #4
 8002ede:	d017      	beq.n	8002f10 <UART_SetConfig+0x238>
 8002ee0:	dc1f      	bgt.n	8002f22 <UART_SetConfig+0x24a>
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <UART_SetConfig+0x214>
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d005      	beq.n	8002ef6 <UART_SetConfig+0x21e>
 8002eea:	e01a      	b.n	8002f22 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002eec:	f7ff fcf6 	bl	80028dc <HAL_RCC_GetPCLK1Freq>
 8002ef0:	0003      	movs	r3, r0
 8002ef2:	61bb      	str	r3, [r7, #24]
        break;
 8002ef4:	e01c      	b.n	8002f30 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002ef6:	4b33      	ldr	r3, [pc, #204]	@ (8002fc4 <UART_SetConfig+0x2ec>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	095b      	lsrs	r3, r3, #5
 8002efc:	2207      	movs	r2, #7
 8002efe:	4013      	ands	r3, r2
 8002f00:	3301      	adds	r3, #1
 8002f02:	0019      	movs	r1, r3
 8002f04:	4831      	ldr	r0, [pc, #196]	@ (8002fcc <UART_SetConfig+0x2f4>)
 8002f06:	f7fd f909 	bl	800011c <__udivsi3>
 8002f0a:	0003      	movs	r3, r0
 8002f0c:	61bb      	str	r3, [r7, #24]
        break;
 8002f0e:	e00f      	b.n	8002f30 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f10:	f7ff fc84 	bl	800281c <HAL_RCC_GetSysClockFreq>
 8002f14:	0003      	movs	r3, r0
 8002f16:	61bb      	str	r3, [r7, #24]
        break;
 8002f18:	e00a      	b.n	8002f30 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f1a:	2380      	movs	r3, #128	@ 0x80
 8002f1c:	021b      	lsls	r3, r3, #8
 8002f1e:	61bb      	str	r3, [r7, #24]
        break;
 8002f20:	e006      	b.n	8002f30 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f26:	231e      	movs	r3, #30
 8002f28:	18fb      	adds	r3, r7, r3
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	701a      	strb	r2, [r3, #0]
        break;
 8002f2e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d028      	beq.n	8002f88 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f3a:	4b25      	ldr	r3, [pc, #148]	@ (8002fd0 <UART_SetConfig+0x2f8>)
 8002f3c:	0052      	lsls	r2, r2, #1
 8002f3e:	5ad3      	ldrh	r3, [r2, r3]
 8002f40:	0019      	movs	r1, r3
 8002f42:	69b8      	ldr	r0, [r7, #24]
 8002f44:	f7fd f8ea 	bl	800011c <__udivsi3>
 8002f48:	0003      	movs	r3, r0
 8002f4a:	001a      	movs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	085b      	lsrs	r3, r3, #1
 8002f52:	18d2      	adds	r2, r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	0019      	movs	r1, r3
 8002f5a:	0010      	movs	r0, r2
 8002f5c:	f7fd f8de 	bl	800011c <__udivsi3>
 8002f60:	0003      	movs	r3, r0
 8002f62:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	2b0f      	cmp	r3, #15
 8002f68:	d90a      	bls.n	8002f80 <UART_SetConfig+0x2a8>
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	2380      	movs	r3, #128	@ 0x80
 8002f6e:	025b      	lsls	r3, r3, #9
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d205      	bcs.n	8002f80 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	60da      	str	r2, [r3, #12]
 8002f7e:	e003      	b.n	8002f88 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002f80:	231e      	movs	r3, #30
 8002f82:	18fb      	adds	r3, r7, r3
 8002f84:	2201      	movs	r2, #1
 8002f86:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	226a      	movs	r2, #106	@ 0x6a
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2268      	movs	r2, #104	@ 0x68
 8002f94:	2101      	movs	r1, #1
 8002f96:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002fa4:	231e      	movs	r3, #30
 8002fa6:	18fb      	adds	r3, r7, r3
 8002fa8:	781b      	ldrb	r3, [r3, #0]
}
 8002faa:	0018      	movs	r0, r3
 8002fac:	46bd      	mov	sp, r7
 8002fae:	b008      	add	sp, #32
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	46c0      	nop			@ (mov r8, r8)
 8002fb4:	cfff69f3 	.word	0xcfff69f3
 8002fb8:	ffffcfff 	.word	0xffffcfff
 8002fbc:	11fff4ff 	.word	0x11fff4ff
 8002fc0:	40013800 	.word	0x40013800
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40004400 	.word	0x40004400
 8002fcc:	02dc6c00 	.word	0x02dc6c00
 8002fd0:	08004058 	.word	0x08004058

08002fd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe0:	2208      	movs	r2, #8
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d00b      	beq.n	8002ffe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	4a4a      	ldr	r2, [pc, #296]	@ (8003118 <UART_AdvFeatureConfig+0x144>)
 8002fee:	4013      	ands	r3, r2
 8002ff0:	0019      	movs	r1, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003002:	2201      	movs	r2, #1
 8003004:	4013      	ands	r3, r2
 8003006:	d00b      	beq.n	8003020 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	4a43      	ldr	r2, [pc, #268]	@ (800311c <UART_AdvFeatureConfig+0x148>)
 8003010:	4013      	ands	r3, r2
 8003012:	0019      	movs	r1, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	430a      	orrs	r2, r1
 800301e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003024:	2202      	movs	r2, #2
 8003026:	4013      	ands	r3, r2
 8003028:	d00b      	beq.n	8003042 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	4a3b      	ldr	r2, [pc, #236]	@ (8003120 <UART_AdvFeatureConfig+0x14c>)
 8003032:	4013      	ands	r3, r2
 8003034:	0019      	movs	r1, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	430a      	orrs	r2, r1
 8003040:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003046:	2204      	movs	r2, #4
 8003048:	4013      	ands	r3, r2
 800304a:	d00b      	beq.n	8003064 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	4a34      	ldr	r2, [pc, #208]	@ (8003124 <UART_AdvFeatureConfig+0x150>)
 8003054:	4013      	ands	r3, r2
 8003056:	0019      	movs	r1, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003068:	2210      	movs	r2, #16
 800306a:	4013      	ands	r3, r2
 800306c:	d00b      	beq.n	8003086 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	4a2c      	ldr	r2, [pc, #176]	@ (8003128 <UART_AdvFeatureConfig+0x154>)
 8003076:	4013      	ands	r3, r2
 8003078:	0019      	movs	r1, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800308a:	2220      	movs	r2, #32
 800308c:	4013      	ands	r3, r2
 800308e:	d00b      	beq.n	80030a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	4a25      	ldr	r2, [pc, #148]	@ (800312c <UART_AdvFeatureConfig+0x158>)
 8003098:	4013      	ands	r3, r2
 800309a:	0019      	movs	r1, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ac:	2240      	movs	r2, #64	@ 0x40
 80030ae:	4013      	ands	r3, r2
 80030b0:	d01d      	beq.n	80030ee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	4a1d      	ldr	r2, [pc, #116]	@ (8003130 <UART_AdvFeatureConfig+0x15c>)
 80030ba:	4013      	ands	r3, r2
 80030bc:	0019      	movs	r1, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030ce:	2380      	movs	r3, #128	@ 0x80
 80030d0:	035b      	lsls	r3, r3, #13
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d10b      	bne.n	80030ee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	4a15      	ldr	r2, [pc, #84]	@ (8003134 <UART_AdvFeatureConfig+0x160>)
 80030de:	4013      	ands	r3, r2
 80030e0:	0019      	movs	r1, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f2:	2280      	movs	r2, #128	@ 0x80
 80030f4:	4013      	ands	r3, r2
 80030f6:	d00b      	beq.n	8003110 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	4a0e      	ldr	r2, [pc, #56]	@ (8003138 <UART_AdvFeatureConfig+0x164>)
 8003100:	4013      	ands	r3, r2
 8003102:	0019      	movs	r1, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	430a      	orrs	r2, r1
 800310e:	605a      	str	r2, [r3, #4]
  }
}
 8003110:	46c0      	nop			@ (mov r8, r8)
 8003112:	46bd      	mov	sp, r7
 8003114:	b002      	add	sp, #8
 8003116:	bd80      	pop	{r7, pc}
 8003118:	ffff7fff 	.word	0xffff7fff
 800311c:	fffdffff 	.word	0xfffdffff
 8003120:	fffeffff 	.word	0xfffeffff
 8003124:	fffbffff 	.word	0xfffbffff
 8003128:	ffffefff 	.word	0xffffefff
 800312c:	ffffdfff 	.word	0xffffdfff
 8003130:	ffefffff 	.word	0xffefffff
 8003134:	ff9fffff 	.word	0xff9fffff
 8003138:	fff7ffff 	.word	0xfff7ffff

0800313c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b092      	sub	sp, #72	@ 0x48
 8003140:	af02      	add	r7, sp, #8
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2290      	movs	r2, #144	@ 0x90
 8003148:	2100      	movs	r1, #0
 800314a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800314c:	f7fd fd50 	bl	8000bf0 <HAL_GetTick>
 8003150:	0003      	movs	r3, r0
 8003152:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2208      	movs	r2, #8
 800315c:	4013      	ands	r3, r2
 800315e:	2b08      	cmp	r3, #8
 8003160:	d12d      	bne.n	80031be <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003162:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003164:	2280      	movs	r2, #128	@ 0x80
 8003166:	0391      	lsls	r1, r2, #14
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	4a47      	ldr	r2, [pc, #284]	@ (8003288 <UART_CheckIdleState+0x14c>)
 800316c:	9200      	str	r2, [sp, #0]
 800316e:	2200      	movs	r2, #0
 8003170:	f000 f88e 	bl	8003290 <UART_WaitOnFlagUntilTimeout>
 8003174:	1e03      	subs	r3, r0, #0
 8003176:	d022      	beq.n	80031be <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003178:	f3ef 8310 	mrs	r3, PRIMASK
 800317c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800317e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003180:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003182:	2301      	movs	r3, #1
 8003184:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003188:	f383 8810 	msr	PRIMASK, r3
}
 800318c:	46c0      	nop			@ (mov r8, r8)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2180      	movs	r1, #128	@ 0x80
 800319a:	438a      	bics	r2, r1
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031a4:	f383 8810 	msr	PRIMASK, r3
}
 80031a8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2288      	movs	r2, #136	@ 0x88
 80031ae:	2120      	movs	r1, #32
 80031b0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2284      	movs	r2, #132	@ 0x84
 80031b6:	2100      	movs	r1, #0
 80031b8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e060      	b.n	8003280 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2204      	movs	r2, #4
 80031c6:	4013      	ands	r3, r2
 80031c8:	2b04      	cmp	r3, #4
 80031ca:	d146      	bne.n	800325a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031ce:	2280      	movs	r2, #128	@ 0x80
 80031d0:	03d1      	lsls	r1, r2, #15
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	4a2c      	ldr	r2, [pc, #176]	@ (8003288 <UART_CheckIdleState+0x14c>)
 80031d6:	9200      	str	r2, [sp, #0]
 80031d8:	2200      	movs	r2, #0
 80031da:	f000 f859 	bl	8003290 <UART_WaitOnFlagUntilTimeout>
 80031de:	1e03      	subs	r3, r0, #0
 80031e0:	d03b      	beq.n	800325a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80031e2:	f3ef 8310 	mrs	r3, PRIMASK
 80031e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80031e8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80031ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80031ec:	2301      	movs	r3, #1
 80031ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	f383 8810 	msr	PRIMASK, r3
}
 80031f6:	46c0      	nop			@ (mov r8, r8)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4922      	ldr	r1, [pc, #136]	@ (800328c <UART_CheckIdleState+0x150>)
 8003204:	400a      	ands	r2, r1
 8003206:	601a      	str	r2, [r3, #0]
 8003208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800320a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f383 8810 	msr	PRIMASK, r3
}
 8003212:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003214:	f3ef 8310 	mrs	r3, PRIMASK
 8003218:	61bb      	str	r3, [r7, #24]
  return(result);
 800321a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800321c:	633b      	str	r3, [r7, #48]	@ 0x30
 800321e:	2301      	movs	r3, #1
 8003220:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	f383 8810 	msr	PRIMASK, r3
}
 8003228:	46c0      	nop			@ (mov r8, r8)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2101      	movs	r1, #1
 8003236:	438a      	bics	r2, r1
 8003238:	609a      	str	r2, [r3, #8]
 800323a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800323c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800323e:	6a3b      	ldr	r3, [r7, #32]
 8003240:	f383 8810 	msr	PRIMASK, r3
}
 8003244:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	228c      	movs	r2, #140	@ 0x8c
 800324a:	2120      	movs	r1, #32
 800324c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2284      	movs	r2, #132	@ 0x84
 8003252:	2100      	movs	r1, #0
 8003254:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e012      	b.n	8003280 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2288      	movs	r2, #136	@ 0x88
 800325e:	2120      	movs	r1, #32
 8003260:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	228c      	movs	r2, #140	@ 0x8c
 8003266:	2120      	movs	r1, #32
 8003268:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2284      	movs	r2, #132	@ 0x84
 800327a:	2100      	movs	r1, #0
 800327c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	0018      	movs	r0, r3
 8003282:	46bd      	mov	sp, r7
 8003284:	b010      	add	sp, #64	@ 0x40
 8003286:	bd80      	pop	{r7, pc}
 8003288:	01ffffff 	.word	0x01ffffff
 800328c:	fffffedf 	.word	0xfffffedf

08003290 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	603b      	str	r3, [r7, #0]
 800329c:	1dfb      	adds	r3, r7, #7
 800329e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032a0:	e051      	b.n	8003346 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	3301      	adds	r3, #1
 80032a6:	d04e      	beq.n	8003346 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a8:	f7fd fca2 	bl	8000bf0 <HAL_GetTick>
 80032ac:	0002      	movs	r2, r0
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d302      	bcc.n	80032be <UART_WaitOnFlagUntilTimeout+0x2e>
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e051      	b.n	8003366 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2204      	movs	r2, #4
 80032ca:	4013      	ands	r3, r2
 80032cc:	d03b      	beq.n	8003346 <UART_WaitOnFlagUntilTimeout+0xb6>
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	2b80      	cmp	r3, #128	@ 0x80
 80032d2:	d038      	beq.n	8003346 <UART_WaitOnFlagUntilTimeout+0xb6>
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	2b40      	cmp	r3, #64	@ 0x40
 80032d8:	d035      	beq.n	8003346 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	2208      	movs	r2, #8
 80032e2:	4013      	ands	r3, r2
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	d111      	bne.n	800330c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2208      	movs	r2, #8
 80032ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	0018      	movs	r0, r3
 80032f4:	f000 f83c 	bl	8003370 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2290      	movs	r2, #144	@ 0x90
 80032fc:	2108      	movs	r1, #8
 80032fe:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2284      	movs	r2, #132	@ 0x84
 8003304:	2100      	movs	r1, #0
 8003306:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e02c      	b.n	8003366 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	69da      	ldr	r2, [r3, #28]
 8003312:	2380      	movs	r3, #128	@ 0x80
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	401a      	ands	r2, r3
 8003318:	2380      	movs	r3, #128	@ 0x80
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	429a      	cmp	r2, r3
 800331e:	d112      	bne.n	8003346 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2280      	movs	r2, #128	@ 0x80
 8003326:	0112      	lsls	r2, r2, #4
 8003328:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	0018      	movs	r0, r3
 800332e:	f000 f81f 	bl	8003370 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2290      	movs	r2, #144	@ 0x90
 8003336:	2120      	movs	r1, #32
 8003338:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2284      	movs	r2, #132	@ 0x84
 800333e:	2100      	movs	r1, #0
 8003340:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e00f      	b.n	8003366 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	69db      	ldr	r3, [r3, #28]
 800334c:	68ba      	ldr	r2, [r7, #8]
 800334e:	4013      	ands	r3, r2
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	425a      	negs	r2, r3
 8003356:	4153      	adcs	r3, r2
 8003358:	b2db      	uxtb	r3, r3
 800335a:	001a      	movs	r2, r3
 800335c:	1dfb      	adds	r3, r7, #7
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d09e      	beq.n	80032a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	0018      	movs	r0, r3
 8003368:	46bd      	mov	sp, r7
 800336a:	b004      	add	sp, #16
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b08e      	sub	sp, #56	@ 0x38
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003378:	f3ef 8310 	mrs	r3, PRIMASK
 800337c:	617b      	str	r3, [r7, #20]
  return(result);
 800337e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003380:	637b      	str	r3, [r7, #52]	@ 0x34
 8003382:	2301      	movs	r3, #1
 8003384:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	f383 8810 	msr	PRIMASK, r3
}
 800338c:	46c0      	nop			@ (mov r8, r8)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4926      	ldr	r1, [pc, #152]	@ (8003434 <UART_EndRxTransfer+0xc4>)
 800339a:	400a      	ands	r2, r1
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	f383 8810 	msr	PRIMASK, r3
}
 80033a8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80033aa:	f3ef 8310 	mrs	r3, PRIMASK
 80033ae:	623b      	str	r3, [r7, #32]
  return(result);
 80033b0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80033b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80033b4:	2301      	movs	r3, #1
 80033b6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ba:	f383 8810 	msr	PRIMASK, r3
}
 80033be:	46c0      	nop			@ (mov r8, r8)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	491b      	ldr	r1, [pc, #108]	@ (8003438 <UART_EndRxTransfer+0xc8>)
 80033cc:	400a      	ands	r2, r1
 80033ce:	609a      	str	r2, [r3, #8]
 80033d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d6:	f383 8810 	msr	PRIMASK, r3
}
 80033da:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d118      	bne.n	8003416 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80033e4:	f3ef 8310 	mrs	r3, PRIMASK
 80033e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80033ea:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033ee:	2301      	movs	r3, #1
 80033f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f383 8810 	msr	PRIMASK, r3
}
 80033f8:	46c0      	nop			@ (mov r8, r8)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2110      	movs	r1, #16
 8003406:	438a      	bics	r2, r1
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800340c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	f383 8810 	msr	PRIMASK, r3
}
 8003414:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	228c      	movs	r2, #140	@ 0x8c
 800341a:	2120      	movs	r1, #32
 800341c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800342a:	46c0      	nop			@ (mov r8, r8)
 800342c:	46bd      	mov	sp, r7
 800342e:	b00e      	add	sp, #56	@ 0x38
 8003430:	bd80      	pop	{r7, pc}
 8003432:	46c0      	nop			@ (mov r8, r8)
 8003434:	fffffedf 	.word	0xfffffedf
 8003438:	effffffe 	.word	0xeffffffe

0800343c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2284      	movs	r2, #132	@ 0x84
 8003448:	5c9b      	ldrb	r3, [r3, r2]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d101      	bne.n	8003452 <HAL_UARTEx_DisableFifoMode+0x16>
 800344e:	2302      	movs	r3, #2
 8003450:	e027      	b.n	80034a2 <HAL_UARTEx_DisableFifoMode+0x66>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2284      	movs	r2, #132	@ 0x84
 8003456:	2101      	movs	r1, #1
 8003458:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2288      	movs	r2, #136	@ 0x88
 800345e:	2124      	movs	r1, #36	@ 0x24
 8003460:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2101      	movs	r1, #1
 8003476:	438a      	bics	r2, r1
 8003478:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	4a0b      	ldr	r2, [pc, #44]	@ (80034ac <HAL_UARTEx_DisableFifoMode+0x70>)
 800347e:	4013      	ands	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2288      	movs	r2, #136	@ 0x88
 8003494:	2120      	movs	r1, #32
 8003496:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2284      	movs	r2, #132	@ 0x84
 800349c:	2100      	movs	r1, #0
 800349e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	0018      	movs	r0, r3
 80034a4:	46bd      	mov	sp, r7
 80034a6:	b004      	add	sp, #16
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	46c0      	nop			@ (mov r8, r8)
 80034ac:	dfffffff 	.word	0xdfffffff

080034b0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2284      	movs	r2, #132	@ 0x84
 80034be:	5c9b      	ldrb	r3, [r3, r2]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d101      	bne.n	80034c8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80034c4:	2302      	movs	r3, #2
 80034c6:	e02e      	b.n	8003526 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2284      	movs	r2, #132	@ 0x84
 80034cc:	2101      	movs	r1, #1
 80034ce:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2288      	movs	r2, #136	@ 0x88
 80034d4:	2124      	movs	r1, #36	@ 0x24
 80034d6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2101      	movs	r1, #1
 80034ec:	438a      	bics	r2, r1
 80034ee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	08d9      	lsrs	r1, r3, #3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	430a      	orrs	r2, r1
 8003502:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	0018      	movs	r0, r3
 8003508:	f000 f854 	bl	80035b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2288      	movs	r2, #136	@ 0x88
 8003518:	2120      	movs	r1, #32
 800351a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2284      	movs	r2, #132	@ 0x84
 8003520:	2100      	movs	r1, #0
 8003522:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	0018      	movs	r0, r3
 8003528:	46bd      	mov	sp, r7
 800352a:	b004      	add	sp, #16
 800352c:	bd80      	pop	{r7, pc}
	...

08003530 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2284      	movs	r2, #132	@ 0x84
 800353e:	5c9b      	ldrb	r3, [r3, r2]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d101      	bne.n	8003548 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003544:	2302      	movs	r3, #2
 8003546:	e02f      	b.n	80035a8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2284      	movs	r2, #132	@ 0x84
 800354c:	2101      	movs	r1, #1
 800354e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2288      	movs	r2, #136	@ 0x88
 8003554:	2124      	movs	r1, #36	@ 0x24
 8003556:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2101      	movs	r1, #1
 800356c:	438a      	bics	r2, r1
 800356e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	4a0e      	ldr	r2, [pc, #56]	@ (80035b0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003578:	4013      	ands	r3, r2
 800357a:	0019      	movs	r1, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	0018      	movs	r0, r3
 800358a:	f000 f813 	bl	80035b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2288      	movs	r2, #136	@ 0x88
 800359a:	2120      	movs	r1, #32
 800359c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2284      	movs	r2, #132	@ 0x84
 80035a2:	2100      	movs	r1, #0
 80035a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	0018      	movs	r0, r3
 80035aa:	46bd      	mov	sp, r7
 80035ac:	b004      	add	sp, #16
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	f1ffffff 	.word	0xf1ffffff

080035b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80035b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d108      	bne.n	80035d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	226a      	movs	r2, #106	@ 0x6a
 80035c8:	2101      	movs	r1, #1
 80035ca:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2268      	movs	r2, #104	@ 0x68
 80035d0:	2101      	movs	r1, #1
 80035d2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80035d4:	e043      	b.n	800365e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80035d6:	260f      	movs	r6, #15
 80035d8:	19bb      	adds	r3, r7, r6
 80035da:	2208      	movs	r2, #8
 80035dc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80035de:	200e      	movs	r0, #14
 80035e0:	183b      	adds	r3, r7, r0
 80035e2:	2208      	movs	r2, #8
 80035e4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	0e5b      	lsrs	r3, r3, #25
 80035ee:	b2da      	uxtb	r2, r3
 80035f0:	240d      	movs	r4, #13
 80035f2:	193b      	adds	r3, r7, r4
 80035f4:	2107      	movs	r1, #7
 80035f6:	400a      	ands	r2, r1
 80035f8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	0f5b      	lsrs	r3, r3, #29
 8003602:	b2da      	uxtb	r2, r3
 8003604:	250c      	movs	r5, #12
 8003606:	197b      	adds	r3, r7, r5
 8003608:	2107      	movs	r1, #7
 800360a:	400a      	ands	r2, r1
 800360c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800360e:	183b      	adds	r3, r7, r0
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	197a      	adds	r2, r7, r5
 8003614:	7812      	ldrb	r2, [r2, #0]
 8003616:	4914      	ldr	r1, [pc, #80]	@ (8003668 <UARTEx_SetNbDataToProcess+0xb4>)
 8003618:	5c8a      	ldrb	r2, [r1, r2]
 800361a:	435a      	muls	r2, r3
 800361c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800361e:	197b      	adds	r3, r7, r5
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	4a12      	ldr	r2, [pc, #72]	@ (800366c <UARTEx_SetNbDataToProcess+0xb8>)
 8003624:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003626:	0019      	movs	r1, r3
 8003628:	f7fc fe02 	bl	8000230 <__divsi3>
 800362c:	0003      	movs	r3, r0
 800362e:	b299      	uxth	r1, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	226a      	movs	r2, #106	@ 0x6a
 8003634:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003636:	19bb      	adds	r3, r7, r6
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	193a      	adds	r2, r7, r4
 800363c:	7812      	ldrb	r2, [r2, #0]
 800363e:	490a      	ldr	r1, [pc, #40]	@ (8003668 <UARTEx_SetNbDataToProcess+0xb4>)
 8003640:	5c8a      	ldrb	r2, [r1, r2]
 8003642:	435a      	muls	r2, r3
 8003644:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003646:	193b      	adds	r3, r7, r4
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	4a08      	ldr	r2, [pc, #32]	@ (800366c <UARTEx_SetNbDataToProcess+0xb8>)
 800364c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800364e:	0019      	movs	r1, r3
 8003650:	f7fc fdee 	bl	8000230 <__divsi3>
 8003654:	0003      	movs	r3, r0
 8003656:	b299      	uxth	r1, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2268      	movs	r2, #104	@ 0x68
 800365c:	5299      	strh	r1, [r3, r2]
}
 800365e:	46c0      	nop			@ (mov r8, r8)
 8003660:	46bd      	mov	sp, r7
 8003662:	b005      	add	sp, #20
 8003664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003666:	46c0      	nop			@ (mov r8, r8)
 8003668:	08004070 	.word	0x08004070
 800366c:	08004078 	.word	0x08004078

08003670 <sniprintf>:
 8003670:	b40c      	push	{r2, r3}
 8003672:	b530      	push	{r4, r5, lr}
 8003674:	4b17      	ldr	r3, [pc, #92]	@ (80036d4 <sniprintf+0x64>)
 8003676:	000c      	movs	r4, r1
 8003678:	681d      	ldr	r5, [r3, #0]
 800367a:	b09d      	sub	sp, #116	@ 0x74
 800367c:	2900      	cmp	r1, #0
 800367e:	da08      	bge.n	8003692 <sniprintf+0x22>
 8003680:	238b      	movs	r3, #139	@ 0x8b
 8003682:	2001      	movs	r0, #1
 8003684:	602b      	str	r3, [r5, #0]
 8003686:	4240      	negs	r0, r0
 8003688:	b01d      	add	sp, #116	@ 0x74
 800368a:	bc30      	pop	{r4, r5}
 800368c:	bc08      	pop	{r3}
 800368e:	b002      	add	sp, #8
 8003690:	4718      	bx	r3
 8003692:	2382      	movs	r3, #130	@ 0x82
 8003694:	466a      	mov	r2, sp
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	8293      	strh	r3, [r2, #20]
 800369a:	2300      	movs	r3, #0
 800369c:	9002      	str	r0, [sp, #8]
 800369e:	9006      	str	r0, [sp, #24]
 80036a0:	4299      	cmp	r1, r3
 80036a2:	d000      	beq.n	80036a6 <sniprintf+0x36>
 80036a4:	1e4b      	subs	r3, r1, #1
 80036a6:	9304      	str	r3, [sp, #16]
 80036a8:	9307      	str	r3, [sp, #28]
 80036aa:	2301      	movs	r3, #1
 80036ac:	466a      	mov	r2, sp
 80036ae:	425b      	negs	r3, r3
 80036b0:	82d3      	strh	r3, [r2, #22]
 80036b2:	0028      	movs	r0, r5
 80036b4:	ab21      	add	r3, sp, #132	@ 0x84
 80036b6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80036b8:	a902      	add	r1, sp, #8
 80036ba:	9301      	str	r3, [sp, #4]
 80036bc:	f000 f99c 	bl	80039f8 <_svfiprintf_r>
 80036c0:	1c43      	adds	r3, r0, #1
 80036c2:	da01      	bge.n	80036c8 <sniprintf+0x58>
 80036c4:	238b      	movs	r3, #139	@ 0x8b
 80036c6:	602b      	str	r3, [r5, #0]
 80036c8:	2c00      	cmp	r4, #0
 80036ca:	d0dd      	beq.n	8003688 <sniprintf+0x18>
 80036cc:	2200      	movs	r2, #0
 80036ce:	9b02      	ldr	r3, [sp, #8]
 80036d0:	701a      	strb	r2, [r3, #0]
 80036d2:	e7d9      	b.n	8003688 <sniprintf+0x18>
 80036d4:	2000000c 	.word	0x2000000c

080036d8 <memset>:
 80036d8:	0003      	movs	r3, r0
 80036da:	1882      	adds	r2, r0, r2
 80036dc:	4293      	cmp	r3, r2
 80036de:	d100      	bne.n	80036e2 <memset+0xa>
 80036e0:	4770      	bx	lr
 80036e2:	7019      	strb	r1, [r3, #0]
 80036e4:	3301      	adds	r3, #1
 80036e6:	e7f9      	b.n	80036dc <memset+0x4>

080036e8 <__errno>:
 80036e8:	4b01      	ldr	r3, [pc, #4]	@ (80036f0 <__errno+0x8>)
 80036ea:	6818      	ldr	r0, [r3, #0]
 80036ec:	4770      	bx	lr
 80036ee:	46c0      	nop			@ (mov r8, r8)
 80036f0:	2000000c 	.word	0x2000000c

080036f4 <__libc_init_array>:
 80036f4:	b570      	push	{r4, r5, r6, lr}
 80036f6:	2600      	movs	r6, #0
 80036f8:	4c0c      	ldr	r4, [pc, #48]	@ (800372c <__libc_init_array+0x38>)
 80036fa:	4d0d      	ldr	r5, [pc, #52]	@ (8003730 <__libc_init_array+0x3c>)
 80036fc:	1b64      	subs	r4, r4, r5
 80036fe:	10a4      	asrs	r4, r4, #2
 8003700:	42a6      	cmp	r6, r4
 8003702:	d109      	bne.n	8003718 <__libc_init_array+0x24>
 8003704:	2600      	movs	r6, #0
 8003706:	f000 fc65 	bl	8003fd4 <_init>
 800370a:	4c0a      	ldr	r4, [pc, #40]	@ (8003734 <__libc_init_array+0x40>)
 800370c:	4d0a      	ldr	r5, [pc, #40]	@ (8003738 <__libc_init_array+0x44>)
 800370e:	1b64      	subs	r4, r4, r5
 8003710:	10a4      	asrs	r4, r4, #2
 8003712:	42a6      	cmp	r6, r4
 8003714:	d105      	bne.n	8003722 <__libc_init_array+0x2e>
 8003716:	bd70      	pop	{r4, r5, r6, pc}
 8003718:	00b3      	lsls	r3, r6, #2
 800371a:	58eb      	ldr	r3, [r5, r3]
 800371c:	4798      	blx	r3
 800371e:	3601      	adds	r6, #1
 8003720:	e7ee      	b.n	8003700 <__libc_init_array+0xc>
 8003722:	00b3      	lsls	r3, r6, #2
 8003724:	58eb      	ldr	r3, [r5, r3]
 8003726:	4798      	blx	r3
 8003728:	3601      	adds	r6, #1
 800372a:	e7f2      	b.n	8003712 <__libc_init_array+0x1e>
 800372c:	080040b4 	.word	0x080040b4
 8003730:	080040b4 	.word	0x080040b4
 8003734:	080040b8 	.word	0x080040b8
 8003738:	080040b4 	.word	0x080040b4

0800373c <__retarget_lock_acquire_recursive>:
 800373c:	4770      	bx	lr

0800373e <__retarget_lock_release_recursive>:
 800373e:	4770      	bx	lr

08003740 <_free_r>:
 8003740:	b570      	push	{r4, r5, r6, lr}
 8003742:	0005      	movs	r5, r0
 8003744:	1e0c      	subs	r4, r1, #0
 8003746:	d010      	beq.n	800376a <_free_r+0x2a>
 8003748:	3c04      	subs	r4, #4
 800374a:	6823      	ldr	r3, [r4, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	da00      	bge.n	8003752 <_free_r+0x12>
 8003750:	18e4      	adds	r4, r4, r3
 8003752:	0028      	movs	r0, r5
 8003754:	f000 f8e0 	bl	8003918 <__malloc_lock>
 8003758:	4a1d      	ldr	r2, [pc, #116]	@ (80037d0 <_free_r+0x90>)
 800375a:	6813      	ldr	r3, [r2, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d105      	bne.n	800376c <_free_r+0x2c>
 8003760:	6063      	str	r3, [r4, #4]
 8003762:	6014      	str	r4, [r2, #0]
 8003764:	0028      	movs	r0, r5
 8003766:	f000 f8df 	bl	8003928 <__malloc_unlock>
 800376a:	bd70      	pop	{r4, r5, r6, pc}
 800376c:	42a3      	cmp	r3, r4
 800376e:	d908      	bls.n	8003782 <_free_r+0x42>
 8003770:	6820      	ldr	r0, [r4, #0]
 8003772:	1821      	adds	r1, r4, r0
 8003774:	428b      	cmp	r3, r1
 8003776:	d1f3      	bne.n	8003760 <_free_r+0x20>
 8003778:	6819      	ldr	r1, [r3, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	1809      	adds	r1, r1, r0
 800377e:	6021      	str	r1, [r4, #0]
 8003780:	e7ee      	b.n	8003760 <_free_r+0x20>
 8003782:	001a      	movs	r2, r3
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <_free_r+0x4e>
 800378a:	42a3      	cmp	r3, r4
 800378c:	d9f9      	bls.n	8003782 <_free_r+0x42>
 800378e:	6811      	ldr	r1, [r2, #0]
 8003790:	1850      	adds	r0, r2, r1
 8003792:	42a0      	cmp	r0, r4
 8003794:	d10b      	bne.n	80037ae <_free_r+0x6e>
 8003796:	6820      	ldr	r0, [r4, #0]
 8003798:	1809      	adds	r1, r1, r0
 800379a:	1850      	adds	r0, r2, r1
 800379c:	6011      	str	r1, [r2, #0]
 800379e:	4283      	cmp	r3, r0
 80037a0:	d1e0      	bne.n	8003764 <_free_r+0x24>
 80037a2:	6818      	ldr	r0, [r3, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	1841      	adds	r1, r0, r1
 80037a8:	6011      	str	r1, [r2, #0]
 80037aa:	6053      	str	r3, [r2, #4]
 80037ac:	e7da      	b.n	8003764 <_free_r+0x24>
 80037ae:	42a0      	cmp	r0, r4
 80037b0:	d902      	bls.n	80037b8 <_free_r+0x78>
 80037b2:	230c      	movs	r3, #12
 80037b4:	602b      	str	r3, [r5, #0]
 80037b6:	e7d5      	b.n	8003764 <_free_r+0x24>
 80037b8:	6820      	ldr	r0, [r4, #0]
 80037ba:	1821      	adds	r1, r4, r0
 80037bc:	428b      	cmp	r3, r1
 80037be:	d103      	bne.n	80037c8 <_free_r+0x88>
 80037c0:	6819      	ldr	r1, [r3, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	1809      	adds	r1, r1, r0
 80037c6:	6021      	str	r1, [r4, #0]
 80037c8:	6063      	str	r3, [r4, #4]
 80037ca:	6054      	str	r4, [r2, #4]
 80037cc:	e7ca      	b.n	8003764 <_free_r+0x24>
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	20000324 	.word	0x20000324

080037d4 <sbrk_aligned>:
 80037d4:	b570      	push	{r4, r5, r6, lr}
 80037d6:	4e0f      	ldr	r6, [pc, #60]	@ (8003814 <sbrk_aligned+0x40>)
 80037d8:	000d      	movs	r5, r1
 80037da:	6831      	ldr	r1, [r6, #0]
 80037dc:	0004      	movs	r4, r0
 80037de:	2900      	cmp	r1, #0
 80037e0:	d102      	bne.n	80037e8 <sbrk_aligned+0x14>
 80037e2:	f000 fb99 	bl	8003f18 <_sbrk_r>
 80037e6:	6030      	str	r0, [r6, #0]
 80037e8:	0029      	movs	r1, r5
 80037ea:	0020      	movs	r0, r4
 80037ec:	f000 fb94 	bl	8003f18 <_sbrk_r>
 80037f0:	1c43      	adds	r3, r0, #1
 80037f2:	d103      	bne.n	80037fc <sbrk_aligned+0x28>
 80037f4:	2501      	movs	r5, #1
 80037f6:	426d      	negs	r5, r5
 80037f8:	0028      	movs	r0, r5
 80037fa:	bd70      	pop	{r4, r5, r6, pc}
 80037fc:	2303      	movs	r3, #3
 80037fe:	1cc5      	adds	r5, r0, #3
 8003800:	439d      	bics	r5, r3
 8003802:	42a8      	cmp	r0, r5
 8003804:	d0f8      	beq.n	80037f8 <sbrk_aligned+0x24>
 8003806:	1a29      	subs	r1, r5, r0
 8003808:	0020      	movs	r0, r4
 800380a:	f000 fb85 	bl	8003f18 <_sbrk_r>
 800380e:	3001      	adds	r0, #1
 8003810:	d1f2      	bne.n	80037f8 <sbrk_aligned+0x24>
 8003812:	e7ef      	b.n	80037f4 <sbrk_aligned+0x20>
 8003814:	20000320 	.word	0x20000320

08003818 <_malloc_r>:
 8003818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800381a:	2203      	movs	r2, #3
 800381c:	1ccb      	adds	r3, r1, #3
 800381e:	4393      	bics	r3, r2
 8003820:	3308      	adds	r3, #8
 8003822:	0005      	movs	r5, r0
 8003824:	001f      	movs	r7, r3
 8003826:	2b0c      	cmp	r3, #12
 8003828:	d234      	bcs.n	8003894 <_malloc_r+0x7c>
 800382a:	270c      	movs	r7, #12
 800382c:	42b9      	cmp	r1, r7
 800382e:	d833      	bhi.n	8003898 <_malloc_r+0x80>
 8003830:	0028      	movs	r0, r5
 8003832:	f000 f871 	bl	8003918 <__malloc_lock>
 8003836:	4e37      	ldr	r6, [pc, #220]	@ (8003914 <_malloc_r+0xfc>)
 8003838:	6833      	ldr	r3, [r6, #0]
 800383a:	001c      	movs	r4, r3
 800383c:	2c00      	cmp	r4, #0
 800383e:	d12f      	bne.n	80038a0 <_malloc_r+0x88>
 8003840:	0039      	movs	r1, r7
 8003842:	0028      	movs	r0, r5
 8003844:	f7ff ffc6 	bl	80037d4 <sbrk_aligned>
 8003848:	0004      	movs	r4, r0
 800384a:	1c43      	adds	r3, r0, #1
 800384c:	d15f      	bne.n	800390e <_malloc_r+0xf6>
 800384e:	6834      	ldr	r4, [r6, #0]
 8003850:	9400      	str	r4, [sp, #0]
 8003852:	9b00      	ldr	r3, [sp, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d14a      	bne.n	80038ee <_malloc_r+0xd6>
 8003858:	2c00      	cmp	r4, #0
 800385a:	d052      	beq.n	8003902 <_malloc_r+0xea>
 800385c:	6823      	ldr	r3, [r4, #0]
 800385e:	0028      	movs	r0, r5
 8003860:	18e3      	adds	r3, r4, r3
 8003862:	9900      	ldr	r1, [sp, #0]
 8003864:	9301      	str	r3, [sp, #4]
 8003866:	f000 fb57 	bl	8003f18 <_sbrk_r>
 800386a:	9b01      	ldr	r3, [sp, #4]
 800386c:	4283      	cmp	r3, r0
 800386e:	d148      	bne.n	8003902 <_malloc_r+0xea>
 8003870:	6823      	ldr	r3, [r4, #0]
 8003872:	0028      	movs	r0, r5
 8003874:	1aff      	subs	r7, r7, r3
 8003876:	0039      	movs	r1, r7
 8003878:	f7ff ffac 	bl	80037d4 <sbrk_aligned>
 800387c:	3001      	adds	r0, #1
 800387e:	d040      	beq.n	8003902 <_malloc_r+0xea>
 8003880:	6823      	ldr	r3, [r4, #0]
 8003882:	19db      	adds	r3, r3, r7
 8003884:	6023      	str	r3, [r4, #0]
 8003886:	6833      	ldr	r3, [r6, #0]
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	2a00      	cmp	r2, #0
 800388c:	d133      	bne.n	80038f6 <_malloc_r+0xde>
 800388e:	9b00      	ldr	r3, [sp, #0]
 8003890:	6033      	str	r3, [r6, #0]
 8003892:	e019      	b.n	80038c8 <_malloc_r+0xb0>
 8003894:	2b00      	cmp	r3, #0
 8003896:	dac9      	bge.n	800382c <_malloc_r+0x14>
 8003898:	230c      	movs	r3, #12
 800389a:	602b      	str	r3, [r5, #0]
 800389c:	2000      	movs	r0, #0
 800389e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80038a0:	6821      	ldr	r1, [r4, #0]
 80038a2:	1bc9      	subs	r1, r1, r7
 80038a4:	d420      	bmi.n	80038e8 <_malloc_r+0xd0>
 80038a6:	290b      	cmp	r1, #11
 80038a8:	d90a      	bls.n	80038c0 <_malloc_r+0xa8>
 80038aa:	19e2      	adds	r2, r4, r7
 80038ac:	6027      	str	r7, [r4, #0]
 80038ae:	42a3      	cmp	r3, r4
 80038b0:	d104      	bne.n	80038bc <_malloc_r+0xa4>
 80038b2:	6032      	str	r2, [r6, #0]
 80038b4:	6863      	ldr	r3, [r4, #4]
 80038b6:	6011      	str	r1, [r2, #0]
 80038b8:	6053      	str	r3, [r2, #4]
 80038ba:	e005      	b.n	80038c8 <_malloc_r+0xb0>
 80038bc:	605a      	str	r2, [r3, #4]
 80038be:	e7f9      	b.n	80038b4 <_malloc_r+0x9c>
 80038c0:	6862      	ldr	r2, [r4, #4]
 80038c2:	42a3      	cmp	r3, r4
 80038c4:	d10e      	bne.n	80038e4 <_malloc_r+0xcc>
 80038c6:	6032      	str	r2, [r6, #0]
 80038c8:	0028      	movs	r0, r5
 80038ca:	f000 f82d 	bl	8003928 <__malloc_unlock>
 80038ce:	0020      	movs	r0, r4
 80038d0:	2207      	movs	r2, #7
 80038d2:	300b      	adds	r0, #11
 80038d4:	1d23      	adds	r3, r4, #4
 80038d6:	4390      	bics	r0, r2
 80038d8:	1ac2      	subs	r2, r0, r3
 80038da:	4298      	cmp	r0, r3
 80038dc:	d0df      	beq.n	800389e <_malloc_r+0x86>
 80038de:	1a1b      	subs	r3, r3, r0
 80038e0:	50a3      	str	r3, [r4, r2]
 80038e2:	e7dc      	b.n	800389e <_malloc_r+0x86>
 80038e4:	605a      	str	r2, [r3, #4]
 80038e6:	e7ef      	b.n	80038c8 <_malloc_r+0xb0>
 80038e8:	0023      	movs	r3, r4
 80038ea:	6864      	ldr	r4, [r4, #4]
 80038ec:	e7a6      	b.n	800383c <_malloc_r+0x24>
 80038ee:	9c00      	ldr	r4, [sp, #0]
 80038f0:	6863      	ldr	r3, [r4, #4]
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	e7ad      	b.n	8003852 <_malloc_r+0x3a>
 80038f6:	001a      	movs	r2, r3
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	42a3      	cmp	r3, r4
 80038fc:	d1fb      	bne.n	80038f6 <_malloc_r+0xde>
 80038fe:	2300      	movs	r3, #0
 8003900:	e7da      	b.n	80038b8 <_malloc_r+0xa0>
 8003902:	230c      	movs	r3, #12
 8003904:	0028      	movs	r0, r5
 8003906:	602b      	str	r3, [r5, #0]
 8003908:	f000 f80e 	bl	8003928 <__malloc_unlock>
 800390c:	e7c6      	b.n	800389c <_malloc_r+0x84>
 800390e:	6007      	str	r7, [r0, #0]
 8003910:	e7da      	b.n	80038c8 <_malloc_r+0xb0>
 8003912:	46c0      	nop			@ (mov r8, r8)
 8003914:	20000324 	.word	0x20000324

08003918 <__malloc_lock>:
 8003918:	b510      	push	{r4, lr}
 800391a:	4802      	ldr	r0, [pc, #8]	@ (8003924 <__malloc_lock+0xc>)
 800391c:	f7ff ff0e 	bl	800373c <__retarget_lock_acquire_recursive>
 8003920:	bd10      	pop	{r4, pc}
 8003922:	46c0      	nop			@ (mov r8, r8)
 8003924:	2000031c 	.word	0x2000031c

08003928 <__malloc_unlock>:
 8003928:	b510      	push	{r4, lr}
 800392a:	4802      	ldr	r0, [pc, #8]	@ (8003934 <__malloc_unlock+0xc>)
 800392c:	f7ff ff07 	bl	800373e <__retarget_lock_release_recursive>
 8003930:	bd10      	pop	{r4, pc}
 8003932:	46c0      	nop			@ (mov r8, r8)
 8003934:	2000031c 	.word	0x2000031c

08003938 <__ssputs_r>:
 8003938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800393a:	688e      	ldr	r6, [r1, #8]
 800393c:	b085      	sub	sp, #20
 800393e:	001f      	movs	r7, r3
 8003940:	000c      	movs	r4, r1
 8003942:	680b      	ldr	r3, [r1, #0]
 8003944:	9002      	str	r0, [sp, #8]
 8003946:	9203      	str	r2, [sp, #12]
 8003948:	42be      	cmp	r6, r7
 800394a:	d830      	bhi.n	80039ae <__ssputs_r+0x76>
 800394c:	210c      	movs	r1, #12
 800394e:	5e62      	ldrsh	r2, [r4, r1]
 8003950:	2190      	movs	r1, #144	@ 0x90
 8003952:	00c9      	lsls	r1, r1, #3
 8003954:	420a      	tst	r2, r1
 8003956:	d028      	beq.n	80039aa <__ssputs_r+0x72>
 8003958:	2003      	movs	r0, #3
 800395a:	6921      	ldr	r1, [r4, #16]
 800395c:	1a5b      	subs	r3, r3, r1
 800395e:	9301      	str	r3, [sp, #4]
 8003960:	6963      	ldr	r3, [r4, #20]
 8003962:	4343      	muls	r3, r0
 8003964:	9801      	ldr	r0, [sp, #4]
 8003966:	0fdd      	lsrs	r5, r3, #31
 8003968:	18ed      	adds	r5, r5, r3
 800396a:	1c7b      	adds	r3, r7, #1
 800396c:	181b      	adds	r3, r3, r0
 800396e:	106d      	asrs	r5, r5, #1
 8003970:	42ab      	cmp	r3, r5
 8003972:	d900      	bls.n	8003976 <__ssputs_r+0x3e>
 8003974:	001d      	movs	r5, r3
 8003976:	0552      	lsls	r2, r2, #21
 8003978:	d528      	bpl.n	80039cc <__ssputs_r+0x94>
 800397a:	0029      	movs	r1, r5
 800397c:	9802      	ldr	r0, [sp, #8]
 800397e:	f7ff ff4b 	bl	8003818 <_malloc_r>
 8003982:	1e06      	subs	r6, r0, #0
 8003984:	d02c      	beq.n	80039e0 <__ssputs_r+0xa8>
 8003986:	9a01      	ldr	r2, [sp, #4]
 8003988:	6921      	ldr	r1, [r4, #16]
 800398a:	f000 fae2 	bl	8003f52 <memcpy>
 800398e:	89a2      	ldrh	r2, [r4, #12]
 8003990:	4b18      	ldr	r3, [pc, #96]	@ (80039f4 <__ssputs_r+0xbc>)
 8003992:	401a      	ands	r2, r3
 8003994:	2380      	movs	r3, #128	@ 0x80
 8003996:	4313      	orrs	r3, r2
 8003998:	81a3      	strh	r3, [r4, #12]
 800399a:	9b01      	ldr	r3, [sp, #4]
 800399c:	6126      	str	r6, [r4, #16]
 800399e:	18f6      	adds	r6, r6, r3
 80039a0:	6026      	str	r6, [r4, #0]
 80039a2:	003e      	movs	r6, r7
 80039a4:	6165      	str	r5, [r4, #20]
 80039a6:	1aed      	subs	r5, r5, r3
 80039a8:	60a5      	str	r5, [r4, #8]
 80039aa:	42be      	cmp	r6, r7
 80039ac:	d900      	bls.n	80039b0 <__ssputs_r+0x78>
 80039ae:	003e      	movs	r6, r7
 80039b0:	0032      	movs	r2, r6
 80039b2:	9903      	ldr	r1, [sp, #12]
 80039b4:	6820      	ldr	r0, [r4, #0]
 80039b6:	f000 fa9b 	bl	8003ef0 <memmove>
 80039ba:	2000      	movs	r0, #0
 80039bc:	68a3      	ldr	r3, [r4, #8]
 80039be:	1b9b      	subs	r3, r3, r6
 80039c0:	60a3      	str	r3, [r4, #8]
 80039c2:	6823      	ldr	r3, [r4, #0]
 80039c4:	199b      	adds	r3, r3, r6
 80039c6:	6023      	str	r3, [r4, #0]
 80039c8:	b005      	add	sp, #20
 80039ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039cc:	002a      	movs	r2, r5
 80039ce:	9802      	ldr	r0, [sp, #8]
 80039d0:	f000 fac8 	bl	8003f64 <_realloc_r>
 80039d4:	1e06      	subs	r6, r0, #0
 80039d6:	d1e0      	bne.n	800399a <__ssputs_r+0x62>
 80039d8:	6921      	ldr	r1, [r4, #16]
 80039da:	9802      	ldr	r0, [sp, #8]
 80039dc:	f7ff feb0 	bl	8003740 <_free_r>
 80039e0:	230c      	movs	r3, #12
 80039e2:	2001      	movs	r0, #1
 80039e4:	9a02      	ldr	r2, [sp, #8]
 80039e6:	4240      	negs	r0, r0
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	89a2      	ldrh	r2, [r4, #12]
 80039ec:	3334      	adds	r3, #52	@ 0x34
 80039ee:	4313      	orrs	r3, r2
 80039f0:	81a3      	strh	r3, [r4, #12]
 80039f2:	e7e9      	b.n	80039c8 <__ssputs_r+0x90>
 80039f4:	fffffb7f 	.word	0xfffffb7f

080039f8 <_svfiprintf_r>:
 80039f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039fa:	b0a1      	sub	sp, #132	@ 0x84
 80039fc:	9003      	str	r0, [sp, #12]
 80039fe:	001d      	movs	r5, r3
 8003a00:	898b      	ldrh	r3, [r1, #12]
 8003a02:	000f      	movs	r7, r1
 8003a04:	0016      	movs	r6, r2
 8003a06:	061b      	lsls	r3, r3, #24
 8003a08:	d511      	bpl.n	8003a2e <_svfiprintf_r+0x36>
 8003a0a:	690b      	ldr	r3, [r1, #16]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10e      	bne.n	8003a2e <_svfiprintf_r+0x36>
 8003a10:	2140      	movs	r1, #64	@ 0x40
 8003a12:	f7ff ff01 	bl	8003818 <_malloc_r>
 8003a16:	6038      	str	r0, [r7, #0]
 8003a18:	6138      	str	r0, [r7, #16]
 8003a1a:	2800      	cmp	r0, #0
 8003a1c:	d105      	bne.n	8003a2a <_svfiprintf_r+0x32>
 8003a1e:	230c      	movs	r3, #12
 8003a20:	9a03      	ldr	r2, [sp, #12]
 8003a22:	6013      	str	r3, [r2, #0]
 8003a24:	2001      	movs	r0, #1
 8003a26:	4240      	negs	r0, r0
 8003a28:	e0cf      	b.n	8003bca <_svfiprintf_r+0x1d2>
 8003a2a:	2340      	movs	r3, #64	@ 0x40
 8003a2c:	617b      	str	r3, [r7, #20]
 8003a2e:	2300      	movs	r3, #0
 8003a30:	ac08      	add	r4, sp, #32
 8003a32:	6163      	str	r3, [r4, #20]
 8003a34:	3320      	adds	r3, #32
 8003a36:	7663      	strb	r3, [r4, #25]
 8003a38:	3310      	adds	r3, #16
 8003a3a:	76a3      	strb	r3, [r4, #26]
 8003a3c:	9507      	str	r5, [sp, #28]
 8003a3e:	0035      	movs	r5, r6
 8003a40:	782b      	ldrb	r3, [r5, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <_svfiprintf_r+0x52>
 8003a46:	2b25      	cmp	r3, #37	@ 0x25
 8003a48:	d148      	bne.n	8003adc <_svfiprintf_r+0xe4>
 8003a4a:	1bab      	subs	r3, r5, r6
 8003a4c:	9305      	str	r3, [sp, #20]
 8003a4e:	42b5      	cmp	r5, r6
 8003a50:	d00b      	beq.n	8003a6a <_svfiprintf_r+0x72>
 8003a52:	0032      	movs	r2, r6
 8003a54:	0039      	movs	r1, r7
 8003a56:	9803      	ldr	r0, [sp, #12]
 8003a58:	f7ff ff6e 	bl	8003938 <__ssputs_r>
 8003a5c:	3001      	adds	r0, #1
 8003a5e:	d100      	bne.n	8003a62 <_svfiprintf_r+0x6a>
 8003a60:	e0ae      	b.n	8003bc0 <_svfiprintf_r+0x1c8>
 8003a62:	6963      	ldr	r3, [r4, #20]
 8003a64:	9a05      	ldr	r2, [sp, #20]
 8003a66:	189b      	adds	r3, r3, r2
 8003a68:	6163      	str	r3, [r4, #20]
 8003a6a:	782b      	ldrb	r3, [r5, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d100      	bne.n	8003a72 <_svfiprintf_r+0x7a>
 8003a70:	e0a6      	b.n	8003bc0 <_svfiprintf_r+0x1c8>
 8003a72:	2201      	movs	r2, #1
 8003a74:	2300      	movs	r3, #0
 8003a76:	4252      	negs	r2, r2
 8003a78:	6062      	str	r2, [r4, #4]
 8003a7a:	a904      	add	r1, sp, #16
 8003a7c:	3254      	adds	r2, #84	@ 0x54
 8003a7e:	1852      	adds	r2, r2, r1
 8003a80:	1c6e      	adds	r6, r5, #1
 8003a82:	6023      	str	r3, [r4, #0]
 8003a84:	60e3      	str	r3, [r4, #12]
 8003a86:	60a3      	str	r3, [r4, #8]
 8003a88:	7013      	strb	r3, [r2, #0]
 8003a8a:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003a8c:	4b54      	ldr	r3, [pc, #336]	@ (8003be0 <_svfiprintf_r+0x1e8>)
 8003a8e:	2205      	movs	r2, #5
 8003a90:	0018      	movs	r0, r3
 8003a92:	7831      	ldrb	r1, [r6, #0]
 8003a94:	9305      	str	r3, [sp, #20]
 8003a96:	f000 fa51 	bl	8003f3c <memchr>
 8003a9a:	1c75      	adds	r5, r6, #1
 8003a9c:	2800      	cmp	r0, #0
 8003a9e:	d11f      	bne.n	8003ae0 <_svfiprintf_r+0xe8>
 8003aa0:	6822      	ldr	r2, [r4, #0]
 8003aa2:	06d3      	lsls	r3, r2, #27
 8003aa4:	d504      	bpl.n	8003ab0 <_svfiprintf_r+0xb8>
 8003aa6:	2353      	movs	r3, #83	@ 0x53
 8003aa8:	a904      	add	r1, sp, #16
 8003aaa:	185b      	adds	r3, r3, r1
 8003aac:	2120      	movs	r1, #32
 8003aae:	7019      	strb	r1, [r3, #0]
 8003ab0:	0713      	lsls	r3, r2, #28
 8003ab2:	d504      	bpl.n	8003abe <_svfiprintf_r+0xc6>
 8003ab4:	2353      	movs	r3, #83	@ 0x53
 8003ab6:	a904      	add	r1, sp, #16
 8003ab8:	185b      	adds	r3, r3, r1
 8003aba:	212b      	movs	r1, #43	@ 0x2b
 8003abc:	7019      	strb	r1, [r3, #0]
 8003abe:	7833      	ldrb	r3, [r6, #0]
 8003ac0:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ac2:	d016      	beq.n	8003af2 <_svfiprintf_r+0xfa>
 8003ac4:	0035      	movs	r5, r6
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	200a      	movs	r0, #10
 8003aca:	68e3      	ldr	r3, [r4, #12]
 8003acc:	782a      	ldrb	r2, [r5, #0]
 8003ace:	1c6e      	adds	r6, r5, #1
 8003ad0:	3a30      	subs	r2, #48	@ 0x30
 8003ad2:	2a09      	cmp	r2, #9
 8003ad4:	d950      	bls.n	8003b78 <_svfiprintf_r+0x180>
 8003ad6:	2900      	cmp	r1, #0
 8003ad8:	d111      	bne.n	8003afe <_svfiprintf_r+0x106>
 8003ada:	e017      	b.n	8003b0c <_svfiprintf_r+0x114>
 8003adc:	3501      	adds	r5, #1
 8003ade:	e7af      	b.n	8003a40 <_svfiprintf_r+0x48>
 8003ae0:	9b05      	ldr	r3, [sp, #20]
 8003ae2:	6822      	ldr	r2, [r4, #0]
 8003ae4:	1ac0      	subs	r0, r0, r3
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	4083      	lsls	r3, r0
 8003aea:	4313      	orrs	r3, r2
 8003aec:	002e      	movs	r6, r5
 8003aee:	6023      	str	r3, [r4, #0]
 8003af0:	e7cc      	b.n	8003a8c <_svfiprintf_r+0x94>
 8003af2:	9b07      	ldr	r3, [sp, #28]
 8003af4:	1d19      	adds	r1, r3, #4
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	9107      	str	r1, [sp, #28]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	db01      	blt.n	8003b02 <_svfiprintf_r+0x10a>
 8003afe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003b00:	e004      	b.n	8003b0c <_svfiprintf_r+0x114>
 8003b02:	425b      	negs	r3, r3
 8003b04:	60e3      	str	r3, [r4, #12]
 8003b06:	2302      	movs	r3, #2
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	6023      	str	r3, [r4, #0]
 8003b0c:	782b      	ldrb	r3, [r5, #0]
 8003b0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b10:	d10c      	bne.n	8003b2c <_svfiprintf_r+0x134>
 8003b12:	786b      	ldrb	r3, [r5, #1]
 8003b14:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b16:	d134      	bne.n	8003b82 <_svfiprintf_r+0x18a>
 8003b18:	9b07      	ldr	r3, [sp, #28]
 8003b1a:	3502      	adds	r5, #2
 8003b1c:	1d1a      	adds	r2, r3, #4
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	9207      	str	r2, [sp, #28]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	da01      	bge.n	8003b2a <_svfiprintf_r+0x132>
 8003b26:	2301      	movs	r3, #1
 8003b28:	425b      	negs	r3, r3
 8003b2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b2c:	4e2d      	ldr	r6, [pc, #180]	@ (8003be4 <_svfiprintf_r+0x1ec>)
 8003b2e:	2203      	movs	r2, #3
 8003b30:	0030      	movs	r0, r6
 8003b32:	7829      	ldrb	r1, [r5, #0]
 8003b34:	f000 fa02 	bl	8003f3c <memchr>
 8003b38:	2800      	cmp	r0, #0
 8003b3a:	d006      	beq.n	8003b4a <_svfiprintf_r+0x152>
 8003b3c:	2340      	movs	r3, #64	@ 0x40
 8003b3e:	1b80      	subs	r0, r0, r6
 8003b40:	4083      	lsls	r3, r0
 8003b42:	6822      	ldr	r2, [r4, #0]
 8003b44:	3501      	adds	r5, #1
 8003b46:	4313      	orrs	r3, r2
 8003b48:	6023      	str	r3, [r4, #0]
 8003b4a:	7829      	ldrb	r1, [r5, #0]
 8003b4c:	2206      	movs	r2, #6
 8003b4e:	4826      	ldr	r0, [pc, #152]	@ (8003be8 <_svfiprintf_r+0x1f0>)
 8003b50:	1c6e      	adds	r6, r5, #1
 8003b52:	7621      	strb	r1, [r4, #24]
 8003b54:	f000 f9f2 	bl	8003f3c <memchr>
 8003b58:	2800      	cmp	r0, #0
 8003b5a:	d038      	beq.n	8003bce <_svfiprintf_r+0x1d6>
 8003b5c:	4b23      	ldr	r3, [pc, #140]	@ (8003bec <_svfiprintf_r+0x1f4>)
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d122      	bne.n	8003ba8 <_svfiprintf_r+0x1b0>
 8003b62:	2207      	movs	r2, #7
 8003b64:	9b07      	ldr	r3, [sp, #28]
 8003b66:	3307      	adds	r3, #7
 8003b68:	4393      	bics	r3, r2
 8003b6a:	3308      	adds	r3, #8
 8003b6c:	9307      	str	r3, [sp, #28]
 8003b6e:	6963      	ldr	r3, [r4, #20]
 8003b70:	9a04      	ldr	r2, [sp, #16]
 8003b72:	189b      	adds	r3, r3, r2
 8003b74:	6163      	str	r3, [r4, #20]
 8003b76:	e762      	b.n	8003a3e <_svfiprintf_r+0x46>
 8003b78:	4343      	muls	r3, r0
 8003b7a:	0035      	movs	r5, r6
 8003b7c:	2101      	movs	r1, #1
 8003b7e:	189b      	adds	r3, r3, r2
 8003b80:	e7a4      	b.n	8003acc <_svfiprintf_r+0xd4>
 8003b82:	2300      	movs	r3, #0
 8003b84:	200a      	movs	r0, #10
 8003b86:	0019      	movs	r1, r3
 8003b88:	3501      	adds	r5, #1
 8003b8a:	6063      	str	r3, [r4, #4]
 8003b8c:	782a      	ldrb	r2, [r5, #0]
 8003b8e:	1c6e      	adds	r6, r5, #1
 8003b90:	3a30      	subs	r2, #48	@ 0x30
 8003b92:	2a09      	cmp	r2, #9
 8003b94:	d903      	bls.n	8003b9e <_svfiprintf_r+0x1a6>
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0c8      	beq.n	8003b2c <_svfiprintf_r+0x134>
 8003b9a:	9109      	str	r1, [sp, #36]	@ 0x24
 8003b9c:	e7c6      	b.n	8003b2c <_svfiprintf_r+0x134>
 8003b9e:	4341      	muls	r1, r0
 8003ba0:	0035      	movs	r5, r6
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	1889      	adds	r1, r1, r2
 8003ba6:	e7f1      	b.n	8003b8c <_svfiprintf_r+0x194>
 8003ba8:	aa07      	add	r2, sp, #28
 8003baa:	9200      	str	r2, [sp, #0]
 8003bac:	0021      	movs	r1, r4
 8003bae:	003a      	movs	r2, r7
 8003bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8003bf0 <_svfiprintf_r+0x1f8>)
 8003bb2:	9803      	ldr	r0, [sp, #12]
 8003bb4:	e000      	b.n	8003bb8 <_svfiprintf_r+0x1c0>
 8003bb6:	bf00      	nop
 8003bb8:	9004      	str	r0, [sp, #16]
 8003bba:	9b04      	ldr	r3, [sp, #16]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	d1d6      	bne.n	8003b6e <_svfiprintf_r+0x176>
 8003bc0:	89bb      	ldrh	r3, [r7, #12]
 8003bc2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003bc4:	065b      	lsls	r3, r3, #25
 8003bc6:	d500      	bpl.n	8003bca <_svfiprintf_r+0x1d2>
 8003bc8:	e72c      	b.n	8003a24 <_svfiprintf_r+0x2c>
 8003bca:	b021      	add	sp, #132	@ 0x84
 8003bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bce:	aa07      	add	r2, sp, #28
 8003bd0:	9200      	str	r2, [sp, #0]
 8003bd2:	0021      	movs	r1, r4
 8003bd4:	003a      	movs	r2, r7
 8003bd6:	4b06      	ldr	r3, [pc, #24]	@ (8003bf0 <_svfiprintf_r+0x1f8>)
 8003bd8:	9803      	ldr	r0, [sp, #12]
 8003bda:	f000 f87b 	bl	8003cd4 <_printf_i>
 8003bde:	e7eb      	b.n	8003bb8 <_svfiprintf_r+0x1c0>
 8003be0:	08004080 	.word	0x08004080
 8003be4:	08004086 	.word	0x08004086
 8003be8:	0800408a 	.word	0x0800408a
 8003bec:	00000000 	.word	0x00000000
 8003bf0:	08003939 	.word	0x08003939

08003bf4 <_printf_common>:
 8003bf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bf6:	0016      	movs	r6, r2
 8003bf8:	9301      	str	r3, [sp, #4]
 8003bfa:	688a      	ldr	r2, [r1, #8]
 8003bfc:	690b      	ldr	r3, [r1, #16]
 8003bfe:	000c      	movs	r4, r1
 8003c00:	9000      	str	r0, [sp, #0]
 8003c02:	4293      	cmp	r3, r2
 8003c04:	da00      	bge.n	8003c08 <_printf_common+0x14>
 8003c06:	0013      	movs	r3, r2
 8003c08:	0022      	movs	r2, r4
 8003c0a:	6033      	str	r3, [r6, #0]
 8003c0c:	3243      	adds	r2, #67	@ 0x43
 8003c0e:	7812      	ldrb	r2, [r2, #0]
 8003c10:	2a00      	cmp	r2, #0
 8003c12:	d001      	beq.n	8003c18 <_printf_common+0x24>
 8003c14:	3301      	adds	r3, #1
 8003c16:	6033      	str	r3, [r6, #0]
 8003c18:	6823      	ldr	r3, [r4, #0]
 8003c1a:	069b      	lsls	r3, r3, #26
 8003c1c:	d502      	bpl.n	8003c24 <_printf_common+0x30>
 8003c1e:	6833      	ldr	r3, [r6, #0]
 8003c20:	3302      	adds	r3, #2
 8003c22:	6033      	str	r3, [r6, #0]
 8003c24:	6822      	ldr	r2, [r4, #0]
 8003c26:	2306      	movs	r3, #6
 8003c28:	0015      	movs	r5, r2
 8003c2a:	401d      	ands	r5, r3
 8003c2c:	421a      	tst	r2, r3
 8003c2e:	d027      	beq.n	8003c80 <_printf_common+0x8c>
 8003c30:	0023      	movs	r3, r4
 8003c32:	3343      	adds	r3, #67	@ 0x43
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	1e5a      	subs	r2, r3, #1
 8003c38:	4193      	sbcs	r3, r2
 8003c3a:	6822      	ldr	r2, [r4, #0]
 8003c3c:	0692      	lsls	r2, r2, #26
 8003c3e:	d430      	bmi.n	8003ca2 <_printf_common+0xae>
 8003c40:	0022      	movs	r2, r4
 8003c42:	9901      	ldr	r1, [sp, #4]
 8003c44:	9800      	ldr	r0, [sp, #0]
 8003c46:	9d08      	ldr	r5, [sp, #32]
 8003c48:	3243      	adds	r2, #67	@ 0x43
 8003c4a:	47a8      	blx	r5
 8003c4c:	3001      	adds	r0, #1
 8003c4e:	d025      	beq.n	8003c9c <_printf_common+0xa8>
 8003c50:	2206      	movs	r2, #6
 8003c52:	6823      	ldr	r3, [r4, #0]
 8003c54:	2500      	movs	r5, #0
 8003c56:	4013      	ands	r3, r2
 8003c58:	2b04      	cmp	r3, #4
 8003c5a:	d105      	bne.n	8003c68 <_printf_common+0x74>
 8003c5c:	6833      	ldr	r3, [r6, #0]
 8003c5e:	68e5      	ldr	r5, [r4, #12]
 8003c60:	1aed      	subs	r5, r5, r3
 8003c62:	43eb      	mvns	r3, r5
 8003c64:	17db      	asrs	r3, r3, #31
 8003c66:	401d      	ands	r5, r3
 8003c68:	68a3      	ldr	r3, [r4, #8]
 8003c6a:	6922      	ldr	r2, [r4, #16]
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	dd01      	ble.n	8003c74 <_printf_common+0x80>
 8003c70:	1a9b      	subs	r3, r3, r2
 8003c72:	18ed      	adds	r5, r5, r3
 8003c74:	2600      	movs	r6, #0
 8003c76:	42b5      	cmp	r5, r6
 8003c78:	d120      	bne.n	8003cbc <_printf_common+0xc8>
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	e010      	b.n	8003ca0 <_printf_common+0xac>
 8003c7e:	3501      	adds	r5, #1
 8003c80:	68e3      	ldr	r3, [r4, #12]
 8003c82:	6832      	ldr	r2, [r6, #0]
 8003c84:	1a9b      	subs	r3, r3, r2
 8003c86:	42ab      	cmp	r3, r5
 8003c88:	ddd2      	ble.n	8003c30 <_printf_common+0x3c>
 8003c8a:	0022      	movs	r2, r4
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	9901      	ldr	r1, [sp, #4]
 8003c90:	9800      	ldr	r0, [sp, #0]
 8003c92:	9f08      	ldr	r7, [sp, #32]
 8003c94:	3219      	adds	r2, #25
 8003c96:	47b8      	blx	r7
 8003c98:	3001      	adds	r0, #1
 8003c9a:	d1f0      	bne.n	8003c7e <_printf_common+0x8a>
 8003c9c:	2001      	movs	r0, #1
 8003c9e:	4240      	negs	r0, r0
 8003ca0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003ca2:	2030      	movs	r0, #48	@ 0x30
 8003ca4:	18e1      	adds	r1, r4, r3
 8003ca6:	3143      	adds	r1, #67	@ 0x43
 8003ca8:	7008      	strb	r0, [r1, #0]
 8003caa:	0021      	movs	r1, r4
 8003cac:	1c5a      	adds	r2, r3, #1
 8003cae:	3145      	adds	r1, #69	@ 0x45
 8003cb0:	7809      	ldrb	r1, [r1, #0]
 8003cb2:	18a2      	adds	r2, r4, r2
 8003cb4:	3243      	adds	r2, #67	@ 0x43
 8003cb6:	3302      	adds	r3, #2
 8003cb8:	7011      	strb	r1, [r2, #0]
 8003cba:	e7c1      	b.n	8003c40 <_printf_common+0x4c>
 8003cbc:	0022      	movs	r2, r4
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	9901      	ldr	r1, [sp, #4]
 8003cc2:	9800      	ldr	r0, [sp, #0]
 8003cc4:	9f08      	ldr	r7, [sp, #32]
 8003cc6:	321a      	adds	r2, #26
 8003cc8:	47b8      	blx	r7
 8003cca:	3001      	adds	r0, #1
 8003ccc:	d0e6      	beq.n	8003c9c <_printf_common+0xa8>
 8003cce:	3601      	adds	r6, #1
 8003cd0:	e7d1      	b.n	8003c76 <_printf_common+0x82>
	...

08003cd4 <_printf_i>:
 8003cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cd6:	b08b      	sub	sp, #44	@ 0x2c
 8003cd8:	9206      	str	r2, [sp, #24]
 8003cda:	000a      	movs	r2, r1
 8003cdc:	3243      	adds	r2, #67	@ 0x43
 8003cde:	9307      	str	r3, [sp, #28]
 8003ce0:	9005      	str	r0, [sp, #20]
 8003ce2:	9203      	str	r2, [sp, #12]
 8003ce4:	7e0a      	ldrb	r2, [r1, #24]
 8003ce6:	000c      	movs	r4, r1
 8003ce8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003cea:	2a78      	cmp	r2, #120	@ 0x78
 8003cec:	d809      	bhi.n	8003d02 <_printf_i+0x2e>
 8003cee:	2a62      	cmp	r2, #98	@ 0x62
 8003cf0:	d80b      	bhi.n	8003d0a <_printf_i+0x36>
 8003cf2:	2a00      	cmp	r2, #0
 8003cf4:	d100      	bne.n	8003cf8 <_printf_i+0x24>
 8003cf6:	e0bc      	b.n	8003e72 <_printf_i+0x19e>
 8003cf8:	497b      	ldr	r1, [pc, #492]	@ (8003ee8 <_printf_i+0x214>)
 8003cfa:	9104      	str	r1, [sp, #16]
 8003cfc:	2a58      	cmp	r2, #88	@ 0x58
 8003cfe:	d100      	bne.n	8003d02 <_printf_i+0x2e>
 8003d00:	e090      	b.n	8003e24 <_printf_i+0x150>
 8003d02:	0025      	movs	r5, r4
 8003d04:	3542      	adds	r5, #66	@ 0x42
 8003d06:	702a      	strb	r2, [r5, #0]
 8003d08:	e022      	b.n	8003d50 <_printf_i+0x7c>
 8003d0a:	0010      	movs	r0, r2
 8003d0c:	3863      	subs	r0, #99	@ 0x63
 8003d0e:	2815      	cmp	r0, #21
 8003d10:	d8f7      	bhi.n	8003d02 <_printf_i+0x2e>
 8003d12:	f7fc f9f9 	bl	8000108 <__gnu_thumb1_case_shi>
 8003d16:	0016      	.short	0x0016
 8003d18:	fff6001f 	.word	0xfff6001f
 8003d1c:	fff6fff6 	.word	0xfff6fff6
 8003d20:	001ffff6 	.word	0x001ffff6
 8003d24:	fff6fff6 	.word	0xfff6fff6
 8003d28:	fff6fff6 	.word	0xfff6fff6
 8003d2c:	003600a1 	.word	0x003600a1
 8003d30:	fff60080 	.word	0xfff60080
 8003d34:	00b2fff6 	.word	0x00b2fff6
 8003d38:	0036fff6 	.word	0x0036fff6
 8003d3c:	fff6fff6 	.word	0xfff6fff6
 8003d40:	0084      	.short	0x0084
 8003d42:	0025      	movs	r5, r4
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	3542      	adds	r5, #66	@ 0x42
 8003d48:	1d11      	adds	r1, r2, #4
 8003d4a:	6019      	str	r1, [r3, #0]
 8003d4c:	6813      	ldr	r3, [r2, #0]
 8003d4e:	702b      	strb	r3, [r5, #0]
 8003d50:	2301      	movs	r3, #1
 8003d52:	e0a0      	b.n	8003e96 <_printf_i+0x1c2>
 8003d54:	6818      	ldr	r0, [r3, #0]
 8003d56:	6809      	ldr	r1, [r1, #0]
 8003d58:	1d02      	adds	r2, r0, #4
 8003d5a:	060d      	lsls	r5, r1, #24
 8003d5c:	d50b      	bpl.n	8003d76 <_printf_i+0xa2>
 8003d5e:	6806      	ldr	r6, [r0, #0]
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	2e00      	cmp	r6, #0
 8003d64:	da03      	bge.n	8003d6e <_printf_i+0x9a>
 8003d66:	232d      	movs	r3, #45	@ 0x2d
 8003d68:	9a03      	ldr	r2, [sp, #12]
 8003d6a:	4276      	negs	r6, r6
 8003d6c:	7013      	strb	r3, [r2, #0]
 8003d6e:	4b5e      	ldr	r3, [pc, #376]	@ (8003ee8 <_printf_i+0x214>)
 8003d70:	270a      	movs	r7, #10
 8003d72:	9304      	str	r3, [sp, #16]
 8003d74:	e018      	b.n	8003da8 <_printf_i+0xd4>
 8003d76:	6806      	ldr	r6, [r0, #0]
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	0649      	lsls	r1, r1, #25
 8003d7c:	d5f1      	bpl.n	8003d62 <_printf_i+0x8e>
 8003d7e:	b236      	sxth	r6, r6
 8003d80:	e7ef      	b.n	8003d62 <_printf_i+0x8e>
 8003d82:	6808      	ldr	r0, [r1, #0]
 8003d84:	6819      	ldr	r1, [r3, #0]
 8003d86:	c940      	ldmia	r1!, {r6}
 8003d88:	0605      	lsls	r5, r0, #24
 8003d8a:	d402      	bmi.n	8003d92 <_printf_i+0xbe>
 8003d8c:	0640      	lsls	r0, r0, #25
 8003d8e:	d500      	bpl.n	8003d92 <_printf_i+0xbe>
 8003d90:	b2b6      	uxth	r6, r6
 8003d92:	6019      	str	r1, [r3, #0]
 8003d94:	4b54      	ldr	r3, [pc, #336]	@ (8003ee8 <_printf_i+0x214>)
 8003d96:	270a      	movs	r7, #10
 8003d98:	9304      	str	r3, [sp, #16]
 8003d9a:	2a6f      	cmp	r2, #111	@ 0x6f
 8003d9c:	d100      	bne.n	8003da0 <_printf_i+0xcc>
 8003d9e:	3f02      	subs	r7, #2
 8003da0:	0023      	movs	r3, r4
 8003da2:	2200      	movs	r2, #0
 8003da4:	3343      	adds	r3, #67	@ 0x43
 8003da6:	701a      	strb	r2, [r3, #0]
 8003da8:	6863      	ldr	r3, [r4, #4]
 8003daa:	60a3      	str	r3, [r4, #8]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	db03      	blt.n	8003db8 <_printf_i+0xe4>
 8003db0:	2104      	movs	r1, #4
 8003db2:	6822      	ldr	r2, [r4, #0]
 8003db4:	438a      	bics	r2, r1
 8003db6:	6022      	str	r2, [r4, #0]
 8003db8:	2e00      	cmp	r6, #0
 8003dba:	d102      	bne.n	8003dc2 <_printf_i+0xee>
 8003dbc:	9d03      	ldr	r5, [sp, #12]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00c      	beq.n	8003ddc <_printf_i+0x108>
 8003dc2:	9d03      	ldr	r5, [sp, #12]
 8003dc4:	0030      	movs	r0, r6
 8003dc6:	0039      	movs	r1, r7
 8003dc8:	f7fc fa2e 	bl	8000228 <__aeabi_uidivmod>
 8003dcc:	9b04      	ldr	r3, [sp, #16]
 8003dce:	3d01      	subs	r5, #1
 8003dd0:	5c5b      	ldrb	r3, [r3, r1]
 8003dd2:	702b      	strb	r3, [r5, #0]
 8003dd4:	0033      	movs	r3, r6
 8003dd6:	0006      	movs	r6, r0
 8003dd8:	429f      	cmp	r7, r3
 8003dda:	d9f3      	bls.n	8003dc4 <_printf_i+0xf0>
 8003ddc:	2f08      	cmp	r7, #8
 8003dde:	d109      	bne.n	8003df4 <_printf_i+0x120>
 8003de0:	6823      	ldr	r3, [r4, #0]
 8003de2:	07db      	lsls	r3, r3, #31
 8003de4:	d506      	bpl.n	8003df4 <_printf_i+0x120>
 8003de6:	6862      	ldr	r2, [r4, #4]
 8003de8:	6923      	ldr	r3, [r4, #16]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	dc02      	bgt.n	8003df4 <_printf_i+0x120>
 8003dee:	2330      	movs	r3, #48	@ 0x30
 8003df0:	3d01      	subs	r5, #1
 8003df2:	702b      	strb	r3, [r5, #0]
 8003df4:	9b03      	ldr	r3, [sp, #12]
 8003df6:	1b5b      	subs	r3, r3, r5
 8003df8:	6123      	str	r3, [r4, #16]
 8003dfa:	9b07      	ldr	r3, [sp, #28]
 8003dfc:	0021      	movs	r1, r4
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	9805      	ldr	r0, [sp, #20]
 8003e02:	9b06      	ldr	r3, [sp, #24]
 8003e04:	aa09      	add	r2, sp, #36	@ 0x24
 8003e06:	f7ff fef5 	bl	8003bf4 <_printf_common>
 8003e0a:	3001      	adds	r0, #1
 8003e0c:	d148      	bne.n	8003ea0 <_printf_i+0x1cc>
 8003e0e:	2001      	movs	r0, #1
 8003e10:	4240      	negs	r0, r0
 8003e12:	b00b      	add	sp, #44	@ 0x2c
 8003e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e16:	2220      	movs	r2, #32
 8003e18:	6809      	ldr	r1, [r1, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	6022      	str	r2, [r4, #0]
 8003e1e:	2278      	movs	r2, #120	@ 0x78
 8003e20:	4932      	ldr	r1, [pc, #200]	@ (8003eec <_printf_i+0x218>)
 8003e22:	9104      	str	r1, [sp, #16]
 8003e24:	0021      	movs	r1, r4
 8003e26:	3145      	adds	r1, #69	@ 0x45
 8003e28:	700a      	strb	r2, [r1, #0]
 8003e2a:	6819      	ldr	r1, [r3, #0]
 8003e2c:	6822      	ldr	r2, [r4, #0]
 8003e2e:	c940      	ldmia	r1!, {r6}
 8003e30:	0610      	lsls	r0, r2, #24
 8003e32:	d402      	bmi.n	8003e3a <_printf_i+0x166>
 8003e34:	0650      	lsls	r0, r2, #25
 8003e36:	d500      	bpl.n	8003e3a <_printf_i+0x166>
 8003e38:	b2b6      	uxth	r6, r6
 8003e3a:	6019      	str	r1, [r3, #0]
 8003e3c:	07d3      	lsls	r3, r2, #31
 8003e3e:	d502      	bpl.n	8003e46 <_printf_i+0x172>
 8003e40:	2320      	movs	r3, #32
 8003e42:	4313      	orrs	r3, r2
 8003e44:	6023      	str	r3, [r4, #0]
 8003e46:	2e00      	cmp	r6, #0
 8003e48:	d001      	beq.n	8003e4e <_printf_i+0x17a>
 8003e4a:	2710      	movs	r7, #16
 8003e4c:	e7a8      	b.n	8003da0 <_printf_i+0xcc>
 8003e4e:	2220      	movs	r2, #32
 8003e50:	6823      	ldr	r3, [r4, #0]
 8003e52:	4393      	bics	r3, r2
 8003e54:	6023      	str	r3, [r4, #0]
 8003e56:	e7f8      	b.n	8003e4a <_printf_i+0x176>
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	680d      	ldr	r5, [r1, #0]
 8003e5c:	1d10      	adds	r0, r2, #4
 8003e5e:	6949      	ldr	r1, [r1, #20]
 8003e60:	6018      	str	r0, [r3, #0]
 8003e62:	6813      	ldr	r3, [r2, #0]
 8003e64:	062e      	lsls	r6, r5, #24
 8003e66:	d501      	bpl.n	8003e6c <_printf_i+0x198>
 8003e68:	6019      	str	r1, [r3, #0]
 8003e6a:	e002      	b.n	8003e72 <_printf_i+0x19e>
 8003e6c:	066d      	lsls	r5, r5, #25
 8003e6e:	d5fb      	bpl.n	8003e68 <_printf_i+0x194>
 8003e70:	8019      	strh	r1, [r3, #0]
 8003e72:	2300      	movs	r3, #0
 8003e74:	9d03      	ldr	r5, [sp, #12]
 8003e76:	6123      	str	r3, [r4, #16]
 8003e78:	e7bf      	b.n	8003dfa <_printf_i+0x126>
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	1d11      	adds	r1, r2, #4
 8003e7e:	6019      	str	r1, [r3, #0]
 8003e80:	6815      	ldr	r5, [r2, #0]
 8003e82:	2100      	movs	r1, #0
 8003e84:	0028      	movs	r0, r5
 8003e86:	6862      	ldr	r2, [r4, #4]
 8003e88:	f000 f858 	bl	8003f3c <memchr>
 8003e8c:	2800      	cmp	r0, #0
 8003e8e:	d001      	beq.n	8003e94 <_printf_i+0x1c0>
 8003e90:	1b40      	subs	r0, r0, r5
 8003e92:	6060      	str	r0, [r4, #4]
 8003e94:	6863      	ldr	r3, [r4, #4]
 8003e96:	6123      	str	r3, [r4, #16]
 8003e98:	2300      	movs	r3, #0
 8003e9a:	9a03      	ldr	r2, [sp, #12]
 8003e9c:	7013      	strb	r3, [r2, #0]
 8003e9e:	e7ac      	b.n	8003dfa <_printf_i+0x126>
 8003ea0:	002a      	movs	r2, r5
 8003ea2:	6923      	ldr	r3, [r4, #16]
 8003ea4:	9906      	ldr	r1, [sp, #24]
 8003ea6:	9805      	ldr	r0, [sp, #20]
 8003ea8:	9d07      	ldr	r5, [sp, #28]
 8003eaa:	47a8      	blx	r5
 8003eac:	3001      	adds	r0, #1
 8003eae:	d0ae      	beq.n	8003e0e <_printf_i+0x13a>
 8003eb0:	6823      	ldr	r3, [r4, #0]
 8003eb2:	079b      	lsls	r3, r3, #30
 8003eb4:	d415      	bmi.n	8003ee2 <_printf_i+0x20e>
 8003eb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003eb8:	68e0      	ldr	r0, [r4, #12]
 8003eba:	4298      	cmp	r0, r3
 8003ebc:	daa9      	bge.n	8003e12 <_printf_i+0x13e>
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	e7a7      	b.n	8003e12 <_printf_i+0x13e>
 8003ec2:	0022      	movs	r2, r4
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	9906      	ldr	r1, [sp, #24]
 8003ec8:	9805      	ldr	r0, [sp, #20]
 8003eca:	9e07      	ldr	r6, [sp, #28]
 8003ecc:	3219      	adds	r2, #25
 8003ece:	47b0      	blx	r6
 8003ed0:	3001      	adds	r0, #1
 8003ed2:	d09c      	beq.n	8003e0e <_printf_i+0x13a>
 8003ed4:	3501      	adds	r5, #1
 8003ed6:	68e3      	ldr	r3, [r4, #12]
 8003ed8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003eda:	1a9b      	subs	r3, r3, r2
 8003edc:	42ab      	cmp	r3, r5
 8003ede:	dcf0      	bgt.n	8003ec2 <_printf_i+0x1ee>
 8003ee0:	e7e9      	b.n	8003eb6 <_printf_i+0x1e2>
 8003ee2:	2500      	movs	r5, #0
 8003ee4:	e7f7      	b.n	8003ed6 <_printf_i+0x202>
 8003ee6:	46c0      	nop			@ (mov r8, r8)
 8003ee8:	08004091 	.word	0x08004091
 8003eec:	080040a2 	.word	0x080040a2

08003ef0 <memmove>:
 8003ef0:	b510      	push	{r4, lr}
 8003ef2:	4288      	cmp	r0, r1
 8003ef4:	d806      	bhi.n	8003f04 <memmove+0x14>
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d008      	beq.n	8003f0e <memmove+0x1e>
 8003efc:	5ccc      	ldrb	r4, [r1, r3]
 8003efe:	54c4      	strb	r4, [r0, r3]
 8003f00:	3301      	adds	r3, #1
 8003f02:	e7f9      	b.n	8003ef8 <memmove+0x8>
 8003f04:	188b      	adds	r3, r1, r2
 8003f06:	4298      	cmp	r0, r3
 8003f08:	d2f5      	bcs.n	8003ef6 <memmove+0x6>
 8003f0a:	3a01      	subs	r2, #1
 8003f0c:	d200      	bcs.n	8003f10 <memmove+0x20>
 8003f0e:	bd10      	pop	{r4, pc}
 8003f10:	5c8b      	ldrb	r3, [r1, r2]
 8003f12:	5483      	strb	r3, [r0, r2]
 8003f14:	e7f9      	b.n	8003f0a <memmove+0x1a>
	...

08003f18 <_sbrk_r>:
 8003f18:	2300      	movs	r3, #0
 8003f1a:	b570      	push	{r4, r5, r6, lr}
 8003f1c:	4d06      	ldr	r5, [pc, #24]	@ (8003f38 <_sbrk_r+0x20>)
 8003f1e:	0004      	movs	r4, r0
 8003f20:	0008      	movs	r0, r1
 8003f22:	602b      	str	r3, [r5, #0]
 8003f24:	f7fc fd86 	bl	8000a34 <_sbrk>
 8003f28:	1c43      	adds	r3, r0, #1
 8003f2a:	d103      	bne.n	8003f34 <_sbrk_r+0x1c>
 8003f2c:	682b      	ldr	r3, [r5, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d000      	beq.n	8003f34 <_sbrk_r+0x1c>
 8003f32:	6023      	str	r3, [r4, #0]
 8003f34:	bd70      	pop	{r4, r5, r6, pc}
 8003f36:	46c0      	nop			@ (mov r8, r8)
 8003f38:	20000318 	.word	0x20000318

08003f3c <memchr>:
 8003f3c:	b2c9      	uxtb	r1, r1
 8003f3e:	1882      	adds	r2, r0, r2
 8003f40:	4290      	cmp	r0, r2
 8003f42:	d101      	bne.n	8003f48 <memchr+0xc>
 8003f44:	2000      	movs	r0, #0
 8003f46:	4770      	bx	lr
 8003f48:	7803      	ldrb	r3, [r0, #0]
 8003f4a:	428b      	cmp	r3, r1
 8003f4c:	d0fb      	beq.n	8003f46 <memchr+0xa>
 8003f4e:	3001      	adds	r0, #1
 8003f50:	e7f6      	b.n	8003f40 <memchr+0x4>

08003f52 <memcpy>:
 8003f52:	2300      	movs	r3, #0
 8003f54:	b510      	push	{r4, lr}
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d100      	bne.n	8003f5c <memcpy+0xa>
 8003f5a:	bd10      	pop	{r4, pc}
 8003f5c:	5ccc      	ldrb	r4, [r1, r3]
 8003f5e:	54c4      	strb	r4, [r0, r3]
 8003f60:	3301      	adds	r3, #1
 8003f62:	e7f8      	b.n	8003f56 <memcpy+0x4>

08003f64 <_realloc_r>:
 8003f64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f66:	0006      	movs	r6, r0
 8003f68:	000c      	movs	r4, r1
 8003f6a:	0015      	movs	r5, r2
 8003f6c:	2900      	cmp	r1, #0
 8003f6e:	d105      	bne.n	8003f7c <_realloc_r+0x18>
 8003f70:	0011      	movs	r1, r2
 8003f72:	f7ff fc51 	bl	8003818 <_malloc_r>
 8003f76:	0004      	movs	r4, r0
 8003f78:	0020      	movs	r0, r4
 8003f7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f7c:	2a00      	cmp	r2, #0
 8003f7e:	d103      	bne.n	8003f88 <_realloc_r+0x24>
 8003f80:	f7ff fbde 	bl	8003740 <_free_r>
 8003f84:	2400      	movs	r4, #0
 8003f86:	e7f7      	b.n	8003f78 <_realloc_r+0x14>
 8003f88:	f000 f81b 	bl	8003fc2 <_malloc_usable_size_r>
 8003f8c:	0007      	movs	r7, r0
 8003f8e:	4285      	cmp	r5, r0
 8003f90:	d802      	bhi.n	8003f98 <_realloc_r+0x34>
 8003f92:	0843      	lsrs	r3, r0, #1
 8003f94:	42ab      	cmp	r3, r5
 8003f96:	d3ef      	bcc.n	8003f78 <_realloc_r+0x14>
 8003f98:	0029      	movs	r1, r5
 8003f9a:	0030      	movs	r0, r6
 8003f9c:	f7ff fc3c 	bl	8003818 <_malloc_r>
 8003fa0:	9001      	str	r0, [sp, #4]
 8003fa2:	2800      	cmp	r0, #0
 8003fa4:	d0ee      	beq.n	8003f84 <_realloc_r+0x20>
 8003fa6:	002a      	movs	r2, r5
 8003fa8:	42bd      	cmp	r5, r7
 8003faa:	d900      	bls.n	8003fae <_realloc_r+0x4a>
 8003fac:	003a      	movs	r2, r7
 8003fae:	0021      	movs	r1, r4
 8003fb0:	9801      	ldr	r0, [sp, #4]
 8003fb2:	f7ff ffce 	bl	8003f52 <memcpy>
 8003fb6:	0021      	movs	r1, r4
 8003fb8:	0030      	movs	r0, r6
 8003fba:	f7ff fbc1 	bl	8003740 <_free_r>
 8003fbe:	9c01      	ldr	r4, [sp, #4]
 8003fc0:	e7da      	b.n	8003f78 <_realloc_r+0x14>

08003fc2 <_malloc_usable_size_r>:
 8003fc2:	1f0b      	subs	r3, r1, #4
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	1f18      	subs	r0, r3, #4
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	da01      	bge.n	8003fd0 <_malloc_usable_size_r+0xe>
 8003fcc:	580b      	ldr	r3, [r1, r0]
 8003fce:	18c0      	adds	r0, r0, r3
 8003fd0:	4770      	bx	lr
	...

08003fd4 <_init>:
 8003fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd6:	46c0      	nop			@ (mov r8, r8)
 8003fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fda:	bc08      	pop	{r3}
 8003fdc:	469e      	mov	lr, r3
 8003fde:	4770      	bx	lr

08003fe0 <_fini>:
 8003fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fe2:	46c0      	nop			@ (mov r8, r8)
 8003fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fe6:	bc08      	pop	{r3}
 8003fe8:	469e      	mov	lr, r3
 8003fea:	4770      	bx	lr
